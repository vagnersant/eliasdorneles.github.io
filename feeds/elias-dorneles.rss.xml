<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Hopeful Ramble</title><link>/</link><description></description><lastBuildDate>Fri, 21 Apr 2017 22:09:00 -0300</lastBuildDate><item><title>Urwid is great!</title><link>/2017/04/21/urwid-is-great.html</link><description>&lt;p&gt;Ever since I started using the awesome &lt;a href="https://pypi.python.org/pypi/pudb"&gt;pudb debugger for Python
programs&lt;/a&gt; I've been curious about the &lt;a href="http://urwid.org/"&gt;urwid
library&lt;/a&gt;, an user interface library for console-based
applications that the debugger uses. The &lt;a href="http://urwid.org/examples/index.html"&gt;examples in the
gallery&lt;/a&gt; are just gorgeous!&lt;/p&gt;
&lt;p&gt;So last week I decided I would write a console-based game and learn Urwid in the process.
I decided to implement a &lt;a href="https://en.wikipedia.org/wiki/Patience_(game)"&gt;Solitaire clone (specifically, the Klondike form)&lt;/a&gt;.
I thought it would be fun to draw the cards using the &lt;a href="https://en.wikipedia.org/wiki/Box-drawing_character"&gt;box-drawing characters&lt;/a&gt; and &lt;a href="https://en.wikipedia.org/wiki/Playing_cards_in_Unicode"&gt;card symbols&lt;/a&gt; available in Unicode.&lt;/p&gt;
&lt;p&gt;Here is a screenshot of the final game:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://raw.githubusercontent.com/eliasdorneles/usolitaire/master/screenshot-usolitaire.png" /&gt;&lt;/p&gt;
&lt;p&gt;Before starting to code, I explored the library a bit in the shell, following &lt;a href="http://urwid.org/tutorial/index.html"&gt;the examples from the tutorial&lt;/a&gt;.
I also did &lt;a href="https://raw.githubusercontent.com/eliasdorneles/usolitaire/c18b4643bcd20cf53705a16de6072f2d1e766a43/PLAN.txt"&gt;some planning&lt;/a&gt;, working out how to draw the game elements so that it would fit a 40x80 characters terminal window.&lt;/p&gt;
&lt;p&gt;Then it was time to start coding, I started by trying to write something that I could put in the screen, a &lt;a href="http://urwid.org/manual/widgets.html"&gt;custom widget&lt;/a&gt; to represent a card.&lt;/p&gt;
&lt;p&gt;After reading about widget layouts and sizings, I thought I wanted a fixed size widget, but my attempts to write one were hard to use, I kept running into &lt;a href="https://github.com/urwid/urwid/wiki/FAQ#what-does-the-attributeerror-xxx-object-has-no-attribute-rows-error-mean"&gt;errors that happen when you try to use a fixed widget with things that expect something else&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was finally able to do it after reading more carefully the &lt;a href="http://urwid.org/manual/widgets.html#custom-widgets"&gt;documentation about custom widgets&lt;/a&gt; and figured it was easier to use the &lt;code&gt;urwid.WidgetWrap&lt;/code&gt; class around a &lt;code&gt;urwid.Text&lt;/code&gt; widget drawing the card using line-breaks to break the content.&lt;/p&gt;
&lt;p&gt;Overall I found the library nicely documented and very well designed.&lt;/p&gt;
&lt;p&gt;I kept running into those errors related to the sizing mode later on, so I had to become a bit more acquainted with the widgets I was using to know if they were box-sizing or flow-sizing mode. I wonder if there is an easier way of dealing with those.&lt;/p&gt;
&lt;p&gt;I'm really liking to play with this library, I think I'll try more stuff with it soon.&lt;/p&gt;
&lt;p&gt;If you want to play the game, you can install it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install usolitaire
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;a href="https://github.com/eliasdorneles/usolitaire"&gt;source code is on Github&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Fri, 21 Apr 2017 22:09:00 -0300</pubDate><guid isPermaLink="false">tag:,2017-04-21:2017/04/21/urwid-is-great.html</guid></item><item><title>Lazy evaluation as alternative to state machines</title><link>/2017/03/27/lazy-evaluation-as-alternative-to-state-machines.html</link><description>&lt;p&gt;Some days ago I read &lt;a href="http://eli.thegreenplace.net/2009/08/29/co-routines-as-an-alternative-to-state-machines"&gt;this nice article talking about co-routines as an
alternative to state
machines&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The most popular use case for co-routines in Python has been asynchronous I/O,
and there are a bunch of Python things that use them (like
&lt;a href="https://twistedmatrix.com"&gt;Twisted&lt;/a&gt;, &lt;a href="http://www.tornadoweb.org"&gt;Tornado&lt;/a&gt; and
the standard library module
&lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;asyncio&lt;/a&gt; which appeared in
Python 3.4).&lt;/p&gt;
&lt;p&gt;Apart from the async stuff, I find quite hard to think up use cases for
co-routines, they mostly look like complicated stuff that smart people have a
lot of trouble to make it useful.&lt;/p&gt;
&lt;p&gt;So I was curious about this idea of using co-routines as alternative for &lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine"&gt;state
machines&lt;/a&gt;, because state
machines are kind of everywhere, even if not always explicitly.&lt;/p&gt;
&lt;p&gt;I've seen a few other examples that kinda made sense, like David's &lt;a href="http://www.dabeaz.com/coroutines/pyos8.py"&gt;scheduler
for cooperative tasks&lt;/a&gt;, and a
discrete event simulation in the book &lt;a href="http://shop.oreilly.com/product/0636920032519.do"&gt;Fluent
Python&lt;/a&gt; by &lt;a href="https://twitter.com/ramalhoorg"&gt;Luciano
Ramalho&lt;/a&gt;, but these still seem a bit far away
for me.&lt;/p&gt;
&lt;p&gt;So I decided to test out for myself reimplementing some simple state
machine as a co-routine and see how it goes.&lt;/p&gt;
&lt;h2&gt;Are co-routines an alternative to state machines?&lt;/h2&gt;
&lt;p&gt;To try out the idea, I decided to write a small program using a state machine,
and then write a co-routine version of it. I decided to implement a naive
program to strip out C-style comments.&lt;/p&gt;
&lt;p&gt;I must say that this is not production code, it ignores the case of comments
inside of a string (as in &lt;code&gt;'/**/'&lt;/code&gt; for the sake of simplicity). I only wrote
this to explore the idea of alternatives to state machines.&lt;/p&gt;
&lt;p&gt;Here is a diagram of the state machine:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img alt="" src="/images/fsm_strip_comments.png" /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/eliasdorneles/lazy-eval-gt-state-machines/blob/master/001_state_machine.py"&gt;Here is the state machine implementation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was fairly straightforward to implement, but the code ends up a bit verbose.&lt;/p&gt;
&lt;p&gt;Next, I went on and wrote &lt;a href="https://github.com/eliasdorneles/lazy-eval-gt-state-machines/blob/master/002_coroutine.py"&gt;the co-routine version&lt;/a&gt;, and didn't really like the result.
First of all, I find a bit cumbersome having to write the sink and build the driving code,
I thought: "why can't I just use the function? what if I want to do something
else than just print, do I have to write a sink-like code every time?"&lt;/p&gt;
&lt;p&gt;After mulling for a bit, I realized that the most important gain from the
co-routine code was being able to "pause execution", so I figured I could write
a generator function that would consume the input lazily. While attempting
to do that, I realized I don't even need it to be a generator, it can
be just a regular function that will consume the input lazily and
return the full results.&lt;/p&gt;
&lt;p&gt;And &lt;a href="https://github.com/eliasdorneles/lazy-eval-gt-state-machines/blob/master/004_imperative_final.py"&gt;that's what I did, and decided that I like this code more than the co-routine version&lt;/a&gt;.
I think it allows you to skip thinking about the explicit states when writing
the code, it's lazy and it's easy to use (just a regular function).&lt;/p&gt;
&lt;p&gt;I'm not sure if it's better than the state machine version, though,
because I think to read it and understand you sort of have to build a
mental model of the states in your head. So it seems easier to write,
but may be tougher to read.
I think for state machines with high number of states this would not be
good for maintainability, and you'd probably want have a diagram.&lt;/p&gt;
&lt;p&gt;I also had &lt;a href="https://github.com/eliasdorneles/lazy-eval-gt-state-machines/commit/458fb7e124dff3bb06a9f61b62453507ad0c3d75"&gt;a bug on the first
implementation&lt;/a&gt;,
which I only noticed when writing this blog post and &lt;a href="https://github.com/eliasdorneles/lazy-eval-gt-state-machines/blob/master/diagram.dot"&gt;creating the state
machine
diagram&lt;/a&gt;
and then had to go back and &lt;a href="https://github.com/eliasdorneles/lazy-eval-gt-state-machines/commit/0bb8092a7d7b80aae34ef95af1334657ffd04ff5"&gt;fix it in the other implementations&lt;/a&gt;.
Fixing the bug was a lot easier for the state machine implementation.&lt;/p&gt;
&lt;h2&gt;Conclusions, or, how I feel about this&lt;/h2&gt;
&lt;p&gt;State machines are complicated, but they're very useful. Even if it takes some
effort to understand them, I feel it's still less effort than co-routines.&lt;/p&gt;
&lt;p&gt;Co-routines are also complicated, I find they demand too much cognition
to work with and can be harder to debug than regular state machine code.&lt;/p&gt;
&lt;p&gt;Combining lazy evaluation and Python functions probably work better as an
alternative of state machines than co-routines, because they give you the
benefits without most of the drawbacks.&lt;/p&gt;
&lt;p&gt;I'm not sure if they're as much powerful nor I'm convinced that the code is
more maintainable, but for some state machines it may be very expressive.&lt;/p&gt;
&lt;p&gt;Also, &lt;a href="https://github.com/eliasdorneles/lazy-eval-gt-state-machines/blob/master/005_pro.py"&gt;regular expressions are awesome&lt;/a&gt;. =)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Mon, 27 Mar 2017 22:13:00 -0300</pubDate><guid isPermaLink="false">tag:,2017-03-27:2017/03/27/lazy-evaluation-as-alternative-to-state-machines.html</guid></item><item><title>Pybee is awesome</title><link>/2016/10/28/pybee-is-awesome.html</link><description>&lt;p&gt;I've recently discovered the &lt;a href="http://pybee.org"&gt;BeeWare project, also known as pybee&lt;/a&gt;, and
it's bloody awesome.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://pybee.org"&gt;
&lt;img src="http://pybee.org/static/images/brutus-270.png" alt="BeeWare logo" width="150"&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;I had stumbled upon it before at Pycon US earlier, they had a booth set up
and their website said "BeeWare, the IDEs of Python".&lt;/p&gt;
&lt;p&gt;I didn't gave much attention at it at first, because I've kinda given up on
IDEs some time ago. Every now and then I try Pycharm (which seems to be one of
the best UI for Python development out there) and always end up getting back to
Vim. An open source replacement for Pycharm definitely sounded cool, but still
didn't seem much more than a bunch of developers tools born out of yak-shaving.&lt;/p&gt;
&lt;p&gt;However, while there is some fun yak-shaving involved, it's just a teeny tiny
part of the picture.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pybee.org/project/overview/"&gt;BeeWare is about bringing to people the power of computing&lt;/a&gt;.&lt;/p&gt;


&lt;p&gt;It's about enabling people who learned a little bit of Python programming to
build something for their own needs, using the devices and environments they're
already using now. That means smartphones, tablets and web browsers.&lt;/p&gt;
&lt;p&gt;Sure, professional programmers can dive into new programming languages and
environments to be able to build a nice native app. But professional
programmers are a tiny part of world population.&lt;/p&gt;
&lt;p&gt;Many people learn just enough of programming to solve a problem. And Python is
a great language for that, because with just-enough-Python you can already do
tons of stuff.&lt;/p&gt;
&lt;p&gt;Many people in the Python community aren't working as professional developers,
they just use Python to solve different kinds of human problems.&lt;/p&gt;
&lt;p&gt;BeeWare will give these people the power of building stuff to show to their friends.&lt;/p&gt;
&lt;p&gt;And of course, this will be empowering for professional developers as well!&lt;/p&gt;
&lt;p&gt;I love Python, but the truth nowadays is that if I want to do something that my
family and friends would use, chances are that I'd be doing more JavaScript than Python.
Because that's the thing that I know how to program for that would be easily accessible
from the devices that they're using all the time.&lt;/p&gt;
&lt;p&gt;That's why this project is such a big deal.&lt;/p&gt;
&lt;p&gt;I myself can't wait to be able to use this stuff!&lt;/p&gt;
&lt;p&gt;You can do some things already, see &lt;a href="https://www.youtube.com/watch?v=RisCgSIWwLA"&gt;a demo video
here&lt;/a&gt; and &lt;a href="https://gist.github.com/freakboy3742/7beb22c587e57240610777a44af645d8"&gt;the code used for
it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is just a proof-of-concept, you can see in the code that it's still using
different codebases for each target platform. There is still work to be done
until getting to the point of building apps for all platforms from the same
codebase, but the foundation is there.&lt;/p&gt;
&lt;p&gt;If you love Python and are looking for an open source project to contribute,
consider the &lt;a href="http://pybee.org/contributing/"&gt;BeeWare project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It's got a wonderful mission, it's welcoming to beginners and there's plenty
of work to do. You'll be helping to build the future of Python.&lt;/p&gt;
&lt;p&gt;Go watch the video of the talk &lt;a href="http://pybee.org/community/resources/python-all-the-things/"&gt;Python All the Things&lt;/a&gt;, presented at Pycon
Australia by the &lt;a href="http://pybee.org/community/team/"&gt;delightful Russell Keith-Magee who founded the BeeWare
project&lt;/a&gt;, get excited and get to work! =)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Fri, 28 Oct 2016 14:28:00 -0200</pubDate><guid isPermaLink="false">tag:,2016-10-28:2016/10/28/pybee-is-awesome.html</guid></item><item><title>On getting productive with Git</title><link>/2016/06/19/on-getting-productive-with-git.html</link><description>&lt;p&gt;I remember the first time I submitted a pull request in GitHub and some
reviewer asked me to &lt;a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History#Squashing-Commits"&gt;squash the
commits&lt;/a&gt;.
I had no idea what they were talking about. I didn't have any friends who knew
Git, I was pretty much a noob on Git and GitHub. It's easy to forget how scary
this stuff can be for someone just starting out with their first open source
contribution.&lt;/p&gt;
&lt;div class="figure align-right" style="width: 250px"&gt;
&lt;img src="/images/confused.png"&gt;
&lt;p class="caption"&gt;
    First-timer OSS contributor asked to rebase and squash commits
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;It took me several weeks to figure out the whole thing because I was so afraid
of messing up. And in the end the code didn't even got merged.&lt;/p&gt;
&lt;p&gt;I never forgot my frustration during this, which is why today I avoid as much
as possible to ask for someone to rebase their code in a pull request, unless I
can pair with them and show how to do it.&lt;/p&gt;


&lt;p&gt;Well, nowadays &lt;a href="https://help.github.com/articles/about-pull-request-merge-squashing/"&gt;GitHub allows a maintainer to squash commits when
merging&lt;/a&gt;,
which is pretty cool. However, this isn't a task that's particularly hard to
do. When you have someone else to show you how, you pick it up real fast. It's
just a bit scary when you're on your own.&lt;/p&gt;
&lt;p&gt;I've found there are many little things like this with Git. Git is a fine tool
for collaborating on software development and many open source developers would
find hard to use any other thing.&lt;/p&gt;
&lt;p&gt;However, there is all this learning curve you must go through until you're
finally actually productive with it. When you're just starting to use it, this
XKCD comic is very real:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/1597"&gt;
&lt;img src="https://imgs.xkcd.com/comics/git.png" class="align-center"&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You want to get stuff done, you don't want to be spending cognition on your
version control tool. With Git, it takes a little while to get to a point where
you don't need to think much about it, at least when you're collaborating on a
project with many different people, as is the case in many open source
projects.&lt;/p&gt;
&lt;p&gt;I want to share with you a couple things I learned in order to get productive
with Git, in the hopes that it will ease your own learning curve and get you
productive quicker. This won't be a Git tutorial, it's more like a booster of
your own Git learning. These are things that helped me to learn and use Git
better. If you want a tutorial, &lt;a href="https://try.github.io"&gt;this is a cool one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm far from a Git expert, most of what I learned was while trying to get stuff
done, usually after googling for &lt;em&gt;"how to do X in Git"&lt;/em&gt;. I have trouble
understanding Git's help because it seems to be written for people that know Git
internals, using all this unfamiliar vocabulary. But I can get stuff done, and
you can too.&lt;/p&gt;
&lt;p&gt;So, let's start! The first thing I want you to know is ...&lt;/p&gt;
&lt;h2&gt;There is always a way to undo&lt;/h2&gt;
&lt;p&gt;The fact that this isn't obvious and that undoing things in Git aren't
always straightforward, is one of the biggest reasons for the fear of messing up.
So, let's get rid of those fears first.&lt;/p&gt;
&lt;p&gt;Almost always, there is a way to undo whatever you've done. This is true even
when you've used one of the power tools (&lt;code&gt;git rebase&lt;/code&gt;) that rewrites the commit
history. As long as you haven't deleted your local repo, you can always get
back to a previous state.&lt;/p&gt;
&lt;h3&gt;Undo a commit&lt;/h3&gt;
&lt;p&gt;If you've committed and then realized that you didn't mean to,
don't worry, you can undo it with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git undo-commit
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will undo the last commit, but will keep your files intact
so you won't lose any work.&lt;/p&gt;
&lt;p&gt;Now, if you've just tried running that and it didn't work it's because I've
lied to you -- sorry! That command doesn't exist by default in Git, but it
should! In order to add it, run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global alias.undo-commit &amp;#39;reset HEAD~1 --mixed&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This adds an alias, which is essentially a shortcut to another command.
Git aliases are very helpful, because that's how you tweak Git's complicated
command line interface to something that's actually usable. Aliases (and
Git's global configuration for your user) are stored in a &lt;code&gt;.gitconfig&lt;/code&gt;
file in your user directory, which you can edit using your editor if you like.&lt;/p&gt;
&lt;p&gt;In fact, you can even add an alias to add new aliases more easily, but this may
be getting out of hand... Anyway, later on, we'll see also how to use Bash
aliases and functions to further improve the workflow.&lt;/p&gt;
&lt;p&gt;You can check &lt;a href="https://github.com/eliasdorneles/dotfiles/tree/master/gitconfig"&gt;my personal
gitconfig&lt;/a&gt;
(which contains the stuff I share here and more) if you're already familiar
with this stuff and came here only for the Git aliases.&lt;/p&gt;
&lt;p&gt;You can use any other alias name that you prefer instead of &lt;code&gt;undo-commit&lt;/code&gt;
there. Personally, I use just &lt;code&gt;undo&lt;/code&gt; for this one.&lt;/p&gt;
&lt;h3&gt;Undo adding a file to commit&lt;/h3&gt;
&lt;p&gt;If you've added a file with &lt;code&gt;git add&lt;/code&gt; that you didn't mean to,
you can undo it with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git undo-add
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, this is only after you've added the proper alias with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global alias.undo-add &amp;#39;reset --keep&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Undo a rebase that went wrong&lt;/h3&gt;
&lt;p&gt;If you've tried doing a rebase or some other command that rewrote the commit history
and you want to undo it, you can use something called the reference log (or, &lt;code&gt;reflog&lt;/code&gt;).
Try running &lt;code&gt;git reflog&lt;/code&gt; in a Git repository, you'll see something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;26e15cf HEAD@{0}: rebase finished: returning to refs/heads/master
26e15cf HEAD@{1}: pull --rebase: moving basic path config to ~/.profile to work with gnome apps
f993d5c HEAD@{2}: pull --rebase: checkout f993d5cc3d6df6ce9f5c083ebf17d45b9c7e9130
b517509 HEAD@{3}: pull: Merge made by the &amp;#39;recursive&amp;#39; strategy.
29438f2 HEAD@{4}: commit: moving basic path config to ~/.profile to work with gnome apps
a000618 HEAD@{5}: clone: from git@github.com:eliasdorneles/dotfiles.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a log of every state of your files that is stored, which includes
when you commit changes, checkout branches, do rebases (with separate states
for every step of the rebase), merges and etc.&lt;/p&gt;
&lt;p&gt;You can get back to any of those states, using the command below, replacing
&lt;code&gt;REFLOG_ENTRY&lt;/code&gt; by the &lt;code&gt;HEAD@{index}&lt;/code&gt; from the reflog for the state
you want to go back:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git reset --hard REFLOG_ENTRY
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that those numbers are counting backwards, they change every time you make
a change in the repo. You want to always run &lt;code&gt;git reflog&lt;/code&gt; before going back,
to be sure you'll use the up-to-date reference.&lt;/p&gt;
&lt;p&gt;Also, note that these logs are only stored locally, you'll lose them if you delete
your local repo.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Alright, we're done covering undoing stuff. I hope now that you know how to
undo, you will feel more comfortable trying more stuff without the fear of
breaking things. The next tips will be a bit more random.&lt;/p&gt;
&lt;h2&gt;Enable colors&lt;/h2&gt;
&lt;p&gt;Your brain can parse this:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/OBOFz7A.png" width="400" class="align-center"&gt;&lt;/p&gt;
&lt;p&gt;Much easier than this:&lt;/p&gt;
&lt;p&gt;&lt;img src="http://i.imgur.com/ajXQxbA.png" width="400" class="align-center"&gt;&lt;/p&gt;
&lt;p&gt;In case your Git output isn't showing colored output, configure it to do so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global color.ui auto
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Also, if you end up needing to do this, consider upgrading Git, this has been
the default for some time, together with many other nice usability
improvements.&lt;/p&gt;
&lt;h2&gt;Preparing files to commit, the easy way&lt;/h2&gt;
&lt;p&gt;I rarely run the command &lt;code&gt;git add FILENAME&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I usually use short aliases to either &lt;code&gt;git add --update&lt;/code&gt; or &lt;code&gt;git add --all&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Add only files that were edited, ignore new ones&lt;/h3&gt;
&lt;p&gt;When you want to commit all files that you have edited,
ignoring any new files that may now be inside the repo
directory, do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -u
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is a shortcut to &lt;code&gt;git add --update&lt;/code&gt;, which is the equivalent
of doing a &lt;code&gt;git add&lt;/code&gt; on every modified file that were previously
committed.&lt;/p&gt;
&lt;p&gt;It can also take a directory, you can ask Git to add only
files that were edited inside a directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add -u tests/
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Add all files, detecting file renames and deletes&lt;/h3&gt;
&lt;p&gt;Git expects you to tell it when you rename or delete files. You can ask Git to
add all changes to be committed, including adding, deleting and renaming
files, using the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add --all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also give it a directory, so that Git only does this for the stuff under it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add --all some_dir/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I use this so often that it deserved an alias:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global alias.aa &amp;#39;add --all&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Solve conflicts only once&lt;/h2&gt;
&lt;p&gt;When you're merging or rebasing often, some conflicts keep reappearing,
specially when you're working temporarily on a branch. Instead of solving them
again manually every time, ask Git to do it automatically, by enabling
&lt;a href="https://git-scm.com/docs/git-rerere"&gt;&lt;code&gt;rerere&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git config --global rerere.enabled true
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The name &lt;code&gt;rerere&lt;/code&gt; stands for "reuse recorded resolution", and that's exactly what
it does: it will record how you solved previous conflicts and next time it finds
the same conflict it will just apply your previous fix. This way, you won't need to
keep solving the same conflicts again and again and save a few brain cycles.&lt;/p&gt;
&lt;h2&gt;Opening files in your editor&lt;/h2&gt;
&lt;p&gt;I edit code in &lt;a href="http://www.vim.org"&gt;Vim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But even if you don't, you might find useful these Bash functions and aliases
(taken from &lt;a href="https://github.com/eliasdorneles/dotfiles/blob/master/bashrc"&gt;my &lt;code&gt;~/.bashrc&lt;/code&gt; file&lt;/a&gt;)
and tweak them to your needs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;edit_modified_files(){
    $EDITOR $( (git ls-files -m -o --exclude-standard; git diff --cached --name-only --relative .) | sort | uniq)
}
edit_files_with_conflicts(){
    $EDITOR $(git diff --name-only --diff-filter=U)
}
edit_recently_committed(){
    $EDITOR $(git show --name-only --oneline | egrep -v &amp;quot;^[a-z0-9]+ &amp;quot;)
}
alias em=edit_modified_files
alias ec=edit_files_with_conflicts
alias er=edit_recently_committed
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I came up with these functions when I realized how often I wanted to do open
the editor and load one of these set of files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the ones that are currently modified, so I can wrap it up for commit&lt;/li&gt;
&lt;li&gt;the ones that have conflicts, so I can fix them&lt;/li&gt;
&lt;li&gt;the ones that were in the last commit, so I can continue working on them&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This may or may not be useful to you, depending on how you use your editor.
In my case, I open and close vim often, sometimes in different terminals,
so this has been quite handy.&lt;/p&gt;
&lt;h2&gt;Fetching code from a pull request (GitHub only)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href="https://github.com/immerrr"&gt;A friend&lt;/a&gt; has pointed out that
another option is to &lt;a href="https://gist.github.com/piscisaureus/3342247"&gt;add a configuration to have the PRs fetched
automatically&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you maintain open source projects, you may like this one.&lt;/p&gt;
&lt;p&gt;When you want to check out locally the changes introduced by
a pull request, in vanilla Git it's a bit of work (you have to add
a new remote, fetch from it and then checkout the branch). GitHub
allows you to skip adding a new remote, you can fetch the code
from a pull request into a new branch with only one command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch origin pull/$PULL_REQUEST_ID/head:BRANCH_NAME
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're like me, you'll be lazy to type (and memorize) all that too,
so here is an alias for doing that, paste it under the &lt;code&gt;[alias]&lt;/code&gt; section
in your &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s s-Atom"&gt;fetch&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="s s-Atom"&gt;pr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;!f(){\&lt;/span&gt;
&lt;span class="s2"&gt;    [ -z \&amp;quot;$1\&amp;quot; ] &amp;amp;&amp;amp; { echo Usage: git fetch-pr PULL_REQUEST_ID [new_branch_name]; exit 1; }; \&lt;/span&gt;
&lt;span class="s2"&gt;    branch=${2:-pr-$1}; \&lt;/span&gt;
&lt;span class="s2"&gt;    git fetch origin \&amp;quot;pull/$1/head:$branch\&amp;quot;; \&lt;/span&gt;
&lt;span class="s2"&gt;    }; f &amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This alias is using a shell function to parameterize it.
If you run &lt;code&gt;git fetch-pr&lt;/code&gt; it will show the help:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git fetch-pr
Usage: git fetch-pr PULL_REQUEST_ID &lt;span class="o"&gt;[&lt;/span&gt;new_branch_name&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using this, to fetch the code from pull request #1234, you can do simply:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch-pr 1234
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will create a branch called &lt;code&gt;pr-1234&lt;/code&gt; with the checked-out code.
If you want to name the branch, just provide yet another parameter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch-pr 1234 new-branch-for-pull-request-1234
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Other things that might be helpful&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;git stash&lt;/code&gt; is an useful command to know: it sets aside your current changes,
so you can work in other stuff. Use &lt;code&gt;git stash pop&lt;/code&gt; to get back the changes.
This is handy to switch to a different task, without having to copy files or
lose your current uncommitted progress.&lt;/p&gt;
&lt;p&gt;I've also found useful to know how to use diffs &amp;amp; patches, including the diff
tools &lt;code&gt;git diff&lt;/code&gt; &amp;amp; &lt;code&gt;git apply&lt;/code&gt; and also the &lt;code&gt;patch&lt;/code&gt; command-line tool. These
are helpful a few times, when you have to replay your work in another
repository.&lt;/p&gt;
&lt;p&gt;If you like to do atomic commits (i.e., making each commit introduces a small
self-contained change), you will like the &lt;code&gt;git add -p&lt;/code&gt; command. It starts an
interactive session, asking for each piece of the diff if you want to include
in the next commit or not.&lt;/p&gt;
&lt;p&gt;You will also like the &lt;code&gt;git diff --cached&lt;/code&gt; command, which shows the diff for
the stuff added to the index, i.e., the changes you're about to commit.&lt;/p&gt;
&lt;p&gt;One tool that I've been meaning to learn is &lt;a href="http://jonas.nitro.dk/tig/"&gt;tig&lt;/a&gt;,
a console interface for Git. It has some nice features, like you can do &lt;code&gt;tig
grep&lt;/code&gt; to search files and then hit &lt;code&gt;e&lt;/code&gt; on top of a search result to open the
file in your editor in that exact place. I haven't adopted this tool fully
in my workflow, though, I'm still evaluating.&lt;/p&gt;
&lt;p&gt;There is also this thing called &lt;a href="http://www.git-legit.org"&gt;Legit&lt;/a&gt;, a set of
extensions (used via aliases) created by &lt;a href="https://twitter.com/kennethreitz"&gt;Kenneth
Reitz&lt;/a&gt; (from &lt;a href="http://www.python-requests.org"&gt;Python
Requests&lt;/a&gt; and &lt;a href="http://httpbin.org/"&gt;httpbin&lt;/a&gt;
fame) which looks interesting. I have only recently started experimenting with
it, so I can't comment much. I know that Git deserves something like it. If you
use it, let me know how you like it.&lt;/p&gt;
&lt;p&gt;Finally, you may also like this &lt;a href="http://stackoverflow.com/questions/315911/git-for-beginners-the-definitive-practical-guide"&gt;StackOverflow thread with Git questions and
answers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That's all I had for now, folks!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 19 Jun 2016 00:29:00 -0300</pubDate><guid isPermaLink="false">tag:,2016-06-19:2016/06/19/on-getting-productive-with-git.html</guid></item><item><title>You're not alone</title><link>/2016/04/19/youre-not-alone.html</link><description>&lt;blockquote&gt;
&lt;p&gt;I've shared this text almost as-is internally at @Scrapinghub, the company I work at. As it had a good response, I'm sharing it here after some minor editing. I wrote it mainly to my programmer friends, but many people will probably relate to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here are some things that I want to share with you:&lt;/p&gt;
&lt;p&gt;If you’ve ever felt that you’re a mediocre developer at best, even though you show up and do your best everyday, you’re not alone.&lt;/p&gt;
&lt;p&gt;If you’ve ever felt bad about not being nearly as productive as you’d want to, you’re not alone.&lt;/p&gt;


&lt;p&gt;If you’ve ever thought that you will probably be fired eventually because you’re not as smart and accomplished as your peers and “someday they’ll figure that out”, you’re not alone.&lt;/p&gt;
&lt;p&gt;If you’ve ever refrained from introducing an idea out of fear of being ridiculed or laughed at, you’re not alone.&lt;/p&gt;
&lt;p&gt;If the thought ever crossed your mind that you’re a fraud waiting to be uncovered, that everyone is smarter and better and faster and more knowledgeable than you, I want to tell you that you’re not alone.&lt;/p&gt;
&lt;p&gt;Most of us go through that at least at some point, sometimes every day. And the thing is, there &lt;em&gt;are&lt;/em&gt; ways for us to overcome these feelings that, even if we don’t completely eliminate them, it help us to grow both personally and professionally.
&lt;/p&gt;
&lt;p&gt;I want to talk about these issues, because I believe this conversation is important for building our culture and we all can benefit from it.&lt;/p&gt;
&lt;h1&gt;Scarcity culture&lt;/h1&gt;
&lt;p&gt;There is this book titled &lt;a href="https://www.google.com/url?q=http://www.amazon.com/Daring-Greatly-Courage-Vulnerable-Transforms/dp/1592408419&amp;amp;sa=D&amp;amp;ust=1461109063197000&amp;amp;usg=AFQjCNGWdVvqGri43-QqOO-J44LKSI3MMw"&gt;Daring Greatly&lt;/a&gt; which talks about the culture of scarcity that we’re living in, what’s dangerous about it and how we can deal with it.&lt;/p&gt;
&lt;p&gt;Scarcity is this strong sense of lacking something, of never being good/smart/healthy/safe/successful/etc enough.&lt;/p&gt;
&lt;p&gt;Quoting the book:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Scarcity is the "never enough" problem. The word scarce is from the Old Norman French scars, meaning "restricted in quantity" (c. 1300). Scarcity thrives in a culture where everyone is hyperaware of lack. Everything from safety and love to money and resources feels restricted and lacking. We spend inordinate amounts of time calculating how much we have, want, and don't have, and how much everyone else has, needs, and wants.&lt;/p&gt;
&lt;p&gt;What makes the constant assessing and comparing so self-defeating is that we are often comparing our lives, our marriages, our families, and our communities to unattainable, media-driven visions of perfection, or we're holding up our reality against our own fictional account of how great someone else has it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Never before we were so aware of how much we lack and how inadequate we are. If you’re like me, you will not have trouble relating to this. We have things like the Github timeline making us feel bad about not contributing much to open source, we obsess about StackOverflow points and similar rank systems, and when comparing to our more accomplished peers it’s easy to think that we are so little and don’t have anything to contribute.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.google.com/url?q=http://brenebrown.com&amp;amp;sa=D&amp;amp;ust=1461109063200000&amp;amp;usg=AFQjCNEoKz2tS_IqFhSfG8vt0qFwUUvpzQ"&gt;Brené Brown, the researcher who wrote the book&lt;/a&gt; tells us that the formula of the scarcity culture is made of three components: shame, comparison and disengagement. This same dynamic can show up not only in the larger culture, but also in family, work or any other community.&lt;/p&gt;
&lt;p&gt;She offers the following questionnaire as a starting point to start reflecting on these three components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Shame:&lt;/strong&gt; Is fear of ridicule and belittling used to manage people and/or to keep people in line? Is self-worth tied to achievement, productivity, or compliance? Are blaming and finger-pointing norms? Are put-downs and name-calling rampant? What about favoritism? Is perfectionism an issue?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comparison:&lt;/strong&gt; Healthy competition can be beneficial, but is there constant overt or covert comparing and ranking? Has creativity been suffocated? Are people held to one narrow standard rather than acknowledged for their unique gifts and contributions? Is there an        ideal way of being or one form of talent that is used as measurement of everyone else’s worth?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disengagement:&lt;/strong&gt; Are people afraid to take risks or try new things? Is it easier to stay quiet than to share stories, experiences, and ideas? Does it feel as if no one is really paying attention or listening? Is everyone struggling to be seen and heard?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looking at the larger culture, my answer to most of these questions is &lt;em&gt;yes&lt;/em&gt;. Watching the news and the social network feeds (specially at the moment of political turmoil we’re living here in Brazil), it’s &lt;em&gt;oh gosh, yes&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Now, if that’s the situation of the larger culture, what if we want to build an organizational culture (in our family, in our work) that goes the opposite way to these cultural norms of scarcity? There will always be pressure from the larger culture, so how would that work?&lt;/p&gt;
&lt;p&gt;Well, first of all we need awareness. Then it’s a matter of commitment and hard work, every day.&lt;/p&gt;
&lt;p&gt;Quoting the book again:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The counterapproach to living in scarcity is not about abundance. In fact, I think abundance and scarcity are two sides of the same coin. The opposite of “never enough” isn’t abundance or “more than you could ever imagine.” The opposite of scarcity is enough, or what I call Wholeheartedness. As I explained in the Introduction, there are many tenets of Wholeheartedness, but at its very core is vulnerability and worthiness: facing uncertainty, exposure, and emotional risks, and knowing that I am enough.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, if we want to be vulnerable and cultivate worthiness, we really want the opposite of the conditions from those questions from before. This is the problem of a scarcity culture. It prevents us from taking risks, from facing uncertainty, from putting ourselves out there, from feeling that we belong.&lt;/p&gt;
&lt;p&gt;When we ask a question, and when we try to answer a question, when we send out our work for review, review the work of someone else or when we get our own work reviewed, when we publish a post, give an opinion -- all these involve the exact kind of exposure and emotional risk we’re talking about here. And when we don’t feel we’re enough, we disengage because it feels too risky.&lt;/p&gt;
&lt;h1&gt;Understanding shame&lt;/h1&gt;
&lt;p&gt;Some things to know about shame:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We all have it&lt;/li&gt;
&lt;li&gt;We’re all afraid of talking about it&lt;/li&gt;
&lt;li&gt;The less we talk about it, the more it can control us&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Quoting the book:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There are a couple of very helpful ways to think about shame. First, shame is the fear of disconnection. We are psychologically, emotionally, cognitively, and spiritually hardwired for connection, love, and belonging. Connection, along with love and belonging (two expressions of connection), is why we are here, and it is what gives purpose and meaning to our lives. Shame is the fear of disconnection—it’s the fear that something we’ve done or failed to do, an ideal that we’ve not lived up to, or a goal that we’ve not accomplished makes us unworthy of connection. I’m not worthy or good enough for love, belonging, or connection. I’m unlovable. I don’t belong.&lt;/p&gt;
&lt;p&gt;Shame is the intensely painful feeling or experience of believing that we are flawed and therefore unworthy of love and belonging.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And by the way, as far as the brain is concerned, &lt;a href="https://www.google.com/url?q=http://www.pnas.org/content/108/15/6270.abstract&amp;amp;sa=D&amp;amp;ust=1461109063207000&amp;amp;usg=AFQjCNGPtqOUa81AwdWXDVwPHFe3YlFBzA"&gt;shame and pain hurt the same way&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Shame is real pain. The importance of social acceptance and connection is reinforced by our brain chemistry, and the pain that results from social rejection and disconnection is real pain.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It’s also important to distinguish shame from guilt, which can be understood as the difference between “I am bad” and “I did something bad”.&lt;/p&gt;
&lt;p&gt;Guilt is more like: “I did something bad”. Guilt is not bad, because it’s something you understand that you did and you can change that. And if you feel guilty you will feel impelled to change. Guilt is what’s happening when we apologize for real and try to make amends. This is the kind of feeling that, if you’re a parent, you want your child to feel when doing something bad, so that they can change their behavior.&lt;/p&gt;
&lt;p&gt;Shame is more like: “I am bad” or “I am not good”, and that’s much more dangerous. Shame is such a deep fear that when we feel it, our instinct is not to try to make amends -- unlike the positive outcome of guilt, shame’s influence is always destructive. If we do something bad, and instead of feeling guilt (e.g., thinking: “oops, I did something stupid”) we feel shame (thinking: “I’m such a stupid loser”), the instinct is to protect ourselves by blaming something or someone, rationalize our mistake, give a fake apology or simply hide.&lt;/p&gt;
&lt;p&gt;There is no positive outcome for shame (at least not for unacknowledged shame). Brené Brown &lt;a href="https://www.google.com/url?q=http://www.huffingtonpost.com/2013/04/18/brene-brown-shame-guilt-addiction-oprah_n_2966351.html&amp;amp;sa=D&amp;amp;ust=1461109063209000&amp;amp;usg=AFQjCNGSGSnxy5h8JxbuiAwEAnLGxVm70Q"&gt;reports&lt;/a&gt; that researchers have correlated shame with &lt;a href="https://www.google.com/url?q=http://www.psychologicalscience.org/index.php/news/releases/shame-about-past-alcoholism-predicts-relapse-and-declining-health-in-recovering-alcoholics.html&amp;amp;sa=D&amp;amp;ust=1461109063210000&amp;amp;usg=AFQjCNFrZwI2GDZ-4d7Th1QS02RPYmOQqg"&gt;addiction&lt;/a&gt;, &lt;a href="https://www.google.com/url?q=http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3763505/&amp;amp;sa=D&amp;amp;ust=1461109063210000&amp;amp;usg=AFQjCNFP3ktOBWAVujTuGddB1P-X0Pk96g"&gt;violence&lt;/a&gt;, aggression, depression, eating disorders and bullying -- while guilt is inversely correlated to those. (the book has many pointers for this, but sadly most are books and academic papers not freely available -- I’m sharing some links at the end).&lt;/p&gt;
&lt;p&gt;The good news, though, is that if we just start talking about shame, it diminishes. Just by being aware of it, and discussing it, we suddenly have more control of it. Such is the power of language.&lt;/p&gt;
&lt;h2&gt;Building shame-resilience&lt;/h2&gt;
&lt;p&gt;We can’t not have shame -- it’s just part of being human.&lt;/p&gt;
&lt;p&gt;But we &lt;em&gt;can&lt;/em&gt; learn to be shame-resilient.&lt;/p&gt;
&lt;p&gt;Brown calls shame-resilience “the ability to practice authenticity when we experience shame, to move through the experience without sacrificing our values, and to come out on the other side of the shame experience with more courage, compassion, and connection than we had going into it. Shame resilience is about moving from shame to empathy—the real antidote to shame”.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If we can share our story with someone who responds with empathy and understanding, shame can’t survive. Self-compassion is also critically important, but because shame is a social concept—it happens between people—it also heals best between people. A social wound needs a social balm, and empathy is that balm. Self-compassion is key because when we’re able to be gentle with ourselves in the midst of shame, we’re more likely to reach out, connect, and experience empathy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In short, empathy and self-compassion are the key values here.&lt;/p&gt;
&lt;p&gt;This really hits home for me, because I’ve noticed that when I’m anxious, feeling inadequate and listening to the voice in my head that tells me I’m a fraud, I will avoid having a needed honest conversation, I tend to be impatient towards others’ mistakes and reject others’ ideas without giving thought on why they’re even thinking that.&lt;/p&gt;
&lt;p&gt;And when my self-talk is more of acceptance, like “hey, this is difficult for everyone, give yourself a break, remember that nobody is born smart”, I am more willing to face a problem I’m having, discuss new ideas and help someone with a problem of their own.&lt;/p&gt;
&lt;h1&gt;Vulnerability and minding the gap&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://www.google.com/url?q=http://www.amazon.com/Daring-Greatly-Courage-Vulnerable-Transforms/dp/1592408419&amp;amp;sa=D&amp;amp;ust=1461109063213000&amp;amp;usg=AFQjCNG46ij2IkSdMjoXsxlVzjJR59ZOiQ"&gt;The book&lt;/a&gt; has a lot more to offer, there is a great chapter about the “armory” that talks about the defenses that we set up in order to not be vulnerable, how they get in the way and how we can deal with them.&lt;/p&gt;
&lt;p&gt;On the subject of disengagement, the book tells us to be aware of the gap between where we want to be and where we’re actually standing. We don’t need to be perfect, but we do need to be engaged and committed to our values and keep trying to close this gap between what we aspire and what we practice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The gap starts here: &lt;strong&gt;We can’t give people what we don’t have. Who we are matters immeasurably more than what we know or who we want to be.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The space between our practiced values (what we’re actually doing, thinking, and feeling) and our aspirational values (what we want to do, think, and feel) is the value gap, or what I call “the disengagement divide.” It’s where we lose our employees, our clients, our students, our teachers, our congregations, and even our own children. We can take big steps—we can even make a running jump to cross the widening value fissures that we face at home, work, and school—but at some point, when that divide broadens to a certain critical degree, we’re goners. That’s why dehumanizing cultures foster the highest levels of disengagement—they create value gaps that actual humans can’t hope to successfully navigate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Minding the gap is embracing our own imperfection and vulnerability, and practicing the values we hold important in our culture. This requires shame resilience, because we will sometimes find too big of a gap, and we’ll have to remind ourselves of our values and that showing up and putting ourselves out there already counts.&lt;/p&gt;
&lt;p&gt;For me, personally, minding the gap means different things in different contexts. At work, it means to accept that there will be always be more things I want to do than what I’m actually able to work on. For an organization, minding the gap may be understanding that you want to be a great success and cultivate great values, but sometimes you fail to practice those values and success seems a bit distant. When we mind the gap, acknowledging the distance of where we are and where we want to be, then we’re more willing to help closing it.&lt;/p&gt;
&lt;p&gt;The book has a chapter dedicated to disruptive engagement: how we can start daring to have difficult conversations in our organizations, cultivate an honest and constructive feedback culture, and learn to get more comfortable being uncomfortable. And it starts with understanding how scarcity affects us, combat shame by talking about it and normalizing (i.e. sharing how it’s normal to struggle and feel inadequate at times), ultimately rehumanizing the way we lead and work.&lt;/p&gt;
&lt;p&gt;An important point is that: “you can’t give what you don’t have”. Who we are matters more than what we know or want to be. This is why it’s important for leaders to embrace shame-resiliency and vulnerability: if we want people to take risks, we have to be willing to engage with vulnerability, take risks and cultivate trust. When we’re &lt;a href="https://www.google.com/url?q=http://www.inc.com/shelley-prevost/8-signs-youre-a-control-freak.html&amp;amp;sa=D&amp;amp;ust=1461109063217000&amp;amp;usg=AFQjCNEZ-FljkFz8ZpaoZt1vzFjvzPlGcw"&gt;too controlling&lt;/a&gt;, we end up losing impact. When we think of ourselves as not good enough, we tend to spread that feeling unto others who are looking up to us. We become stagnant.&lt;/p&gt;
&lt;p&gt;The chapter ends with &lt;a href="https://www.google.com/url?q=http://brenebrown.com/wp-content/uploads/2013/09/DaringGreatly-LeadershipManifesto-8x10.pdf&amp;amp;sa=D&amp;amp;ust=1461109063218000&amp;amp;usg=AFQjCNFScFKnhs6bRIaVUmOFf30iRmYjBA"&gt;the leadership manifesto, which is pretty awesome&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Final thoughts&lt;/h1&gt;
&lt;p&gt;So, my hope is that this will help raising awareness about these issues and perhaps we can all start talking about them and diminish the power of our gremlins. I believe it is important to be mindful of the scarcity culture and do our best to prevent shame and disengagement.&lt;/p&gt;
&lt;p&gt;You may not be doing bad, but it’s probably good to be mindful of these things, how they affect us and our interactions and how we can find our way to fight shame and its negative outcomes.&lt;/p&gt;
&lt;p&gt;Because if we give in to this scarcity culture, we lose innovation, we don’t show up, we play blaming and cover-ups to discharge our pain and discomfort, we don’t give feedback, we stop contributing and we stop caring. And we don’t want that. We want the opposite.&lt;/p&gt;
&lt;p&gt;We all want to be brave and dare greatly.&lt;/p&gt;
&lt;h1&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Daring Greatly in GoodReads: &lt;a href="https://www.google.com/url?q=https://www.goodreads.com/book/show/13588356-daring-greatly&amp;amp;sa=D&amp;amp;ust=1461109063221000&amp;amp;usg=AFQjCNHhiCeri_YpIM_Us9Q9_vY957vAug"&gt;https://www.goodreads.com/book/show/13588356-daring-greatly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TED talks from the author which I was too lazy to watch: &lt;a href="https://www.google.com/url?q=http://www.ted.com/talks/brene_brown_on_vulnerability&amp;amp;sa=D&amp;amp;ust=1461109063222000&amp;amp;usg=AFQjCNHhn6CERdbN2l1rpBxJytFXBYOJ3g"&gt;http://www.ted.com/talks/brene_brown_on_vulnerability&lt;/a&gt; and &lt;a href="https://www.google.com/url?q=http://www.ted.com/talks/brene_brown_listening_to_shame&amp;amp;sa=D&amp;amp;ust=1461109063222000&amp;amp;usg=AFQjCNHpCMdwzoi7U13MlBIS97DWbWltIw"&gt;http://www.ted.com/talks/brene_brown_listening_to_shame&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Article in The Guardian: &lt;a href="https://www.google.com/url?q=http://www.theguardian.com/lifeandstyle/2013/jul/27/brene-brown-people-sick-being-afraid&amp;amp;sa=D&amp;amp;ust=1461109063223000&amp;amp;usg=AFQjCNFDhLNncGDtAe5Ftf1oJ5giyWMvpg"&gt;http://www.theguardian.com/lifeandstyle/2013/jul/27/brene-brown-people-sick-being-afraid&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Man in the Arena -- speech from Theodore’s Roosevelt that gave the book’s title: &lt;a href="https://www.google.com/url?q=https://www.goodreads.com/quotes/7-it-is-not-the-critic-who-counts-not-the-man&amp;amp;sa=D&amp;amp;ust=1461109063224000&amp;amp;usg=AFQjCNGPq_jxO0Ak0DkPmsk640yOOEl1QA"&gt;https://www.goodreads.com/quotes/7-it-is-not-the-critic-who-counts-not-the-man&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;About correlations between shame and the negative outcomes mentioned, I’ve &lt;a href="https://www.google.com/url?q=http://citeseerx.ist.psu.edu/viewdoc/download?doi%3D10.1.1.413.8535%26rep%3Drep1%26type%3Dpdf&amp;amp;sa=D&amp;amp;ust=1461109063225000&amp;amp;usg=AFQjCNEgr-waNkW17mxrnb96KAd84F91qQ"&gt;found&lt;/a&gt; &lt;a href="https://www.google.com/url?q=http://www.psychologicalscience.org/index.php/news/releases/shame-about-past-alcoholism-predicts-relapse-and-declining-health-in-recovering-alcoholics.html&amp;amp;sa=D&amp;amp;ust=1461109063225000&amp;amp;usg=AFQjCNGSTJvNIMweoYjQq8hnkeqVp-zSmQ"&gt;some&lt;/a&gt; &lt;a href="https://www.google.com/url?q=http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3763505/&amp;amp;sa=D&amp;amp;ust=1461109063226000&amp;amp;usg=AFQjCNFu53GvZC5OqsIEivtoFjPMuvJ2hw"&gt;articles&lt;/a&gt; &lt;a href="https://www.google.com/url?q=http://www.soc.ucsb.edu/faculty/scheff/main.php?id%3D2.html&amp;amp;sa=D&amp;amp;ust=1461109063226000&amp;amp;usg=AFQjCNHKybOeX3oxNnXTsPu4VTn9pnbTdA"&gt;online&lt;/a&gt; -- here are some books referred to in Daring Greatly:&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?q=http://www.amazon.com/Shame-Therapy-Hour-Ronda-Dearing/dp/1433809672&amp;amp;sa=D&amp;amp;ust=1461109063227000&amp;amp;usg=AFQjCNHF1lH_u9Jj2s5iA8u79oy0ZWjurQ"&gt;Shame in the Therapy Hour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?q=http://www.amazon.com/Shame-Guilt-Neurosis-Helen-Block/dp/0823626075&amp;amp;sa=D&amp;amp;ust=1461109063228000&amp;amp;usg=AFQjCNHGfXxDQTVoUfMQqDg90bEZcP8_5w"&gt;Shame and Guilt in Neurosis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.google.com/url?q=http://www.amazon.com/Shame-Guilt-Emotions-Social-Behavior/dp/1572309873&amp;amp;sa=D&amp;amp;ust=1461109063228000&amp;amp;usg=AFQjCNGBNaOjN89cinNuemBx7saMiXly2g"&gt;Shame and Guilt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Tue, 19 Apr 2016 19:19:00 -0300</pubDate><guid isPermaLink="false">tag:,2016-04-19:2016/04/19/youre-not-alone.html</guid></item><item><title>Trying out something new</title><link>/2016/01/26/trying-out-something-new.html</link><description>

&lt;p&gt;&lt;img alt="" src="http://i.imgur.com/KZo7ObI.png" /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://imgur.com/vjWgCAK.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://imgur.com/QPGcgDE.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://imgur.com/whDBm4O.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://imgur.com/Bq54jBg.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://imgur.com/45YdMZI.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://imgur.com/zBog5ta.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://imgur.com/fgU8Y57.png" /&gt;&lt;/p&gt;
&lt;p&gt;If you liked these drawings, you may like &lt;a href="https://www.youtube.com/watch?v=7TXEZ4tP06c&amp;amp;feature=youtu.be"&gt;this video teaching you to draw in a
few minutes&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Tue, 26 Jan 2016 22:54:00 -0200</pubDate><guid isPermaLink="false">tag:,2016-01-26:2016/01/26/trying-out-something-new.html</guid></item><item><title>Learning from DAS screencasts - season 3</title><link>/2015/12/30/learning-from-das-screencasts-season-3.html</link><description>&lt;p&gt;Here is a summary of my learning from watching &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog"&gt;season 3 of Destroy All
Software screencasts&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Which kind of code should go into Models?&lt;/h2&gt;
&lt;p&gt;Gary is fond of an architecture style for web applications,
which is &lt;a href="http://rhodesmill.org/brandon/slides/2014-07-pyohio/clean-architecture/"&gt;equivalent to the so-called clean architecture&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="http://rhodesmill.org/brandon/slides/2013-05-djangoconeu/clean-architecture.jpg" alt="The Clean Architecture diagram" width="500" /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Following this architecture, the code inside model classes (in Rails, this
would be Active Record classes) should be either:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;validations/relationships&lt;/li&gt;
&lt;li&gt;mutation (set &amp;amp; save)&lt;/li&gt;
&lt;li&gt;wrapper (meaningful getter)&lt;/li&gt;
&lt;li&gt;queries (where/order/etc &amp;lt;- best to always be only there)&lt;/li&gt;
&lt;li&gt;creation (create and save)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that’s it.&lt;/p&gt;
&lt;p&gt;Things with more application logic (aka business rules) should go into their
own libraries, decoupled from the framework or ORM. This leaves the models with
no extra dependencies apart from the ORM, and make the code implementing the
application logic easier to test and modify.&lt;/p&gt;
&lt;p&gt;I like this idea very much, but it seems often quite hard to put it in practice,
because most web frameworks encourage coupling with its APIs. I'm yet to see
a framework that really encourages this kind of separation of concerns.
Even the so-called micro-frameworks often fall in this trap.&lt;/p&gt;
&lt;p&gt;My feeling is that you need extra discipline to use this architecture.  I think
there is a complexity threshold for deciding when the effort will pay off.&lt;/p&gt;
&lt;h2&gt;Outside-in TDD&lt;/h2&gt;
&lt;p&gt;I already mentioned &lt;a href="http://coding-is-like-cooking.info/2013/04/outside-in-development-with-double-loop-tdd/"&gt;outside-in
TDD&lt;/a&gt;
in &lt;a href="{filename}site/blog/learning-from-das-screencasts-season-2.md"&gt;the summary for the second
season&lt;/a&gt;, when
Gary talked about
&lt;a href="https://joneaves.wordpress.com/2004/02/18/spike_to_learn_tdd_to_build/"&gt;spiking&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here he shows two approaches to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;stubbing dependencies: here you program by wishful thinking, and design the
   dependencies by stubbing them out (i.e. using mocks to define the interaction
   with the code not yet implemented).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;stash (using Git): implement a feature, but instead of stubbing a wished
   feature, stash the current code (i.e. set apart the current code via
   &lt;a href="http://www.gitguys.com/topics/temporarily-stashing-your-work/"&gt;git stash&lt;/a&gt;),
   test and implement the wished feature TDD-style, commit it, unstash the
   previous code (git stash pop), finish implementing test with the newly
   developped code and then commit it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both approaches are valid and result in equivalent granularities, but the order
of commits will be different (with stubbing, the order will be more like
top-down) and tests with the stub approach tend to be more isolated.&lt;/p&gt;
&lt;h2&gt;Testing code that calls HTTP APIs&lt;/h2&gt;
&lt;p&gt;Here is a cool idea: consider external HTTP APIs like “databases”, and test
your wrapper code mocking the HTTP interactions with a tool to replay
interactions like you would test with a fake database.&lt;/p&gt;
&lt;p&gt;There is a neat tool for doing this called &lt;a href="https://github.com/vcr/vcr"&gt;vcr&lt;/a&gt;
which is written in Ruby, there is a Python port called
&lt;a href="https://pypi.python.org/pypi/vcrpy"&gt;vcrpy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What this VCR tool does is: it records HTTP requests into a "cassette" (an
&lt;a href="https://en.wikipedia.org/wiki/YAML"&gt;YAML file&lt;/a&gt;) to replay the requests later
from it when running the tests and then checks if the requests match the
expected ones from the cassete file.&lt;/p&gt;
&lt;p&gt;This makes the tests verify at the boundary of your app with the external HTTP
API, which is arguably more reliable than verifying interactions with proxy
objects (see &lt;a href="https://www.destroyallsoftware.com/talks/boundaries"&gt;this talk for about this idea of
boundaries&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Here is the introduction for &lt;code&gt;vcrpy&lt;/code&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VCR.py simplifies and speeds up tests that make HTTP requests. The first time
you run code that is inside a VCR.py context manager or decorated function,
VCR.py records all HTTP interactions that take place through the libraries it
supports and serializes and writes them to a flat file (in yaml format by
default). This flat file is called a cassette. When the relevant piece of
code is executed again, VCR.py will read the serialized requests and
responses from the aforementioned cassette file, and intercept any HTTP
requests that it recognizes from the original test run and return the
responses that corresponded to those requests.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I've recently started using &lt;code&gt;vcrpy&lt;/code&gt;, and I like the approach.
However, I'm not sure about &lt;/p&gt;
&lt;p&gt;One possible drawback of this approach is that the library must support the
HTTP library you're using, to be able to intercept the requests -- VCR.py
currently lacks support for Twisted Web Client.&lt;/p&gt;
&lt;h2&gt;Dealing with untested Code&lt;/h2&gt;
&lt;p&gt;In a series of episodes, Gary demonstrates how to tackle an untested method,
adding tests and then refactoring it, keeping the test suite updated.&lt;/p&gt;
&lt;p&gt;In this case, you can’t isolate upfront. Sometimes you can start with "smoke
tests" (e.g. simple output test of a happy path).&lt;/p&gt;
&lt;p&gt;Gary’s example is a Rails controller method, he starts by writing RSpec
contexts (just the names/descriptions of the tests), one for every code path
(namely, two for every conditional), then sort them from the happiest path to the "saddest" path.&lt;/p&gt;
&lt;p&gt;Having that, then he starts writing tests in that order, always checking the
tests fail for every context when appropriate -- this way ensuring that the
test is verifying the right thing.&lt;/p&gt;
&lt;p&gt;I found this quite useful, since I often find myself having to deal with
untested code -- often it's my own (lazy programmer detected!).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Aside about testing tools for Python&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;These videos got me envious of Ruby programmers because of
&lt;a href="http://rspec.info/"&gt;RSpec&lt;/a&gt;, it’s a really powerful tool. I couldn't find any
good equivalent for Python yet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you just want a nice output you may try out
  &lt;a href="https://github.com/bitprophet/spec"&gt;spec&lt;/a&gt; (or &lt;a href="https://pypi.python.org/pypi/pinocchio/"&gt;pinochio&lt;/a&gt;),
  that work with &lt;a href="http://nose.readthedocs.org"&gt;nosetests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.python.org/pypi/pytest-describe"&gt;pytest-describe&lt;/a&gt; almost cuts
  it, but it only supports one level of nesting and its reporting is quite ugly
  due to limitations of the implementation.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/nestorsalceda/mamba"&gt;mamba&lt;/a&gt; looks promising -- I like the
  API, but it's currently lacking documentation.&lt;/li&gt;
&lt;li&gt;I've recently found out about &lt;a href="http://heynemann.github.io/pyvows/"&gt;pyvows&lt;/a&gt;
  which looks really cool. I really like the API, but I'm not sold on requiring
  &lt;a href="http://www.gevent.org"&gt;gevent&lt;/a&gt; for my test suite.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I even toyed around with &lt;a href="https://gist.github.com/eliasdorneles/a9d5e7ff9a0c00f5bf29"&gt;a class decorator allowing for a similar API but relying
only on unittest&lt;/a&gt;
which seems to work well with nose and pytest, but I don't know if it's worth
the hassle (let me know if you think this is useful).&lt;/p&gt;
&lt;p&gt;Python doesn't make it easy to build this kind of tool, I'm really envious. =)&lt;/p&gt;
&lt;h2&gt;Emacs, chainsaw of chainsaws&lt;/h2&gt;
&lt;p&gt;Emacs is written in Elisp, and can be extended with Elisp -- this offers a
great level of customization. Also, Emacs environment knows about itself: for
example, the help system is dynamic and can even show your own custom shortcut
for a function.
Vim doesn’t have anything like that, help system are static text files.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can build vim inside Emacs, but you could never build Emacs inside vim.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;However, a fresh Emacs installation (without customization) is less usable than
a fresh Vim installation.&lt;/p&gt;
&lt;h2&gt;Better structure for Bash scripts by using many small functions.&lt;/h2&gt;
&lt;p&gt;This:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;userinfo() {
    grep &amp;quot;^$1:&amp;quot; /etc/passwd
}

extract_uid(){
    cut -d: -f3
}

extract_home(){
    cut -d: -f6
}

echo User ID: $(userinfo $1 | extract_uid)
echo Home: $(userinfo $1 | extract_home)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;is better than this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo User ID: $(grep &amp;quot;^$1:&amp;quot; /etc/passwd | cut -d: -f3)
echo Home: $(grep &amp;quot;^$1:&amp;quot; /etc/passwd | cut -d: -f6)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Last one is shorter, but the former is easier to read and more composable.&lt;/p&gt;
&lt;h2&gt;TDD: when to generalize&lt;/h2&gt;
&lt;p&gt;Deciding when to generalize in TDD can be difficult, depending on your code and
process.&lt;/p&gt;
&lt;p&gt;In case you start your tests with the happy path (as opposed to starting with edge cases),
here are some situations to help you decide when it's time to generalize instead of sliming
(hardcoding values or writing fake implementation just for the current test to pass).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If there is a pending test (not yet implemented) that will force
  generalization, use that: implement the test and then generalize.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If sliming  is harder than generalize, just generalize already.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the implementation is obvious and easy (e.g., it's just calling code
  that's already tested and trusted), generalize, then consider the edge
  cases and write tests for them.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that this is illustrative, but not comprehensive -- there are probably.&lt;/p&gt;
&lt;h2&gt;TDD: bad expectations&lt;/h2&gt;
&lt;p&gt;Here are some notes about bad expectations/assertions in the test code, which
are bad because they mine our confidence in the test suite.&lt;/p&gt;
&lt;p&gt;Negative expectations (e.g., asserting that some function was NOT called, or
that some expression isn't true) are dangerous because it's easy to miss
a case where result can be incorrect and the assertion still pass.&lt;/p&gt;
&lt;p&gt;The same is true for partial matches (checking containment or substring) like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;connected&amp;#39; in status  # what if status is &amp;quot;disconnected&amp;quot;?
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tests that obsess about implementation (like, a test checking the internal state
of the component being tested) are also bad. This kind of test pours concrete
over the code, making changes harder.&lt;/p&gt;
&lt;p&gt;Finally, it’s best to write tests against the broad interface of a class,
instead of tests for helper methods in it. In the end, the broad interface is
what really matters, and the helper methods have higher probability to be
changed later, best not to pour concrete around them either.&lt;/p&gt;
&lt;p&gt;That's it for season 3 -- thanks for reading! :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Wed, 30 Dec 2015 12:36:00 -0200</pubDate><guid isPermaLink="false">tag:,2015-12-30:2015/12/30/learning-from-das-screencasts-season-3.html</guid><category>das-screencasts</category></item><item><title>Regex metacharacters differences across several environments</title><link>/2015/12/13/regex-metacharacters-differences-across-several-environments.html</link><description>

&lt;p&gt;Here is a table helpful for learning regular expression metacharacters
differences across several languages and environments.
&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="right"&gt;Language/environment&lt;/th&gt;
&lt;th&gt;Optional&lt;/th&gt;
&lt;th&gt;More&lt;/th&gt;
&lt;th&gt;Brackets&lt;/th&gt;
&lt;th&gt;Border&lt;/th&gt;
&lt;th&gt;Or&lt;/th&gt;
&lt;th&gt;Group&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="right"&gt;Apache, Bash, egrep, Java, JS, Perl, PHP, Python, Ruby, VBScript, .NET&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;Gawk, Openffice.org&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&amp;lt;,\&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;awk, Mawk, Expect&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;C, Lex, Tcl&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;Find, Emacs&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\(\)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;grep, ed&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\{,\}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\(\)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;sed&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\{,\}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&amp;lt;,\&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\(\)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;Vim&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\{,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&amp;lt;,\&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\(\)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;PostgreSQL&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;\y&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;MySQL&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;[[:&amp;lt;:]]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="right"&gt;Oracle&lt;/td&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;{,}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;#124;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Thankfully, &lt;code&gt;.&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;[]&lt;/code&gt; &lt;code&gt;[^]&lt;/code&gt; &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; work the same way in all.&lt;/p&gt;
&lt;p&gt;The hard work of checking the differences was done by &lt;a href="http://aurelio.net/"&gt;Aurelio
Jargas&lt;/a&gt;, published in &lt;a href="http://www.piazinho.com.br/"&gt;his wonderful book about regular
expressions&lt;/a&gt;. (Portuguese only)&lt;/p&gt;
&lt;p&gt;I merely grouped them by language/environment, chunking the information for
easier memorizing.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 13 Dec 2015 02:16:00 -0200</pubDate><guid isPermaLink="false">tag:,2015-12-13:2015/12/13/regex-metacharacters-differences-across-several-environments.html</guid></item><item><title>The power of a good template</title><link>/2015/10/18/the-power-of-a-good-template.html</link><description>&lt;p&gt;Almost ten years ago, I was an intern helping to maintain a PHP application and
attempting to write a little framework to create the new version of that
application. My little framework generated PHP classes from some templates and
a description you’d write in a DSL language I came up with.&lt;/p&gt;
&lt;p&gt;It was a nice feeling to come up with a little model and quickly generate a
bunch of classes, but it was also pretty stupid: the generated classes would
get edited, and later the templates would change too, and suddenly all the
generated classes needed manual update.&lt;/p&gt;
&lt;p&gt;So I learned back then the following lesson: generating code that needs to be
edited later is a bad idea -- instead of doing that, I must create libraries
and components that allow to be combined and build on top of them. I never
wanted to use boilerplate code generation again. I started thinking that any
solution that required boilerplate were too bloated. I also dismissed the
utility of code snippets too, because I wanted a function, not boilerplate
code.&lt;/p&gt;
&lt;p&gt;Great, except this is the wrong conclusion.&lt;/p&gt;
&lt;p&gt;It’s true that solutions which don’t require generated code are generally
better for reusability and long term maintenance (e.g. Python properties vs
Java getters), but good templates for boilerplate code generation can be of
great utility sometimes. Good templates are nice not only because they help you
get started in something quickly, they can also teach you the proper way of
doing things and get you started learning more about something.&lt;/p&gt;
&lt;p&gt;I started to realize the power of code snippets a couple of years ago, when I
noticed that I was being lazy to write argument parsing code properly for my
Python scripts. I knew the script would be much better parsing arguments with
argparse, but as I wasn’t sure if the script would be useful when I started
writing it, I would be lazy and write something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;

&lt;span class="n"&gt;inputfile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Please provide an input file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputfile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And this is just awful, for a variety of reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it doesn't have a nice help, so people would often need to read the code to
   understand what it does&lt;/li&gt;
&lt;li&gt;the code isn’t obvious, one has to keep in mind details about sys.argv&lt;/li&gt;
&lt;li&gt;it is hard to change when you have more arguments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After thinking about this laziness, I decided this was a good use case for a
code snippet, so I grabbed a vim plugin for code snippets and came up with the
following snippet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c1"&gt;# -*- coding: utf-8 -*-&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Script description here&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;print_function&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;pass&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;argparse&lt;/span&gt;
    &lt;span class="n"&gt;parser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;argparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ArgumentParser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="vm"&gt;__doc__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_args&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, as you can see, there is not that much going on here, just simple
boilerplate stuff: a docstring, a shebang, a docstring, and an argparse
initialization inside the if main block.&lt;/p&gt;
&lt;p&gt;However, now every time I started a script, even if I &lt;em&gt;really&lt;/em&gt; wanted to be
lazy, I could just add to the if main block:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;parser.add_argument(&amp;#39;my_argument_name&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then, I could code my script inside the &lt;code&gt;run()&lt;/code&gt; function, ending up with a neat
code with help for free. Plus, it was easy to change, I could use the &lt;code&gt;argparse&lt;/code&gt;
features for providing defaults, argument help text and maybe validate and type
check the arguments.&lt;/p&gt;
&lt;p&gt;This little snippet changed my habit for writing scripts. It made the scripts
easier for people to use and modify them (including myself) and it helped me
to learn better the library, which I didn’t knew much besides the basics earlier
as I didn’t use it much. As I started using &lt;code&gt;argparse&lt;/code&gt; more, I started
designing the command line interfaces better, making decisions about
positional vs optional arguments, handling grouping and conflicting options,
trying to come up with truly helpful help text.
The snippet freed me of making small bad decisions when starting a script.&lt;/p&gt;
&lt;p&gt;My bad habit was impeding my learning, making life harder for people wanting to
use my scripts and making my life harder when maintaining the scripts. This
little snippet helped me to solve all these problems.&lt;/p&gt;
&lt;p&gt;That is the power of a good template.&lt;/p&gt;
&lt;p&gt;It helps you grow. If you let it. :)&lt;/p&gt;
&lt;p&gt;Templates are not about being lazy -- they’re about &lt;em&gt;learning&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A good template empowers you to learn better, by reducing the initial barrier.&lt;/p&gt;
&lt;p&gt;About an year ago, I didn’t know much about Python packaging, my Python
projects were all badly packaged, the &lt;code&gt;setup.py&lt;/code&gt; being patched when I hit
an issue. And every time I tried to read some packaging guide I’d get
overwhelmed pretty quickly. &lt;em&gt;“Uh, this is for Python gurus, too many
decisions I don’t understand, it will take years for me to learn enough to
build a nice Python package, nevermind.”&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Then I heard about &lt;a href="http://cookiecutter.rtfd.org/"&gt;cookiecutter&lt;/a&gt; (tool for
building and using project templates), found this template for Python packages
called
&lt;a href="https://github.com/audreyr/cookiecutter-pypackage"&gt;cookiecutter-pypackage&lt;/a&gt; and
gave it a try.&lt;/p&gt;
&lt;p&gt;I was very happy when I first built my first little package in a matter of
minutes, wrapping some lame script I had around. It had gorgeous docs published
on &lt;a href="http://readthedocs.org"&gt;ReadTheDocs&lt;/a&gt;, tests running in
&lt;a href="http://travis-ci.org"&gt;Travis-CI&lt;/a&gt;, and last but not least, it was published in
&lt;a href="http://pypi.python.org"&gt;PyPI&lt;/a&gt;! Now anyone can install it with &lt;code&gt;pip install
my_lame_package&lt;/code&gt; -- this is awesome!&lt;/p&gt;
&lt;p&gt;As the months went by, I got involved in splitting some code bases into smaller
packages. I used the cookiecutter-pypackage template for some of the new small
packages, and for others that needed more custom packaging I would get
inspiration about how the template solved a problem, discuss with others about
better ways to do it, and ended up learning a lot about Python packaging in the
process. I’m far from a guru, but I’m much less ignorant than one year ago.&lt;/p&gt;
&lt;p&gt;All this in a learning process that started with trying out a template.&lt;/p&gt;
&lt;p&gt;Templates are a great learning tool.&lt;/p&gt;
&lt;p&gt;The lesson I should have learned in my failed framework attempt of long time
ago was not that boilerplate code generation is bad in general. It was bad for
what I was using it, generating application code that needed to be kept in sync
with the template sources, quickly turning the generated code into legacy.&lt;/p&gt;
&lt;p&gt;But for code that can stand on its own, don’t require updates when the template
source changes, and specially for things that are a bit awkward to get started,
templates are awesome.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 18 Oct 2015 14:25:00 -0200</pubDate><guid isPermaLink="false">tag:,2015-10-18:2015/10/18/the-power-of-a-good-template.html</guid></item><item><title>Working on hard problems</title><link>/2015/09/13/working-on-hard-problems.html</link><description>&lt;p&gt;We programmers often prefer to work in problems that we already know how to
solve, and tend to avoid hard ones that don't have a straightforward solution.
Sure we like to think that we love a challenge, but given the choice of
something easy to solve and another that requires thinking more deeply, one
will choose to work in the easy one -- regardless of which one is more
important. We're biased to tools and techniques that we already know and are comfortable
with, we favor solutions we don’t need to think much.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="/images/easy-solution.jpg" alt="a Rubik's cube painted to look solved"
style="border: 1px solid #111; width: 400px" /&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;By hard problem, I don't mean just something you have never done before but
you're reasonably confident that you can learn how to do it -- you know,
solving a known problem in a different language/technology, these kinds of
things that we like to do sometimes to avoid boredom. I'm talking about problems that you have
no clue how to solve (or even if it’s solvable) and no idea if you can learn
how to solve it. Problems you're afraid of even trying to tackle.&lt;/p&gt;
&lt;p&gt;To be fair, this is just human nature, it's not a limitation of programmers
only: most people in similar circumstances will act the same way. And many
times this is okay, it's often not a big deal to do the thing requiring less
energy, we even design products around this behavior of choosing the easy. It's
only human that we will tend to do the easy instead of the hard, and many times
it’s even the wisest thing to do.&lt;/p&gt;
&lt;p&gt;Now, what if these hard problems are really the important ones? How do we
decide if they’re really important? What can we do about this natural tendency
of avoiding them? What can you do to make yourself more willing to at least
attempt to solve them? I’ve been thinking about this lately, and I don’t really
have a straight answer.&lt;/p&gt;
&lt;p&gt;I suppose it has a bit to do with attitude, a feeling that it will be worth to
give it a try even if you don’t succeed. I suspect the fear of failure is big
for many programmers. Our own expectations for a possible solution are
increasing by the minute, however our ability to learn doesn’t scale at the same proportion.
So we conclude we’re not up to the challenge and give up without really trying,
thus not building resilience while learning from failures, which would be
precisely what would help when tackling a tough problem.&lt;/p&gt;
&lt;p&gt;We’re eager to believe in &lt;a href="https://www.safaribooksonline.com/library/view/team-geek/9781449329839/ch01.html"&gt;the myth of the genius programmer&lt;/a&gt;, which helps to
increase our insecurity. Most programmers have some personal heroes, and that’s
not a bad thing, but it’s good to remind ourselves these heroes are just
people, not that different from you and me. I bet they see themselves as just
people working in hard problems. In some cases they might’ve been privileged
with early access to technology or guidance from knowledgeable people, but I
have the feeling that our heroes are mostly just people who are willing to give
it a try and keep at it.&lt;/p&gt;
&lt;p&gt;It’s nice to pay attention on what may be causing us to avoid difficult
problems, and seek to understand which are the sources of anxiety, what are the
risks and fears involved. Hopefully this will help us to see more clearly and
make better decisions about what we should be working on. Because it’s easy to
avoid important work if you’re rushing to do everything fast, fearing to fail
or disappoint someone or just being too busy to spend time thinking.&lt;/p&gt;
&lt;p&gt;Sure there will be times when we’ll be too underprepared for a problem. But maybe we
should try it either way, perhaps in a safe environment. At the very minimum we’d learn
a bit more about the problem and maybe grow a better understanding of what to
learn before trying again.
Who knows, &lt;a href="https://hbr.org/2013/04/to-find-happiness-at-work-tap/"&gt;this might end up being a good heuristic for increasing happiness&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img src="https://lh3.googleusercontent.com/-VY-GWqdlGBQ/U_IZKe8HVUI/AAAAAAAABPc/ysFshw14LrA/w612-h612/Ins%2Bbeautiful%2Bdestinations.jpg"
alt="Difficult roads often lead to beautiful destinations"
style="border: 1px solid #111; width: 350px" /&gt;
&lt;/center&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 13 Sep 2015 18:41:00 -0300</pubDate><guid isPermaLink="false">tag:,2015-09-13:2015/09/13/working-on-hard-problems.html</guid></item><item><title>Learning from DAS screencasts - season 2</title><link>/2015/08/17/learning-from-das-screencasts-season-2.html</link><description>&lt;p&gt;These are my notes for &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog"&gt;season 2 of Destroy All Software
screencasts&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The command line, Unix, git and Vim&lt;/h2&gt;
&lt;p&gt;In the first episode Gary teaches how to compose a complex Unix command line:
the point is that you want to build it slowly, checking if it works at every
step of the way. This becomes common sense pretty quickly after you acquire the
habit of doing this kind of thing for a while.&lt;/p&gt;
&lt;p&gt;For example, say you want to remove the untracked files from a git repo.
Instead of trying to write all of this in one go:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git status -s &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;??&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs rm -f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Since you don't want to delete any files by mistake, you will check every step
along the way, until arriving at the safe command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git status -s
 M README.rst
?? anotherfile.txt
?? file.txt
$ git status -s &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;^??&amp;#39;&lt;/span&gt;
?? anotherfile.txt
?? file.txt
$ git status -s &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;^??&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt;
anotherfile.txt
file.txt
$ &lt;span class="c1"&gt;# great, got right the list of files now!&lt;/span&gt;
$ &lt;span class="c1"&gt;# now let&amp;#39;s pipe it to xargs and print the delete command:&lt;/span&gt;
$ git status -s &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;^??&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs &lt;span class="nb"&gt;echo&lt;/span&gt; rm -f
rm -f anotherfile.txt file.txt
$ &lt;span class="c1"&gt;# looks safe, let&amp;#39;s remove the echo and do it for real:&lt;/span&gt;
$ git status -s &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s1"&gt;&amp;#39;^??&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $2 }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; xargs rm -f
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;His example is more complicated and more interesting than this, but you get the gist of it.&lt;/p&gt;
&lt;p&gt;The second episode is about the tar pipe, you can read &lt;a href="http://blog.extracheese.org/2010/05/the-tar-pipe.html"&gt;Gary's own post about
it here&lt;/a&gt;. I was already
familiar with the shell inner workings because I had to implement a toy shell
as homework when I was in college (my buddy
&lt;a href="https://twitter.com/stummjr"&gt;Valdir&lt;/a&gt; and I had loads of fun with that).  It
was pretty cool to see it takes a few minutes and 10 lines of Python code what
took us days and many lines of C code at the time.&lt;/p&gt;
&lt;p&gt;Later there is an episode about Vim with tips about how to learn it.
Here is a summary:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Learn the normal mode&lt;/li&gt;
&lt;li&gt;Learn the motions (&lt;code&gt;:help motions&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Don't repeat yourself&lt;/li&gt;
&lt;li&gt;When automating stuff, you usually start with something that you &lt;em&gt;read&lt;/em&gt; (a
  message in a buffer), then with something that you &lt;em&gt;scan&lt;/em&gt; (a list of things),
  then finally with something that you &lt;em&gt;do&lt;/em&gt; (an action or command).&lt;/li&gt;
&lt;li&gt;An action is better than scanning over a list which is better than having to
  read an interpret a message. Choose plugins that are more of the former than
  the latter.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The thing about Vim is that it feels like practicing a sport or playing an
instrument, you can often do edit work with your eyes closed.&lt;/p&gt;
&lt;p&gt;In another episode Gary builds a command-line to look at evolution of the
execution time of the test suite, and then demonstrates using &lt;code&gt;git bisect&lt;/code&gt; to
find out which change was responsible for a nice performance boost. He used a
few tricks which I thought were pretty neat. &lt;/p&gt;
&lt;p&gt;First trick was, while building a command line for a long list of commits, he
used awk to filter the input to get only every 50th line, before getting the
rest of the command line right for the full output, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;some command generating many lines | awk &amp;#39;NR % 50 == 0&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can see myself using this in the future, it’s a good way of previewing the results of a command. :)&lt;/p&gt;
&lt;p&gt;The other trick I liked was getting a quick histogram in the command-line using
&lt;a href="http://www.unix.com/man-page/freebsd/1/jot/"&gt;a command utility called jot&lt;/a&gt;
present in Mac OS X and other BSD based systems. The &lt;code&gt;jot&lt;/code&gt; command is pretty
similar to seq in Linux-based distros, only it allows to print a string
repeatedly (&lt;code&gt;-b&lt;/code&gt; argument) while &lt;code&gt;seq&lt;/code&gt; does not allow printing things other
than numbers. This is nice, because you can do things like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ jot -s &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; -b&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="c1"&gt;##########&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now for an example plotting some numbers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ seq &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -R &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; num&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;jot -s &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt; -b&lt;span class="s1"&gt;&amp;#39;#&amp;#39;&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="c1"&gt;################ 16&lt;/span&gt;
&lt;span class="c1"&gt;################### 19&lt;/span&gt;
&lt;span class="c1"&gt;################# 17&lt;/span&gt;
&lt;span class="c1"&gt;################## 18&lt;/span&gt;
&lt;span class="c1"&gt;#################### 20&lt;/span&gt;
&lt;span class="c1"&gt;############### 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;While we don’t have &lt;code&gt;jot&lt;/code&gt; distributed by default in Linux distros, we can do the
same thing in Linux using python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ seq &lt;span class="m"&gt;15&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sort -R &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; num&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;python -c &lt;span class="s2"&gt;&amp;quot;print(&amp;#39;#&amp;#39;*&lt;/span&gt;&lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="sb"&gt;`&lt;/span&gt; &lt;span class="nv"&gt;$num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;done&lt;/span&gt;
&lt;span class="c1"&gt;################# 17&lt;/span&gt;
&lt;span class="c1"&gt;############### 15&lt;/span&gt;
&lt;span class="c1"&gt;################### 19&lt;/span&gt;
&lt;span class="c1"&gt;#################### 20&lt;/span&gt;
&lt;span class="c1"&gt;################## 18&lt;/span&gt;
&lt;span class="c1"&gt;################ 16&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are &lt;a href="http://superuser.com/questions/86340/linux-command-to-repeat-a-string-n-times"&gt;a bunch of other ways of doing it in the shell
itself&lt;/a&gt;,
but I like the conciseness and readability of this one.&lt;/p&gt;
&lt;h2&gt;TDD&lt;/h2&gt;
&lt;p&gt;Some videos deal with Test Driven Design vs Test Driven Development, talking
about an idea I had never heard before called
&lt;a href="http://lizkeogh.com/2012/06/24/beyond-test-driven-development/"&gt;spiking&lt;/a&gt;
(apparently I’ve missed some TDD literature). The idea is to write some code
without tests in a sort of exploratory way, usually to get an understanding of
what’s possible, and then throw it away and restart from the beginning writing
tests first.&lt;/p&gt;
&lt;p&gt;Gary demonstrates the idea of doing &lt;a href="https://www.destroyallsoftware.com/screencasts/catalog/spiking-and-continuous-spiking"&gt;continuous
spiking&lt;/a&gt;,
where instead of throwing all the code away you’d transition it in a TDD-style
manner, as you write tests for it. (He shows another example of this later in
another video in a workflow using git, where you'd rebase the branch where you
spiked on top of the new implementation you're TDDing.) He mentions there is a
danger of doing this because the end result will probably be heavily influenced
by the design you ended up when doing the spike (writing code without tests),
so you’ll not be driving the design in a test-driven manner.&lt;/p&gt;
&lt;p&gt;This probably sounds a bit extreme to some, but the reasoning is that you will
miss some design insights when you’re not putting yourself in the shoes of the
user. It makes sense to me, even though I confess I often do not work that hard
to do test driven design as I'd want to.&lt;/p&gt;
&lt;p&gt;There was a nice video about test stubs making the distinction between
incidental interaction vs essential interaction and the relation to using a
normal stub (a dummy for an incidental interaction) vs a null object stub (aka
mocks, when you assert on methods, checking essential interactions). Testing
a module mixin may be a special case, you can mixin directly in the stub for
simpler testing.&lt;/p&gt;
&lt;p&gt;As an additional note, it’s useful to make stubs first and share them for
several tests, to localize and make clear what each test cares about.&lt;/p&gt;
&lt;p&gt;In another episode Gary shows something I’ve also learned on my own: it’s a
good practice to split tests that test several things into finer grained
isolated tests with meaningful names that test only one thing. This is
specially useful when you’re refactoring and a test breaks, because you can see
more directly what went wrong.&lt;/p&gt;
&lt;h2&gt;Refactoring in a codebase new to you&lt;/h2&gt;
&lt;p&gt;There are two episodes quite interesting to watch, where Gary refactors out a
Rails controller without much previous knowledge about the code.&lt;/p&gt;
&lt;p&gt;I find it hard to write about it, it seems to be the kind of thing for which
video is the best vehicle because it's hard to talk about it using words alone,
without showing the mechanics of it. It seems to me that these videos
illustrate that if you know well your language and tools, you can work
reasonably well in codebases that are new to you. It’s nice to try this kind of
thing every once in a while.&lt;/p&gt;
&lt;h2&gt;Acceptance tests&lt;/h2&gt;
&lt;p&gt;In a video about acceptance tests, Gary shows the usage of
&lt;a href="https://cucumber.io/"&gt;Cucumber&lt;/a&gt; for testing a Rails application, using a
browser engine to simulate user actions and a few tricks he uses to make it run
fast (20 scenarios with 104 tests in total, finish under ten seconds). I don’t
have much experience with &lt;a href="https://en.wikipedia.org/wiki/Acceptance_test-driven_development"&gt;acceptance test-driven
development&lt;/a&gt;,
but one good point I took from from this is that it’s better to come up with
meaningful short names for user actions ("when user creates a monthly coupon")
instead of long names that describe the input ("when user enters X into field Y
and selects option Z").&lt;/p&gt;
&lt;p&gt;In another video he investigates the performance of tests testing the same
feature but from different levels for a Rails app: two acceptance tests using a
browser engine to simulate an user, two tests running the controller method
including rendering the view, two tests for the view only and finally two tests
for the same functionality inside a class method.&lt;/p&gt;
&lt;p&gt;Plotting the results of the execution times for the tests at different levels,
the curve looks exponential. I suppose the lesson here is that it’s good to
move a lot of functionality into classes and libraries, in order to be able to
rely as much as possible into unit tests and not need to rely much on
integration and acceptance tests. This should probably not be much surprising.&lt;/p&gt;
&lt;p&gt;Following that, Gary explains which of those tests he would actually want to
keep for the test suite of the app (he discards the controller tests, leaves
only one acceptance test and reluctantly keeps the view tests because they're
around a conditional). A good point he makes is that if you see a test that
it’s mostly talking about dependencies of the things it claims to be testing,
then it’s probably not testing at the right level.&lt;/p&gt;
&lt;p&gt;And that's it for season 2, a pretty cool experience -- thanks for reading! =)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Mon, 17 Aug 2015 01:41:00 -0300</pubDate><guid isPermaLink="false">tag:,2015-08-17:2015/08/17/learning-from-das-screencasts-season-2.html</guid><category>das-screencasts</category></item><item><title>Useful small scripts for your ~/bin</title><link>/2015/01/28/useful-small-scripts-for-your-bin.html</link><description>&lt;h3&gt;fields&lt;/h3&gt;
&lt;p&gt;So you are a command line geek, you do your
shell-scripts and one-liners using bash to get information you
need.&lt;/p&gt;
&lt;p&gt;You use &lt;a href="http://en.wikipedia.org/wiki/Cut_(Unix)"&gt;cut&lt;/a&gt;
for handling things delimited by some character like comma or space, but
sometimes you have a list of stuff separated by a varied amount of
spaces, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat myfile.txt
Amelia        &lt;span class="m"&gt;555&lt;/span&gt;-5553     amelia.zodiacusque@gmail.com
Julie         &lt;span class="m"&gt;555&lt;/span&gt;-6699     julie@skeeve.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This form of vertical alignment is cool because you can skim through any column
very quickly, but it makes your life a little bit harder when processing it in
the command line. Well, maybe you're smiling to yourself because you already
know about &lt;a href="http://en.wikipedia.org/wiki/AWK"&gt;awk&lt;/a&gt;, and you use it all the time
for this kind of stuff doing something like:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat myfile.txt &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $3 }&amp;#39;&lt;/span&gt;
amelia.zodiacusque@gmail.com
julie@skeeve.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all fine, &lt;a href="http://ferd.ca/awk-in-20-minutes.html"&gt;awk is a great tool to
grok&lt;/a&gt;, but typing all that just for
getting out a field is a bit annoying. So I've written a little script to make
that yet easier: just &lt;a href="https://github.com/eliasdorneles/dotfiles/raw/master/bin/fields"&gt;download
it&lt;/a&gt; and put
somewhere in your $PATH. After that, next time you find yourself in this
situation you'll do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat myfile.txt &lt;span class="p"&gt;|&lt;/span&gt; fields &lt;span class="m"&gt;1&lt;/span&gt;
Amelia
Julie
$ cat myfile.txt &lt;span class="p"&gt;|&lt;/span&gt; fields &lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;555&lt;/span&gt;-5553
&lt;span class="m"&gt;555&lt;/span&gt;-6699
$ cat myfile.txt  &lt;span class="p"&gt;|&lt;/span&gt; fields &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;          &lt;span class="c1"&gt;# get fields separated by TABs&lt;/span&gt;
&lt;span class="m"&gt;555&lt;/span&gt;-5553    amelia.zodiacusque@gmail.com
&lt;span class="m"&gt;555&lt;/span&gt;-6699    julie@skeeve.com
$ cat myfile.txt  &lt;span class="p"&gt;|&lt;/span&gt; fields -s , &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;     &lt;span class="c1"&gt;# or by comma&lt;/span&gt;
&lt;span class="m"&gt;555&lt;/span&gt;-5553,amelia.zodiacusque@gmail.com
&lt;span class="m"&gt;555&lt;/span&gt;-6699,julie@skeeve.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;total_sum&lt;/h3&gt;
&lt;p&gt;Another thing you may found yourself running to awk is when you need a sum of
numbers. Often when you need a summation you will also need some more stuff,
and then it might be time to start writing a Python/Ruby/Perl script instead of
hacking in the command line. But I've often finding myself wanting just a
simple sum that justified putting the little awk one-liner &lt;a href="https://github.com/eliasdorneles/dotfiles/raw/master/bin/total_sum"&gt;into a script of
its own&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cat ~/bin/total_sum
&lt;span class="c1"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="c1"&gt;# Report sum of numbers fed to the stdin&lt;/span&gt;

awk &lt;span class="s1"&gt;&amp;#39;{ total+=$1 } END { print total }&amp;#39;&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;1\n2\n3\n4&amp;quot;&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;
&lt;span class="m"&gt;3&lt;/span&gt;
&lt;span class="m"&gt;4&lt;/span&gt;
$ &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;1\n2\n3\n4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt; total_sum
&lt;span class="m"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;humanize&lt;/h3&gt;
&lt;p&gt;If you find yourself having to count digits from a long number representing the
size in bytes of some big file, you're not alone.&lt;/p&gt;
&lt;p&gt;I got tired of this and wrote &lt;a href="https://github.com/eliasdorneles/dotfiles/blob/master/bin/humanize"&gt;a Python script to humanize these
numbers&lt;/a&gt;
(&lt;a href="https://github.com/eliasdorneles/dotfiles/raw/master/bin/humanize"&gt;download
here&lt;/a&gt;),
shamelessly stealing the naturalsize function from the &lt;a href="https://pypi.python.org/pypi/humanize"&gt;humanize Python
library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Look how pleasant it is to use it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ humanize &lt;span class="m"&gt;32432&lt;/span&gt;
&lt;span class="m"&gt;32&lt;/span&gt;.4 kB
$ &lt;span class="nb"&gt;echo&lt;/span&gt; -e &lt;span class="s2"&gt;&amp;quot;10\n1200\n54356\n3123342\n3294384948&amp;quot;&lt;/span&gt; &amp;gt; some_file.txt
$ cat some_file.txt
&lt;span class="m"&gt;10&lt;/span&gt;
&lt;span class="m"&gt;1200&lt;/span&gt;
&lt;span class="m"&gt;54356&lt;/span&gt;
&lt;span class="m"&gt;3123342&lt;/span&gt;
&lt;span class="m"&gt;3294384948&lt;/span&gt;
$ cat some_file.txt &lt;span class="p"&gt;|&lt;/span&gt; humanize
&lt;span class="m"&gt;10&lt;/span&gt; Bytes
&lt;span class="m"&gt;1&lt;/span&gt;.2 kB
&lt;span class="m"&gt;54&lt;/span&gt;.4 kB
&lt;span class="m"&gt;3&lt;/span&gt;.1 MB
&lt;span class="m"&gt;3&lt;/span&gt;.3 GB
$ cat some_file.txt &lt;span class="p"&gt;|&lt;/span&gt; humanize--binary
&lt;span class="m"&gt;10&lt;/span&gt; Bytes
&lt;span class="m"&gt;1&lt;/span&gt;.2 KiB
&lt;span class="m"&gt;53&lt;/span&gt;.1 KiB
&lt;span class="m"&gt;3&lt;/span&gt;.0 MiB
&lt;span class="m"&gt;3&lt;/span&gt;.1 GiB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's all I had, folks! :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Wed, 28 Jan 2015 00:03:00 -0200</pubDate><guid isPermaLink="false">tag:,2015-01-28:2015/01/28/useful-small-scripts-for-your-bin.html</guid></item><item><title>Things I Learned from Destroy All Software - Season 1</title><link>/2015/01/18/things-i-learned-from-destroy-all-software---season-1.html</link><description>&lt;p&gt;So, a few weeks ago I purchased and watched the first season of &lt;a href="https://www.destroyallsoftware.com/"&gt;Destroy All
Software screencasts&lt;/a&gt; (from &lt;a href="https://twitter.com/garybernhardt"&gt;Gary
Bernhard&lt;/a&gt;), and it was awesome. I'd say
there are different kinds of stuff to learn from it, depending on your personal
interests and experience.&lt;/p&gt;
&lt;p&gt;Here are my notes for some things I found useful and want to remember for
later.&lt;/p&gt;
&lt;h3&gt;About Git:&lt;/h3&gt;
&lt;p&gt;You can use the &lt;code&gt;git rev-list HEAD&lt;/code&gt;  command to get a list of commits in the
current branch. This is useful for writing scripts to report something about
each commit in the repo.  You can, for example, check the evolution of line
counts over the course of the project (or any other statistic like number of
tests, number of files, etc). You can also run the tests for every commit in
the history:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git rev-list HEAD &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;read&lt;/span&gt; rev&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
   git checkout &lt;span class="nv"&gt;$rev&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clean-fd &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Gary has a script ready for this:
&lt;a href="https://github.com/garybernhardt/dotfiles/blob/master/bin/run-command-on-git-revisions"&gt;run-command-on-git-revisions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Git tracks everything that happens in the local repo, even stuff that is not
shared when you push (like when you rewrite history doing a rebase). You can
use &lt;code&gt;git reflog&lt;/code&gt; to see the history of local changes and &lt;code&gt;git reset --hard
REFLOG_ENTRY&lt;/code&gt; to go back to where you were.&lt;/p&gt;
&lt;h3&gt;About design:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Avoiding &lt;code&gt;nil&lt;/code&gt; is good because it makes your code more predictable and tracebacks
more understandable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When adding tests to a suite, it's important to pay attention at your stubs.
If they are getting complicated, the design can probably be improved in a way
that will render better tests and better production code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When adding extra functions to a 3rd party API, sometimes it's tempting to do
monkey-patching of the library for a small change. It's usually better to use
a wrapper it instead, because later you will probably need more changes and
this will be easier if your production code is already using a wrapper.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Isolated tests are good because they run faster, they encourage better design
and code clarity. This is something I've read about repeatedly in the past and
also applied to some of the code I've done myself, so it's not that new. But it
was great to watch someone applying this on several different code bases,
showing some interesting paths -- it inspired me to apply a bit more of this in
my work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;About Unix:&lt;/h3&gt;
&lt;p&gt;To bring a background process to foreground, besides fg, you can also use &lt;code&gt;%N&lt;/code&gt;
where N is the job number reported by the command jobs.&lt;/p&gt;
&lt;p&gt;You can use the output of a command as if it were a filename, using
&lt;code&gt;&amp;lt;(COMMAND)&lt;/code&gt;, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ diff &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;date&lt;span class="o"&gt;)&lt;/span&gt;
1c1
&amp;lt; 
---
&amp;gt; Sat Jan &lt;span class="m"&gt;17&lt;/span&gt; &lt;span class="m"&gt;18&lt;/span&gt;:47:48 BRST &lt;span class="m"&gt;2015&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The shell will run the commands and pass to the program file descriptors
with the proper contents, which you can verify doing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;ls -l&lt;span class="o"&gt;)&lt;/span&gt; &amp;lt;&lt;span class="o"&gt;(&lt;/span&gt;ls -l&lt;span class="o"&gt;)&lt;/span&gt;
/dev/fd/63
/dev/fd/62
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is useful for commands like diff that need more than one input file (and
therefore can't just use the stdin), to use it with arbitrary stuff generated
from other commands.&lt;/p&gt;
&lt;p&gt;I found this specially helpful for when I want to refactor a script: before I
make changes, I store its original output in a file and then while refactoring
I keep comparing the output of the script with the file to see if I'm not
breaking anything:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff &amp;lt;(./my_script) original.txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It can also be useful to see differences between two different versions of
the same web application or sites:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;diff &amp;lt;(curl -s http://somesite.com) &amp;lt;(curl -s http://anothersite.com)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;About vim:&lt;/h3&gt;
&lt;p&gt;It's nice to see people using vim well, because I can compare with my own
habits and see things where I can improve. Gary seems to strive to keep a tight
feedback loop in everything he's doing, so seeing him using vim and the shell
to build things in this fashion is pretty cool. I see it as a nice validation
for the choice of tools.&lt;/p&gt;
&lt;p&gt;I found myself using splits a bit more, after watching the screencasts.  I'm
more used to using vim tabs, mostly because I'm not much comfortable with stuff
happening outside my view. This is probably something I can work better if I
grow some tolerance for it.&lt;/p&gt;
&lt;p&gt;Apart from this, I stole a bunch of vim functions and ideas from &lt;a href="https://github.com/garybernhardt/dotfiles"&gt;Gary's
dotfiles&lt;/a&gt;, which I also share in &lt;a href="https://github.com/eliasdorneles/dotfiles"&gt;my
dotfiles&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 18 Jan 2015 10:07:00 -0200</pubDate><guid isPermaLink="false">tag:,2015-01-18:2015/01/18/things-i-learned-from-destroy-all-software---season-1.html</guid><category>das-screencasts</category></item><item><title>The Visual Display of Quantitative Information, or How to Make Better Graphs</title><link>/2014/10/12/the-visual-display-of-quantitative-information-or-how-to-make-better-graphs.html</link><description>&lt;p&gt;&lt;a href="http://www.edwardtufte.com/tufte/books_vdqi"&gt;The Visual Display
of Quantitative Information&lt;/a&gt;,
by &lt;a href="http://www.edwardtufte.com/"&gt;Edward Tufte&lt;/a&gt;, is a beautiful book. It's not
just well-written, it's really beautiful, you feel like every inch of the book
was planned and designed with great care. The book makes the case for better
data graphics, shows you several examples of great graphics (some of them were
published centuries ago), plus some bad examples and how to improve them.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.edwardtufte.com/tufte/books_vdqi"&gt;
    &lt;img src="http://www.edwardtufte.com/tufte/graphics/vdqi_bookcover.gif" align="right" /&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After reading it, I feel much more prepared to create graphs and choose better
visualizations for the different kinds of data that may end up on my lap. Also,
while reading the book, I got a lot of ideas for new things to try – I don't
know if I'll ever be able to actually implement them, but it's been refreshing
anyway.&lt;/p&gt;
&lt;p&gt;I've put down a few notes from the book just to whet your appetite, so here
you are.&lt;/p&gt;
&lt;h3&gt;Good graphics tell a story&lt;/h3&gt;
&lt;p&gt;Data graphics are not about aesthetic sensibility of the artist who created it,
nor making boring data a bit more fun. Great data graphics tell you a story
about something, communicates complex stuff in a clear way, makes you wonder
about the data on display, there is no need for distracting decorations.&lt;/p&gt;
&lt;p&gt;That's also why good graphics are often about multivariate and complex data,
bringing new ways to look at it, enabling you to make comparisons and reason
about it.&lt;/p&gt;
&lt;p&gt;A nice example used throughout the book is &lt;a href="http://en.wikipedia.org/wiki/Charles_Joseph_Minard#Work"&gt;the graphic by Charles Minard
showing Napoleon's disastrous attempt to conquer
Russia&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/File:Minard.png"&gt;&lt;img alt="900px-Minard.png" src="https://lh4.googleusercontent.com/D1zpfFIzj6ExFTso1a4fCr7RA2PWSQQ2FIBbNu03Ey1CPKzkumOdT7eiXhw7i116WelNxBRtMFXJXljwR0ZC6aXKE1_HSj90_gkgY9uLEymrRjS5ssDGdd3SoDLeyTwdJA" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Good graphics don't lie&lt;/h3&gt;
&lt;p&gt;It's all about conveying precise information, so any tricks to distract the
viewer from the truth are a bad idea. It's not much different than the written
words, after all.&lt;/p&gt;
&lt;p&gt;Therefore, when constructing data graphics, make the physical representation of
numbers in the paper or the screen always directly proportional to the
quantities they represent. Do not bend rules in a way that may distort the data
and induce erroneous comparisons. Do not use 2D graphics for 1D data. Finally,
do not quote data out of context: show the full history of the measurements and
take inflation into account when showing money-over-time.&lt;/p&gt;
&lt;h3&gt;Above all else show the data&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://www.infovis-wiki.net/index.php/Data-Ink_Ratio"&gt;Data-ink ratio&lt;/a&gt; is the
proportion of a graphic's ink devoted to the non-redundant display of
data-information. Namely, it represents the parts of a graphic that cannot be
erased without loss of information.&lt;/p&gt;
&lt;p&gt;The process of creating a great data graphic involves maximizing the data-ink
ratio, reducing all the non-relevant information.The folks at &lt;a href="http://darkhorseanalytics.com/"&gt;DarkHorse
Analytics&lt;/a&gt; have done a good demonstration of
this in &lt;a href="https://speakerdeck.com/cherdarchuk"&gt;their neat Remove to Improve
slideshows&lt;/a&gt; (&lt;a href="http://darkhorseanalytics.com/blog/"&gt;read more about it on their
blog&lt;/a&gt;).&lt;/p&gt;
&lt;h3&gt;Friendly data graphics are accessible&lt;/h3&gt;
&lt;p&gt;And this does not mean that you should "dumb down" the graphic to make it more
accessible, but that you need to have the viewer in mind while constructing it.&lt;/p&gt;
&lt;p&gt;Therefore, you will spell out the words instead of using abbreviations,
annotate the graphic with helpful little messages instead of requiring
elaborated legends, use colors in a way that color-deficient people can also
make sense of the graphic (tip: use red-blue instead of red-green for
contrast), use clear, precise and modest font types, upper-and-lower case and
with serifs.&lt;/p&gt;
&lt;p&gt;Liked it? &lt;a href="http://www.amazon.com/The-Visual-Display-Quantitative-Information/dp/0961392142"&gt;Buy the book and read
it&lt;/a&gt;,
it's worthy it.&lt;/p&gt;
&lt;p&gt;Thanks &lt;a href="https://twitter.com/skywy"&gt;Paul&lt;/a&gt;, for the great book recommendation. =)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 12 Oct 2014 17:42:00 -0300</pubDate><guid isPermaLink="false">tag:,2014-10-12:2014/10/12/the-visual-display-of-quantitative-information-or-how-to-make-better-graphs.html</guid></item><item><title>Web Scraping with Scrapy - first steps</title><link>/2014/08/30/web-scraping-with-scrapy---first-steps.html</link><description>&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; This tutorial isn't up to date with the latest and greatest of Scrapy. You should follow &lt;a href="https://docs.scrapy.org/en/latest/intro/overview.html"&gt;the official documentation instead&lt;/a&gt;, I've worked together with other Scrapy developers to make it better. I'm leaving this article online for archival purposes only.&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;&lt;a href="https://pythonhelp.wordpress.com/2014/08/05/web-scraping-com-scrapy-primeiros-passos/"&gt;Leia a versão em Português&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Imagine you want to extract content from the Web that isn't all in only one
page: you need a way tonavigate through the site to get to the pages that
contain the useful information. For example, maybe you want to get the
latest &lt;a href="http://mentalfloss.com/big-questions"&gt;"big questions" articles&lt;/a&gt; of
the &lt;a href="http://mentalfloss.com/"&gt;Mental Floss&lt;/a&gt; website, but only those in
theOrigins andFact Check categories.&lt;/p&gt;
&lt;p&gt;&lt;img alt="mentalfloss-big-questions.png" src="https://lh6.googleusercontent.com/AjDSrHs8cDBjc7KfD2ljUpYm42lwClr3PSU2baGiDcDIUVWScyD7TfEKqeTA8gi3mzCik0tljsRj5QV-dl2kH1n2F15IME_OFqFOwUNhgPqcYLFZ_GsHF31HFekHUysQ3g" /&gt;&lt;/p&gt;
&lt;p&gt;If you have an interest in Python and web scraping, you may have already played
with the nice &lt;a href="http://docs.python-requests.org/"&gt;requests library&lt;/a&gt; to get
content of pages from the Web. Maybe you have toyed around using
&lt;a href="http://www.crummy.com/software/BeautifulSoup/"&gt;BeautifulSoup&lt;/a&gt; or
&lt;a href="http://lxml.de/"&gt;lxml&lt;/a&gt; to make the content extraction easier. Well, now we are
going to show you how to use the &lt;a href="http://scrapy.org/"&gt;Scrapy framework&lt;/a&gt;, which
has all these functionalities and many more, so that solving the sort of
problem we introduced above is a walk in the park.&lt;/p&gt;
&lt;p&gt;It is worth noting that Scrapy tries not only to solve the content extraction
(called &lt;a href="http://en.wikipedia.org/wiki/Web_scraping"&gt;scraping&lt;/a&gt;), but also the
navigation to the relevant pages for the extraction
(called &lt;a href="http://en.wikipedia.org/wiki/Web_crawler"&gt;crawling&lt;/a&gt;).  To achieve that,
a core concept in the framework is theSpider -- in practice, a Python object
with a few special features, for which you write the code and the framework is
responsible for triggering it.&lt;/p&gt;
&lt;p&gt;Just so that you have an idea of what it looks like, come on take a peek at the
code of a little program below that uses Scrapy to extract some information
(link, title and number of views) from a YouTube channel.  Don't worry about
understanding this code yet, we're just showing it here so that you have a
feeling of a code using Scrapy. By the end of this tutorial, you'll be able to
understand and write programs like this one. =)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scrapy.contrib.loader&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ItemLoader&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;YoutubeVideo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;views&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;YoutubeChannelLister&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;youtube-channel-lister&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;youtube_channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;LongboardUK&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;https://www.youtube.com/user/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;/videos&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;youtube_channel&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ul#channels-browse-content-grid &amp;gt; li&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;loader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ItemLoader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;YoutubeVideo&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;selector&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.//h3/a/@href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.//h3/a/text()&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;views&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.//ul/li[1]/text()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load_item&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before we talk more about Scrapy, make sure you have the latest version
installed using the command (depending on your environment, you may need to use
&lt;code&gt;sudo&lt;/code&gt; or the &lt;code&gt;--user&lt;/code&gt; option for &lt;code&gt;pip install&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --upgrade scrapy
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; depending on your Python environment, the installation may be a bit
tricky because of the dependency on &lt;a href="https://twistedmatrix.com/"&gt;Twisted&lt;/a&gt;.  If
you use Windows, check out &lt;a href="http://scrapy.readthedocs.org/en/latest/intro/install.html#platform-specific-installation-notes"&gt;the specific instructions in the official
installation
guide&lt;/a&gt;.
If you use a Debian-based Linux distro, you may want to use the &lt;a href="http://scrapy.readthedocs.org/en/latest/topics/ubuntu.html#topics-ubuntu"&gt;official
Scrapy APT
repository&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To be able to follow this tutorial, you'll need Scrapy version 0.24 or above.
You can check your installed Scrapy version using the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;import scrapy; print scrapy.__version__&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The output of this command in the environment we used for this tutorial is like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;import scrapy; print scrapy.__version__&amp;#39;&lt;/span&gt;
&lt;span class="mf"&gt;0.24&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The anatomy of a spider&lt;/h3&gt;
&lt;p&gt;&lt;center&gt;&lt;img width="400" src="https://lh6.googleusercontent.com/1OLnj7-I1_85hnfnovq6WbRDl3EQTs2xNxc_QpAZ7x2_twrGG0Olb3ZYG7wxA-QFaJVlxfLxNa14yVFSY4JxmlnTVLSJQ30isc4oifxUnFawhQC3PrIGhYxPOayRJHutZg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;A Scrapy spider is responsible for defining how to follow the links
"navigating" through a website (that's the so-called crawling part) and how to
extract the information from the pages into Python data structures.&lt;/p&gt;
&lt;p&gt;To define a minimal spider, create a class extending
&lt;a href="http://doc.scrapy.org/en/latest/topics/spiders.html#scrapy.spider.Spider"&gt;scrapy.Spider&lt;/a&gt;
and give it a name using thename attribute:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinimalSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The smallest Scrapy-Spider in the world!&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minimal&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Put this in a file with the name &lt;code&gt;minimal.py&lt;/code&gt; and run your spider to check if
everything is okay, using the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider minimal.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything is fine, you'll see in the screen some messages from the log
marked as &lt;code&gt;INFO&lt;/code&gt; and &lt;code&gt;DEBUG.&lt;/code&gt; If there is any message marked as &lt;code&gt;ERROR&lt;/code&gt;, it
means that there is something wrong and you need to check for errors in your
spider code.&lt;/p&gt;
&lt;p&gt;The life of a spider starts with the generation of HTTP requests (&lt;a href="http://doc.scrapy.org/en/latest/topics/request-response.html"&gt;Request
objects&lt;/a&gt;) to put
in motion the framework engine. The part of the spider responsible for this is
the &lt;code&gt;start_requests()&lt;/code&gt; method, that returns an
&lt;a href="https://docs.python.org/2/glossary.html#term-iterable"&gt;iterable&lt;/a&gt; with the
first requests to be done for the spider.&lt;/p&gt;
&lt;p&gt;Adding this element to our minimal spider, we have:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinimalSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The smallest Scrapy-Spider of the world, maybe&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;minimal&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.google.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://www.yahoo.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;start_requests()&lt;/code&gt; method must return an
&lt;a href="https://docs.python.org/2/glossary.html#term-iterable"&gt;iterable&lt;/a&gt; of
&lt;a href="http://doc.scrapy.org/en/latest/topics/request-response.html"&gt;scrapy.Request&lt;/a&gt;
objects, which represent an HTTP request to be made by the framework (these
contain data like URL, parameters, cookies, etc) and define a function to be
called when the request is complete -- a callback.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you are familiar with implementing AJAX in JavaScript, this way of
  work dispatching requests and registering callbacks may sound familiar.&lt;/p&gt;
&lt;p&gt;In our example, we return a simple list of requests to Google and Yahoo
websites, but the &lt;code&gt;start_requests()&lt;/code&gt; method could also be implemented as a &lt;a href="https://wiki.python.org/moin/Generators"&gt;Python
generator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you have tried to execute the example like it is now, you may noticed that
there is something still missing, because Scrapy will show two messages marked
as ERROR, complaining that a method was not implemented:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
 File
&amp;quot;/home/elias/.virtualenvs/scrapy/local/lib/python2.7/site-packages/scrapy/spider.py&amp;quot;,
line 56, in parse

   raise NotImplementedError
exceptions.NotImplementedError:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This happens because, as we didn't register a callback for the Request objects,
Scrapy tried to call the default callback, which is the &lt;code&gt;parse()&lt;/code&gt; method of the
Spider object. Let's add this method to our minimal spider, so that we can
execute it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinimalSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;The 2nd smallest Scrapy-Spider of the world!&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minimal&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;start_requests&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.google.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://www.yahoo.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GETTING URL: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, when you execute it using the command:scrapy runspider minimal.py you
should see something like this in the output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-07-26 15:39:56-0300 [minimal] DEBUG: Crawled (200) &amp;lt;GET http://www.google.com.br/?gfe_rd=cr&amp;amp;ei=_PXTU8f6N4mc8Aas1YDABA&amp;gt; (referer: None)
2014-07-26 15:39:56-0300 [minimal] DEBUG: GETTING URL: http://www.google.com.br/?gfe_rd=cr&amp;amp;ei=_PXTU8f6N4mc8Aas1YDABA
2014-07-26 15:39:57-0300 [minimal] DEBUG: Redirecting (302) to &amp;lt;GET https://br.yahoo.com/?p=us&amp;gt; from &amp;lt;GET https://www.yahoo.com/&amp;gt;
2014-07-26 15:39:58-0300 [minimal] DEBUG: Crawled (200) &amp;lt;GET https://br.yahoo.com/?p=us&amp;gt; (referer: None)
2014-07-26 15:39:58-0300 [minimal] DEBUG: GETTING URL: https://br.yahoo.com/?p=us
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make our code even cleaner, we can take advantage of the default
implementation of &lt;code&gt;start_requests()&lt;/code&gt;: if you don't define it, Scrapy will
create requests for a list of URLs in the attribute named &lt;code&gt;start_urls&lt;/code&gt; -- the
same kind of thing we're doing above. So, we'll keep the same functionality and
reduce the code, using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MinimalSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A menor Scrapy-Aranha do mundo!&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;minimal&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;http://www.google.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;http://www.yahoo.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GETTING URL: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Like in the &lt;code&gt;parse()&lt;/code&gt; method shown above, every callback gets the content of
the HTTP response as an argument (in a
&lt;a href="http://scrapy.readthedocs.org/en/latest/topics/request-response.html#scrapy.http.Response"&gt;Response&lt;/a&gt;
object). So, inside this callback, where we already have the content of the
page, that's where we'll do the information extraction, i.e., the data scraping
itself.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img width="500" src="https://lh3.googleusercontent.com/fTtt8VFXX5jcaTlMj9okmgKJxovkhZhKO392KqHkopX0oCmpPp0d8HA9tBY7vkTvE8NXlYR2NjAyeRJF0FW3A3BE01uI2YMH1Pkcq369Sx9pgARuSKH71mHM5TEumlOqFw" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h3&gt;Callbacks, Requests &amp;amp; Items&lt;/h3&gt;
&lt;p&gt;Functions registered as callbacks for the requests can return an iterable of
objects, in which every object can be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;an instance of a subclass of
&lt;a href="http://doc.scrapy.org/en/latest/topics/items.html"&gt;scrapy.Item&lt;/a&gt;, which you
define to contain the data to be collected from the page&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;an object of type
&lt;a href="http://doc.scrapy.org/en/latest/topics/request-response.html"&gt;scrapy.Request&lt;/a&gt;
representing yet another request to be made (possibly registering
anothercallback)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With this mechanism of requests and callbacks that may generate new requests
(with new callbacks), you can program the navigation through a site
generating requests for the links to be followed, until getting to the
pages that contain the items you're interested. For example, for a
spider that needs to extract products from the website of an online
store navigating through categories, you could use a structure like the
following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SkeletonSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spider-mummy&amp;#39;&lt;/span&gt;

    &lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://www.some-online-webstore.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;url_category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_category_page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_category_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;url_product&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_product&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse_product&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In the above structure, the default callback --parse() method -- handles the
response of the first request to the online store website and generates new
requests for the pages of the categories, registering another callback to
handle them -- the &lt;code&gt;parse_category_page()&lt;/code&gt; method. This last method does
something similar, generating the requests for the product pages, this time
registering a callback that extracts the item objects with the product data.&lt;/p&gt;
&lt;h4&gt;Why do I need to define classes for the items?&lt;/h4&gt;
&lt;p&gt;Scrapy proposes that you create a few classes that represent the items you
intend to extract from the pages. For example, if you want to extract the
prices and details of products from an online store, you could use a class like
the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;brand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;category&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the item classes are just subclasses
from &lt;a href="http://doc.scrapy.org/en/latest/topics/items.html"&gt;scrapy.Item&lt;/a&gt; in which
you add the desired fields (instances of the
class &lt;a href="http://doc.scrapy.org/en/latest/topics/items.html#scrapy.item.Field"&gt;scrapy.Field&lt;/a&gt;).
You can then use an instance of this class like if it were a Python dictionary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p = Product()
&amp;gt;&amp;gt;&amp;gt; p[&amp;#39;price&amp;#39;] = 13
&amp;gt;&amp;gt;&amp;gt; print p
{&amp;#39;price&amp;#39;:13}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The biggest difference from a traditional dictionary is that an Item by default
does not allow you to assign a value to a key that was not declared as a field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; p[&amp;#39;silly_walk&amp;#39;]=54
...

KeyError:&amp;#39;Product does not support field: silly_walk&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The advantage of defining classes for items is that it allows you to take
advantage of other features of the framework that works for these classes. For
example, &lt;a href="http://scrapy.readthedocs.org/en/latest/topics/feed-exports.html"&gt;you can use the feed exports
mechanism&lt;/a&gt; to
export the collected items to &lt;a href="http://en.wikipedia.org/wiki/JSON"&gt;JSON&lt;/a&gt;,
&lt;a href="http://en.wikipedia.org/wiki/Comma-separated_values"&gt;CSV&lt;/a&gt;,
&lt;a href="http://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt;, etc. You can also exploit the &lt;a href="http://scrapy.readthedocs.org/en/latest/topics/item-pipeline.html"&gt;item
pipeline&lt;/a&gt;
features, that allows you to plug-in other processing on top of the collected
items (things like validating the extracted data, removing duplicated items,
storing in a database, etc).&lt;/p&gt;
&lt;p&gt;Now, let's do some scraping!&lt;/p&gt;
&lt;p&gt;To do the scraping itself, i.e., extracting the data from the page, it's nice
if you know &lt;a href="http://en.wikipedia.org/wiki/XPath"&gt;XPath&lt;/a&gt;, a language created for
doing queries in XML content which is core to the &lt;a href="http://doc.scrapy.org/en/latest/topics/selectors.html"&gt;selectors mechanism of the
framework&lt;/a&gt;.  If you
don't know XPath, you can use &lt;a href="http://en.wikipedia.org/wiki/Cascading_Style_Sheets#Selector"&gt;CSS
selectors&lt;/a&gt; in
Scrapy just as well. We encourage you to learn some XPath nevertheless, because
it allows for expressions much more powerful than just CSS (in fact, the CSS
functionality in Scrapy works by converting your CSS expressions to XPath
expressions). We'll put some links to useful resources about these at the end
of the article.&lt;/p&gt;
&lt;p&gt;So, you can test the result of XPath or CSS expressions for a page using the
&lt;a href="http://doc.scrapy.org/en/latest/topics/shell.html"&gt;Scrapy shell&lt;/a&gt;.  Run the
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapy shell http://stackoverflow.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This command makes a request to the informed URL and opens a Python shell (or
IPython, if you have it installed) while making available some objects for you
to explore. The most important object is the variable &lt;code&gt;response&lt;/code&gt;, which contains
the response of the HTTP request and corresponds to theresponse argument
received by the callbacks.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img width="500" src="https://lh3.googleusercontent.com/kdW_fmpWTyloxYfesyGVQdB-rx54lM-r1LIptocDvhxd6TsJ3__w4mWXMHI6o8SXvaO3tN19HhIf9kZ7iwZTztRpdF8g6HoHNA6aer7E-mk8jlM63o8taJVdPSA9EooORg" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;url&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;http://stackoverflow.com&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;response&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;headers&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;Cache-Control&amp;#39;:&amp;#39;public,&lt;/span&gt; &lt;span class="err"&gt;no-cache=&amp;quot;Set-Cookie&amp;quot;,&lt;/span&gt; &lt;span class="err"&gt;max-age=49&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;Content-Type&amp;#39;:&amp;#39;text/html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;charset=utf-8&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;Date&amp;#39;:&amp;#39;Sat,&lt;/span&gt; &lt;span class="err"&gt;09&lt;/span&gt; &lt;span class="err"&gt;Aug&lt;/span&gt; &lt;span class="err"&gt;2014&lt;/span&gt; &lt;span class="err"&gt;03:47:31&lt;/span&gt; &lt;span class="err"&gt;GMT&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;Expires&amp;#39;:&amp;#39;Sat,&lt;/span&gt; &lt;span class="err"&gt;09&lt;/span&gt; &lt;span class="err"&gt;Aug&lt;/span&gt; &lt;span class="err"&gt;2014&lt;/span&gt; &lt;span class="err"&gt;03:48:20&lt;/span&gt; &lt;span class="err"&gt;GMT&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;Last-Modified&amp;#39;:&amp;#39;Sat,&lt;/span&gt; &lt;span class="err"&gt;09&lt;/span&gt; &lt;span class="err"&gt;Aug&lt;/span&gt; &lt;span class="err"&gt;2014&lt;/span&gt; &lt;span class="err"&gt;03:47:20&lt;/span&gt; &lt;span class="err"&gt;GMT&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;Set-Cookie&amp;#39;:&amp;#39;prov=5a8741f7-7ee3-4993-b723-72142d48696c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;domain=.stackoverflow.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;expires=Fri,&lt;/span&gt; &lt;span class="err"&gt;01-Jan-2055&lt;/span&gt; &lt;span class="err"&gt;00:00:00&lt;/span&gt; &lt;span class="err"&gt;GMT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;path=/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;HttpOnly&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;Vary&amp;#39;:&amp;#39;*&amp;#39;,&lt;/span&gt;
&lt;span class="err"&gt;&amp;#39;X-Frame-Options&amp;#39;:&amp;#39;SAMEORIGIN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can use the &lt;code&gt;xpath()&lt;/code&gt; and &lt;code&gt;css()&lt;/code&gt; methods of the &lt;code&gt;response&lt;/code&gt; object to query
the HTML content in the response:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; response.xpath(&amp;#39;//title&amp;#39;) # gets the title via XPath
[&amp;lt;Selector xpath=&amp;#39;//title&amp;#39; data=u&amp;#39; &amp;#39;&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; response.css(&amp;#39;title&amp;#39;)# gets the title via CSS
[&amp;lt;Selector xpath=u&amp;#39;descendant-or-self::title&amp;#39; data=u&amp;#39; &amp;#39;&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; len(response.css(&amp;#39;div&amp;#39;))# counts the number of div elements
1345
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result of calling one of these methods is a list object containing selector
objects resulting from the query. This list object has an &lt;code&gt;extract()&lt;/code&gt; method which
extracts the HTML content from all the selectors together.  The selectors, on
the other hand, besides having their own &lt;code&gt;extract()&lt;/code&gt; method to extract their
content, also have &lt;code&gt;xpath()&lt;/code&gt; and &lt;code&gt;css()&lt;/code&gt; methods that you can use to do new queries
in the scope of each selector.&lt;/p&gt;
&lt;p&gt;Take a look at the examples below in the same Scrapy shell, that will help
clearing up things a little bit.&lt;/p&gt;
&lt;p&gt;Extracts HTML content from &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; element, calling the &lt;code&gt;extract()&lt;/code&gt; method
from the selector list (note that the result is a Python list):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; response.xpath(&amp;#39;//title&amp;#39;).extract()
[u&amp;#39;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Stack Overflow&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Stores the first selector of the result in a variable and calls the &lt;code&gt;extract()&lt;/code&gt;
method on the selector (see how the result now is just a string):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; title_sel= response.xpath(&amp;#39;//title&amp;#39;)[0]
&amp;gt;&amp;gt;&amp;gt; title_sel.extract()
u&amp;#39;&lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Stack Overflow&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Applies the XPath expression &lt;code&gt;text()&lt;/code&gt; to get the text content of the selector,
and calls the extract() method from the resulting list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; title_sel.xpath(&amp;#39;text()&amp;#39;).extract()
[u&amp;#39;Stack Overflow&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Prints the extraction of the first selector resulting of the XPath expression
&lt;code&gt;text()&lt;/code&gt; applied to selector in variable &lt;code&gt;title_sel&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; print title_sel.xpath(&amp;#39;text()&amp;#39;)[0].extract()
StackOverflow
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Well, when you have a good grip on this way to work with selectors, the simple
way to extract an item is just to create an instance of the desired Item class
and fill the values obtained using this selectors API.&lt;/p&gt;
&lt;p&gt;Here, take a look at the code of a spider using this technique to get the most
frequently asked questions of&lt;a href="http://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;excerpt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StackoverflowTopQuestionsSpider&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;so-top-questions&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;questions_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://stackoverflow.com/questions&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;questions_url&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/tagged/&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;questions_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;?sort=frequent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;build_full_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;qsel&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#questions &amp;gt; div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;build_full_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;qsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.summary h3 &amp;gt; a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;@href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.summary h3 &amp;gt; a::text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a.post-tag::text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;it&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;excerpt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;qsel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;div.excerpt::text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the spider defines an Item class named &lt;code&gt;Question&lt;/code&gt;, and uses the
Selectors API to iterate through the HTML elements of the questions (obtained
with the CSS selector &lt;code&gt;#questions &amp;gt; div&lt;/code&gt;) and generating a Question object for
each one of these elements, filling all the fields (link, title, tags and
question excerpt).&lt;/p&gt;
&lt;p&gt;There are two interesting things worth noticing in the extraction done in the
&lt;code&gt;parse()&lt;/code&gt; callback: the first one is that we use a pseudo-selector &lt;code&gt;::text&lt;/code&gt; to
get the text content of the elements, avoiding the HTML tags. The second is how
we use the function
&lt;a href="https://docs.python.org/2/library/urlparse.html"&gt;urlparse.urljoin()&lt;/a&gt; to
combine the URL of the request with the content of thehref attribute, making
sure that the result of this will be a correct absolute URL.&lt;/p&gt;
&lt;p&gt;Put this code in a file named &lt;code&gt;top_asked_so_questions.py&lt;/code&gt; and run it using the
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider top_asked_so_questions.py -o questions.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything went well, Scrapy will show in the screen the scraped items and
also write a file namedquestions.json containing them. At the end of the
output, you should see some stats, including the item scraped count:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;2014-08-02 14:27:37-0300 [so-top-questions] INFO: Dumping Scrapy stats:
 {&amp;#39;downloader/request_bytes&amp;#39;: 242,
  &amp;#39;downloader/request_count&amp;#39;: 1,
  ...
  &amp;#39;item_scraped_count&amp;#39;: 50,
  &amp;#39;log_count/DEBUG&amp;#39;: 53,
  &amp;#39;log_count/INFO&amp;#39;: 8,
  ...
  &amp;#39;start_time&amp;#39;: datetime.datetime(2014, 8, 2, 17, 27, 36, 912002)}
2014-08-02 14:27:37-0300 [so-top-questions] INFO: Spider closed (finished)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you run this twice in a row, you need to remove the output file
&lt;code&gt;questions.json&lt;/code&gt; file before each run. This is because Scrapy by default
appends to a file instead of overwriting it, which ends up making the JSON file
unusable. This is done for historical reasons, it made sense for spiders which
used the JSON Lines format (the previous default), and may change in the
future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;center&gt;&lt;img width="500" src="https://lh5.googleusercontent.com/8wSeSQMfk_DBDrTpejqaBlAhoazIg--pdjDWfk5vcIhB504FSu78MEULRtnuYPN-0FVjuX23OWnqIEzf_j0YorWy42EQcTnUVKfqF9-UfbpSu-nuZ4iXB5m15WPhXqBLXw" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;h4&gt;Arachnoid arguments&lt;/h4&gt;
&lt;p&gt;You may have noticed that the class for this spider has a constructor
accepting an optional argument called tag.
We can specify a value for this argument for the spider to get the
frequently asked questions with the python tag, using the &lt;code&gt;-a&lt;/code&gt;
option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider top_asked_so_questions.py -o python-questions.json -a tag=python
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using this little trick you can write generic spiders, so that you just pass
some parameters and get a different result. For example, you may write one
spider for several sites that have the same HTML structure, making the URL of
the site a parameter. Or, a spider for a blog in which the parameters define a
time range of the posts and comments to extract.&lt;/p&gt;
&lt;h3&gt;Putting it all together&lt;/h3&gt;
&lt;p&gt;In the previous sections, you saw how to do web crawling with Scrapy,
navigating through the pages of a site using the mechanism of requests and
callbacks. You also saw how to use the &lt;a href="http://doc.scrapy.org/en/latest/topics/selectors.html"&gt;Selector
API&lt;/a&gt; to extract the
content of a page into items and execute the spider using the commandscrapy
runspider.&lt;/p&gt;
&lt;p&gt;Now, we shall put it all together in a spider that solves the problem we
presented in the introduction: let's scrape the latest "big questions" articles
from &lt;a href="http://mentalfloss.com/"&gt;mentalfloss.com&lt;/a&gt;, offering an option to inform
the category (&lt;a href="http://mentalfloss.com/big-questions/origins"&gt;Origins&lt;/a&gt;, &lt;a href="http://mentalfloss.com/big-questions/the-body"&gt;The
Body&lt;/a&gt;, &lt;a href="http://mentalfloss.com/big-questions/fact-check"&gt;Fact
Check&lt;/a&gt;, etc). This way, if you
just run the spider, it should scrape all the articles in the blog; if you pass
in a category, it should scrape only the articles of that subject.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Before writing a spider, it's useful to explore a little bit the
pages of the site using the browser's inspection capabilities and the scrapy
shell, so that you can see how the site is structured and you can also try a
few CSS or XPath expressions in the shell. There are also some browser
extensions that allow you to test XPath expressions directly in a page: &lt;a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=en"&gt;XPath
Helper&lt;/a&gt;
for Chrome and &lt;a href="https://addons.mozilla.org/en-US/firefox/addon/xpath-checker/"&gt;XPath
Checker&lt;/a&gt; for
Firefox. Discovering the best way to extract the content of a site using XPath
or CSS is more of an art than a science, therefore we won't try to explain much
here, but it's worthy telling you that you learn a lot after a little
experience.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Have a look at the final code of the spider:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scrapy&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Item&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MentalFlossArticles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Spider&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mentalfloss-articles&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;articles_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://mentalfloss.com/big-questions&amp;#39;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;articles_url&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;

        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_urls&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;articles_url&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Gets the page with the article list,&lt;/span&gt;
&lt;span class="sd"&gt;        find the article links and generates&lt;/span&gt;
&lt;span class="sd"&gt;        requests for each article page&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;article_links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xpath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;//header/hgroup/h1/a/@href&amp;quot;&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;article_links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;article_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;urlparse&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;scrapy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Request&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;article_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                 &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_article&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;extract_article&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Gets the article page and extract&lt;/span&gt;
&lt;span class="sd"&gt;        an item with the article data&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;css&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
        &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;h1.title &amp;gt; span::text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.date-display-single::text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;content&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#content-content p::text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

        &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;div.field-name-field-enhanced-authors&amp;quot;&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot; a::text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just like before, you can run the spider with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider mentalfloss.py -o articles-all.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And to get the articles from each section, you can use commands like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider mentalfloss.py -o articles-origins.json -a category=origins
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;scrapy runspider mentalfloss.py -o articles-fact-check.json -a category=fact-check
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code for this spider has a very similar structure to the previous one, with
its argument handling and everything.&lt;/p&gt;
&lt;p&gt;The main difference is that in this one, the first callback (the &lt;code&gt;parse()&lt;/code&gt; method)
generates other requests for the article pages, which are handled by the second
callback: the &lt;code&gt;extract_article()&lt;/code&gt; method, which scrapes the article data.&lt;/p&gt;
&lt;p&gt;The content extraction also does a little bit more work. We created a &lt;code&gt;css()&lt;/code&gt;
helper function to abbreviate calling &lt;code&gt;response.css(&amp;lt;selector&amp;gt;).extract()&lt;/code&gt; and
used that to get the result of our selectors to fill the Article item. Note
also how we take advantage of &lt;a href="https://docs.python.org/2/reference/lexical_analysis.html#string-literal-concatenation"&gt;Python's feature of concatenating literal
strings&lt;/a&gt;
on the CSS selector for the author field, to break it in two lines.&lt;/p&gt;
&lt;h3&gt;Final words&lt;/h3&gt;
&lt;p&gt;If you made until here, congratulations! Here is a trophy for you:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img width="500" src="https://lh3.googleusercontent.com/EboKX-uRyuikN3lI8voa529LP3W6OnHn3vjWi21fvisFEpbuPu-fPY9be1Z3PB_CxT991AL0SquUnypXp4-sbiMTdVY8hiVu_zrbUdFPVhu5BixW6Mu3LUE9Jbz37Jn8Iw" /&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Now that you have learned to write Scrapy spiders and therefore are enabled to
download the whole Internet to your home PC, try not to get banned by the
website hosts laying around! :)&lt;/p&gt;
&lt;p&gt;Visit the &lt;a href="http://doc.scrapy.org/"&gt;official documentation for Scrapy&lt;/a&gt;, there is
a lot of good stuff there, like &lt;a href="http://scrapy.readthedocs.org/en/latest/intro/tutorial.html"&gt;the tutorial teaching you how to create
complete Scrapy
projects&lt;/a&gt;,
&lt;a href="http://scrapy.readthedocs.org/en/latest/faq.html"&gt;frequently asked questions&lt;/a&gt;,
&lt;a href="http://scrapy.readthedocs.org/en/latest/topics/broad-crawls.html"&gt;tips for doing huge
crawls&lt;/a&gt;, &lt;a href="http://scrapy.readthedocs.org/en/latest/topics/debug.html"&gt;how
to debug a spider&lt;/a&gt;,
&lt;a href="http://scrapy.readthedocs.org/en/latest/topics/practices.html#avoiding-getting-banned"&gt;tips on how to avoid being
banned&lt;/a&gt;
and a lot more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATED:&lt;/strong&gt; removed &lt;code&gt;-t json&lt;/code&gt; from commands, unnecessary since Scrapy 0.24 (thanks, Mikhail!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATED:&lt;/strong&gt; added note about Scrapy default behavior of appending to output file (thanks again, Mikhail!)&lt;/p&gt;
&lt;h4&gt;Useful resources:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://doc.scrapy.org/en/latest/"&gt;Scrapy Official Documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/scrapy/scrapy/wiki"&gt;Scrapy Wiki with links to videos, slides, articles and related projects&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://groups.google.com/group/scrapy-users/"&gt;scrapy-users Google Group - mailing list&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://zvon.org/comp/r/tut-XPath_1.html"&gt;Nice XPath Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://blog.scrapinghub.com/2014/07/17/xpath-tips-from-the-web-scraping-trenches/"&gt;Some XPath tips&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://code.tutsplus.com/tutorials/the-30-css-selectors-you-must-memorize--net-16048"&gt;The 30 CSS selectors you need to memorize&lt;/a&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sat, 30 Aug 2014 19:29:00 -0300</pubDate><guid isPermaLink="false">tag:,2014-08-30:2014/08/30/web-scraping-with-scrapy---first-steps.html</guid></item><item><title>Steve Yegge's Rantings book</title><link>/2014/08/10/steve-yegges-rantings-book.html</link><description>&lt;p&gt;Those who know me well, know that I'm a bit of a &lt;a href="http://steve-yegge.blogspot.com/"&gt;Steve
Yegge&lt;/a&gt; fanboy. That's true, I love reading
Steve's mean jokes and I keep coming back to those long blog posts. That dude's
writing has been a great influence to me. I've even started to write long posts
myself, in a sort of cargo-cult-steve-yegge-wannabe behavior. I'm such a
fanboy. Steve would probably feel embarrassed for me.&lt;/p&gt;
&lt;p&gt;Anyway, I discovered a while ago that he has quietly released a book called &lt;a href="http://www.hyperink.com/A-Programmers-Rantings-On-Programminglanguage-Religions-Code-Philosophies-Google-Work-Culture-And-Other-Stuff-b40632A90DD"&gt;A
Programmer's Rantings: On Programming-Language Religions, Code Philosophies,
Google Work Culture and Other
Stuff&lt;/a&gt;,
which is a collection of some of his articles put together with a few notes
adding a bit more context to each article. It was published by
&lt;a href="http://hyperink.com/"&gt;HyperInk&lt;/a&gt;, which seems to be a cool company. I bought
the ebook from their website and it offered me to send as a gift to a few
friends, so it was a nice deal.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
  &lt;a href="http://www.hyperink.com/A-Programmers-Rantings-On-Programminglanguage-Religions-Code-Philosophies-Google-Work-Culture-And-Other-Stuff-b40632A90DD"&gt;&lt;img alt="Cover of Steve Yegge's Rantings book" src="http://3.bp.blogspot.com/-fsINtrFzTHs/U-f8-2QOj9I/AAAAAAAAAy4/7sWr2RZ8P8I/s1600/40632A90DD_thumb.jpg" title="A Programmer's Rantings: On Programming-Language Religions, Code Philosophies, Google Work Culture and Other Stuff" /&gt;&lt;/a&gt;&lt;a href="https://www.blogger.com/"&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;And the book is quite a journey. You get to read some of the first essays Steve
wrote when he was pretty unknown (just another bright young fellow at Amazon)
and also his latest rants posted on &lt;a href="https://plus.google.com/110981030061712822816/posts"&gt;Google
Plus&lt;/a&gt;, including the one
he made public accidentally and it ended up making him kind of famous outside
of the programming circles too.&lt;/p&gt;
&lt;p&gt;I enjoyed reading this book a lot, although I suppose it would be expected
for me say that, what with me being a fanboy and all. That being said, it's a
quick read and lot's of fun -- highly recommended! Although it amounts to more
than two hundred pages it still does not make half of the stuff on
&lt;a href="https://sites.google.com/site/steveyegge2/blog-rants"&gt;his&lt;/a&gt;
&lt;a href="http://steve-yegge.blogspot.com.br/"&gt;blogs&lt;/a&gt;.  So, if you like the book, you'll
probably want to check out the blogs.  Or vice-versa, whatever.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 10 Aug 2014 20:20:00 -0300</pubDate><guid isPermaLink="false">tag:,2014-08-10:2014/08/10/steve-yegges-rantings-book.html</guid></item><item><title>Tips on Performance and Monitoring of Java Applications</title><link>/2014/06/16/tips-on-performance-and-monitoring-of-java-applications.html</link><description>&lt;p&gt;I cleaned up my desk this weekend and ended up finding some notes I wrote down
some time ago when I attended a course about monitoring JBoss application
servers. I haven't been doing much related to Java Web development lately, but
I'm going to try to make a quick summary here because: 1) then I can safely
throw away the paper with the notes, and 2) I think some of the tips can still
be useful in the context of many long running JVM processes.&lt;/p&gt;
&lt;h3&gt;Memory and GC load&lt;/h3&gt;
&lt;p&gt;So, the most important thing to monitor in a long running JVM is arguably the
garbage collection stats. When some JVM is misbehaving, the first thing you
want to check is how much of the
&lt;a href="http://en.wikipedia.org/wiki/Java_virtual_machine#Heap"&gt;heap&lt;/a&gt; is being used
and how often the full GC is being called.&lt;/p&gt;
&lt;p&gt;One quick tip to reduce GC load is to set the initial heap size to the same
amount of the maximum heap size, namely, you should use the same value for the
&lt;code&gt;-Xms&lt;/code&gt; and &lt;code&gt;-Xmx&lt;/code&gt; JVM options. When you do this the JVM will allocate the
maximum space it will ever use, right from the the start. This way you avoid
memory reallocation for the heap and some GC calls, and can even sometimes
speedup the startup of an application, it is usually the first thing I do when
I install a Java desktop app like Eclipse or Intellij IDEA.&lt;/p&gt;
&lt;p&gt;There are
&lt;a href="http://www.cubrid.org/blog/dev-platform/understanding-java-garbage-collection/"&gt;some&lt;/a&gt;
&lt;a href="http://www.cubrid.org/blog/dev-platform/how-to-monitor-java-garbage-collection/"&gt;nice&lt;/a&gt;
&lt;a href="http://www.cubrid.org/blog/textyle/428187"&gt;articles&lt;/a&gt; about garbage collection
in Java available, it's a fairly big topic and I don't know much beyond the
basics to survive. You definitely want to know that full GC stops are bad and,
although you can't avoid them completely, you want to keep them to a minimum so
your application won't keep slogging.&lt;/p&gt;
&lt;p&gt;Full GC stops happen when the area of memory reserved to objects that are "old"
(namely, objects that have been around for most of the time and therefore are
probably going to be around in the future) reaches its size limit. That means
that whatever application code was running will be stopped and only the GC will
execute for a moment, until some space is freed and your application code can
execute again (&lt;a href="https://plumbr.eu/blog/understanding-java-lang-outofmemoryerror"&gt;or you'll be the misfortunate heir to
anOutOfMemoryError&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As it happens, tuning the garbage collection is very specific to the type of
application you're running. The JVM can use different garbage collection
algorithms, and you may want to twiddle with them a little bit to see what
works best. For your typical Java Web application, it's usually better to run
several machines with moderate memory in a cluster than run all in one big
machine with several GiB of memory due to how the GC works. However, your
mileage may vary, so your best bet is to measure and monitor what's happening
with the heap.    &lt;/p&gt;
&lt;h3&gt;The number of threads vs backlog tradeoff&lt;/h3&gt;
&lt;p&gt;Now, in the case of Web applications, the second most important thing you want
to watch is the busy threads count. Usually, it represents the number of
requests being handled at a given moment. There is an useful tradeoff to be
aware of that has to do with how these things happen inside the Web container,
so bear with me for a little bit with the inaccurate description.&lt;/p&gt;
&lt;p&gt;Whenever your application server (or whatever it is you're using to deploy your
Java Web app) gets a new request, it tries to respond as soon as possible
creating a new thread to handle it, right? Then, when the configured maximum
number of threads is reached, all the new requests are kept on a queue
(sometimes called backlog or acceptCount), waiting until one of the current
busy threads finishes so that the server can then get the next request from the
queue and use another thread to handle it.&lt;/p&gt;
&lt;p&gt;Well, okay, it's not &lt;em&gt;reaaally&lt;/em&gt; like that, I think what
really happens is that each new request always goes to the backlog queue and
there are some threads responsible for request processing that keep getting
work from the backlog, but I thought it would be a bit easier to explain that
way.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;img width="500" alt="I think my Tomcat can handle more work... Now, should I increase maxThreads or the backlog?"
src="http://3.bp.blogspot.com/-1Op2WBzfGno/U5928NTAtqI/AAAAAAAAAwQ/d1lxWxNcmHY/s1600/doubt-maxThreads_vs_backlog.jpg"/&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;But here is the little secret: it's usually much easier for the operating
system to manage queues than attend threads. So, often enough it's better to
let the queue get big than to increase the maximum number of threads for your
system to handle. Threads are often competing for resources, increasing its
number may even hurt performance instead of improve it, specially when you have
a peak load.&lt;/p&gt;
&lt;p&gt;Of course the best thing to do will depend on the application you are serving
and the load patterns in your server, so you need to measure it and experiment
for a bit to figure out what numbers work best for you.&lt;/p&gt;
&lt;p&gt;So, if there is any way to wrap-up all this, it would be: measure it, measure
it, measure it! Different types of long-running JVM applications will have
different effects on your system, so it's important to have data to make good
decisions. Measuring the heap stats to see how the GC is doing and the number
of busy threads to see the patterns in request handling (in the case of Web
applications) is a good start.&lt;/p&gt;
&lt;p&gt;Thanks for the review, José Ricardo and Valdir Stumm!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.flickr.com/photos/24141546@N06/8097784516/in/photostream/"&gt;Image credits (CCBY)&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Mon, 16 Jun 2014 20:06:00 -0300</pubDate><guid isPermaLink="false">tag:,2014-06-16:2014/06/16/tips-on-performance-and-monitoring-of-java-applications.html</guid></item><item><title>So, here is a story</title><link>/2014/06/13/so-here-is-a-story.html</link><description>&lt;p&gt;Soon after graduating, I went to work as a software developer for a big public
company in Brazil. This company is responsible for a huge part of the country's
IT infrastructure, and they keep trying to build a reputation of being
innovative and pro open source, the kind of thing that excited me a lot. I
thought: &lt;em&gt;"They
promote Linux and free software... Heck, their website is built with Plone.
I'll get to do cool stuff in Python all day!"&lt;/em&gt; I
know it's naive, but that was my thinking back then.&lt;/p&gt;
&lt;p&gt;So, initially I thought I had won the lottery. But that feeling didn't take
long to dissipate. What I ended up finding was NOT a place where engineers are
working together on great projects, embracing free software and releasing good
stuff to the world.&lt;/p&gt;
&lt;p&gt;That company is weird. And the biggest problem for me was: I was young and
inexperienced, a child basically, surrounded mostly by other children.  You
see, most developers there are pretty smart people. But they don't have much
say in the decisions about the software development, arguably the thing they
know best.&lt;/p&gt;
&lt;p&gt;The software development department is run mostly by traditional managers who
don't seem to understand how software development actually works. It seems that
it has been on deficit for quite some time, though nobody cares too much --
hey, the taxpayers are still funding it.&lt;/p&gt;
&lt;p&gt;So, those managers wanted the Big Ole' Software Factory. You know, those
imaginary places with human machinery resembling an assembly line that if you
set up just right and feed it with the right input, you'll get good software on
the other end.&lt;/p&gt;
&lt;p&gt;Well, what they've got is a bunch of talented people managed in a very
paternalistic style. And that leads to painful frustration for the developers
who, being treated like children, end up behaving a lot like children (myself
included, I am ashamed to say).&lt;/p&gt;
&lt;p&gt;I don't need to tell you that they don't produce great software. Well, when
they get to ship something, that is. But I'm not talking about the quality of
their software right now.&lt;/p&gt;
&lt;p&gt;Right now, my point is: this kind of place is not a good place for someone
trying to grow into a good, mature engineer.&lt;/p&gt;
&lt;p&gt;You need a healthy environment to build up maturity and excellence. And an
environment is not healthy if you are encouraged to simply follow orders and
maintain the status quo. Because you won't learn to make better decisions if
you are not supposed to be trusted to decide very basic things, like what
software to install in your development machine.&lt;/p&gt;
&lt;p&gt;People at that company end up having serious trust issues with their bosses and
colleagues because of the unhealthy environment. The funny thing is, I think
most people are there because they like the job security, but they don't get to
feel really safe much. At least, not the majority of the people I knew there.
They are often afraid that "someone is out to get them".&lt;/p&gt;
&lt;p&gt;I wish I had read the wonderful &lt;a href="http://shop.oreilly.com/product/0636920018025.do"&gt;Team Geek
book&lt;/a&gt; back then, and I wish
everybody there would read that book now and give it some serious thought. That
would bring some light to several of the issues they have there, and maybe the
place would be better than it is.&lt;/p&gt;
&lt;p&gt;I remember getting there full of energy, eager to learn and do stuff.
Somewhere along the way, I kind of lost the will. I remember thinking: "Okay, I
give up, I don't know how to deal with this. I'll remain a mediocre performer,
as that seems what they want around here. I will focus on honing my guitar
skills, so that I won't want to kill myself."&lt;/p&gt;
&lt;p&gt;Well, I moved on to greener pastures some time ago, though not before another
experience at another not-so-great government institution. And although I'm not
young anymore, I think I've managed to stay curious and I'm still eager to
learn and do stuff. That's the important thing, right?&lt;/p&gt;
&lt;p&gt;But sometimes, looking back at how much I have improved after leaving that
place, I can't help but wonder what if I had never gone there in the first
place? Would I be able to enjoy working, learning and growing as I do now? Or
would I be like so many others out there, whining and thinking I would be
happier enjoying the job security of a public employee?&lt;/p&gt;
&lt;p&gt;I guess I'll never know. It's probably better thinking it would be the latter,
though. That way I'll have no regrets.    Thanks to my friends who reviewed
this.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Fri, 13 Jun 2014 14:00:00 -0300</pubDate><guid isPermaLink="false">tag:,2014-06-13:2014/06/13/so-here-is-a-story.html</guid></item><item><title>Failing to finish a book</title><link>/2014/05/31/failing-to-finish-a-book.html</link><description>&lt;p&gt;Okay, here is a book I've been trying to read for almost two months already and
barely get to the half of it. &lt;a href="http://shop.oreilly.com/product/0636920023784.do"&gt;Python for Data
Analysis&lt;/a&gt; has left me with
mixed feelings. Of all the O'Reilly books I've got until now, this is probably
the one in worst shape.&lt;/p&gt;
&lt;p&gt;It seems that the author (Wes McKinney, the author of the Pandas library -- a
great guy, no doubt, and that obviously possesses an extensive technical
knowledge) did not spend much time trying to get the book more digestible. The
Pandas library is great, kudos to him! The book however seems to be a pretty
half-assed work.&lt;/p&gt;
&lt;p&gt;I was unsure if my difficulty reading it was mostly my own failure. But then I
talked to some friends who also read some of it, and they agreed that the book
is a very dry read.&lt;/p&gt;
&lt;p&gt;Maybe I am trying to read the book in a suboptimal way (from cover to cover),
but the effort needed to grasp each little subject is making me cringe.&lt;/p&gt;
&lt;p&gt;I buy books about technologies because I want a &lt;em&gt;better&lt;/em&gt; way to learn them than
having to go through all the documentation.  However, reading this book feels
much harder than following through the online documentation of the tools it
documents.&lt;/p&gt;
&lt;p&gt;Now, the online docs for Pandas have syntax highlight, hyperlinking and even a
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/10min.html"&gt;10 minute tutorial&lt;/a&gt;.
Maybe it's more merit for the online docs than demerit for the book, I'm not
sure.&lt;/p&gt;
&lt;p&gt;It seems that the book content was written as a bunch of IPython notebooks, and
then everything was later concatenated into a big document in an order that
sort of made sense (and losing the good looks). Its examples are a bunch of
throwaway code, and are not presented in a way that the reader can care about
-- and believe me, I've been trying.&lt;/p&gt;
&lt;p&gt;I guess when you are an expert in a subject, it can be hard to remember how it
is to be a beginner again. However, that's precisely the exercise that would
render a great book. I urge all tech authors to read and apply the principles
explained in the &lt;a href="http://headrush.typepad.com/creating_passionate_users/2006/01/crash_course_in.html"&gt;Crash Course in Learning
Theory&lt;/a&gt;.
This would surely render better books for all of us.&lt;/p&gt;
&lt;p&gt;The book is not all bad. I've certainly learned something from it. The effort
to read all of it is just not worth it, though. For anyone who wants to learn
more about NumPy, Scipy and Pandas, my recommendation is to use the online
documentation. Thank you Zé Ricardo for revising this text.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sat, 31 May 2014 23:08:00 -0300</pubDate><guid isPermaLink="false">tag:,2014-05-31:2014/05/31/failing-to-finish-a-book.html</guid></item><item><title>Programando Erlang - 1 de Any</title><link>/2014/04/05/programando-erlang---1-de-any.html</link><description>&lt;p&gt;Na virada do ano, uma das minhas resoluções para 2014 foi a de que este ano
aprenderia &lt;a href="http://www.erlang.org/"&gt;Erlang&lt;/a&gt;.  Eu queria brincar com alguma
linguagem que usasse ideias diferentes das que uso no trabalho e que me
ensinasse mais do que simplesmente outro jeito de escrever os programas que já
sei.&lt;/p&gt;
&lt;p&gt;Como eu gostei de ler as ideias do &lt;a href="http://joearms.github.io/"&gt;Joe Armstrong&lt;/a&gt;
no livro &lt;a href="http://www.codersatwork.com/"&gt;Coders at Work&lt;/a&gt;, e as &lt;a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)"&gt;descrições de
Erlang&lt;/a&gt; na Internet
me deixaram curioso, resolvi que em 2014 eu iria aprender Erlang. E assim,
decidi por comprar logo o livro &lt;a href="http://pragprog.com/book/jaerlang2/programming-erlang"&gt;Programming
Erlang&lt;/a&gt;, escrito pelo
próprio Joe, e tentar aprender por ele.&lt;/p&gt;
&lt;p&gt;Ainda não terminei de ler o livro, estou curtindo o aprendizado, acho que foi
uma boa escolha de linguagem “extra” pra aprender. Mas como o livro fala sobre
bastante coisa, resolvi escrever alguma coisa logo porque se deixar para
escrever sobre o livro inteiro a tarefa vai ficar grande demais e eu vou fugir
correndo com medo dela.&lt;/p&gt;
&lt;p&gt;Então...  Erlang!&lt;/p&gt;
&lt;p&gt;É uma linguagem divertida. =)&lt;/p&gt;
&lt;p&gt;Erlang é uma linguagem funcional com tipagem dinâmica, de propósito geral,
focada em facilitar o desenvolvimento de programas concorrentes e que roda em
uma máquina virtual própria (também chamada
&lt;a href="http://www.erlang-factory.com/upload/presentations/708/HitchhikersTouroftheBEAM.pdf"&gt;BEAM&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Mas Erlang é mais do que uma linguagem, podemos dizer que Erlang é todo um
ambiente diferente. A VM de Erlang lembra um sistema operacional em muitas
formas, possuindo seu próprio shell, seu próprio gerenciador de processos, seu
esquema de atualização sem precisar parar nenhum processo e seus &lt;a href="http://pt.wikipedia.org/wiki/Comunica%C3%A7%C3%A3o_entre_processos"&gt;mecanismos
disponíveis para comunicação entre
processos&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Um processo Erlang não é nem um processo do sistema operacional nem uma thread:
é um &lt;a href="http://en.wikipedia.org/wiki/Erlang_(programming_language)#Concurrency_and_distribution_orientation"&gt;processo
leve&lt;/a&gt;,
muito mais leve que threads. A criação de um novo processo é praticamente
gratuita -- pode-se dizer que criar um novo processo em Erlang é tão comum e
tão sossegado quanto instanciar um novo objeto em Java.&lt;/p&gt;
&lt;p&gt;Em Erlang, é idiomático encapsular funcionalidade em processos, e é comum um
sistema ter milhares desses processos concorrentes, cada um com sua
responsabilidade. Assim, esses processos encapsulando funcionalidades são
análogos a&lt;a href="http://en.wikipedia.org/wiki/Service_(systems_architecture)"&gt;serviços em uma arquitetura orientada a
serviços&lt;/a&gt;, só que
em Erlang eles aparecem numa forma bem natural na linguagem e mais integrada ao
ambiente.&lt;/p&gt;
&lt;p&gt;Aqui, permita-me apresentar algumas coisinhas da linguagem pra você, bem
rapidão. Para acompanhar, &lt;a href="http://www.erlang.org/download.html"&gt;instale Erlang&lt;/a&gt;
(no Ubuntu: &lt;code&gt;sudo apt-get install erlang&lt;/code&gt;).&lt;/p&gt;
&lt;h3&gt;Super-quick-little-taste-of-Erlang&lt;/h3&gt;
&lt;p&gt;Veja o seguinte esqueleto de um programa concorrente em Erlang:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://2.bp.blogspot.com/-HmS5hqh97EA/U0D7Y5iIeII/AAAAAAAAAtk/SVLNHGSIVHk/s1600/erlang-loop-menor.png"&gt;&lt;img alt="" src="http://2.bp.blogspot.com/-HmS5hqh97EA/U0D7Y5iIeII/AAAAAAAAAtk/SVLNHGSIVHk/s1600/erlang-loop-menor.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Note a recursão na função &lt;code&gt;loop&lt;/code&gt;: é assim que se faz processos iterativos
(loops) em Erlang, que não tem sintaxe especial para isso. O compilador
implementa a otimização de “&lt;a href="http://pt.wikipedia.org/wiki/Recursividade_(ci%C3%AAncia_da_computa%C3%A7%C3%A3o)#Fun.C3.A7.C3.B5es_recursivas_em_cauda"&gt;recursão de
cauda&lt;/a&gt;”
(&lt;a href="http://en.wikipedia.org/wiki/Tail_call"&gt;tail recursion&lt;/a&gt;) para fazer uma
função escrita de maneira recursiva executar de forma iterativa  -- isto é, sem
re-chamar a função aumentando a&lt;a href="http://pt.wikipedia.org/wiki/Pilha_de_chamada"&gt;pilha de
chamada&lt;/a&gt; (&lt;a href="http://en.wikipedia.org/wiki/Call_stack"&gt;call
stack&lt;/a&gt;).  &lt;/p&gt;
&lt;p&gt;Você pode testar esse código colocando-o em um arquivo &lt;code&gt;esqueleto.erl&lt;/code&gt; e chamá-lo
do shell Erlang, conforme a sessão abaixo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; $ erl
 Erlang R16B01 (erts-5.10.2) [source] [64-bit] [smp:4:4] [async-threads:10] [kernel-poll:false]


 Eshell V5.10.2  (abort with ^G)
 1&amp;gt; c(esqueleto).
 {ok,esqueleto}
 2&amp;gt; Pid = esqueleto:start().
 &amp;lt;0.41.0&amp;gt;
 3&amp;gt; Pid ! &amp;quot;alo!&amp;quot;.
 Received: &amp;quot;alo!&amp;quot;
 &amp;quot;alo!&amp;quot;
 4&amp;gt; Pid ! 1234.
 Received: 1234
 1234
 5&amp;gt; Pid ! {teste, com, uma, tupla, 123, &amp;quot;ola&amp;quot;}.
 Received: {teste,com,uma,tupla,123,&amp;quot;ola&amp;quot;}
 {teste,com,uma,tupla,123,&amp;quot;ola&amp;quot;}
 6&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note os pontos finais no fim de cada comando: o comando não roda se você
esquecer deles. Em Erlang, o ponto &lt;code&gt;.&lt;/code&gt; separa comandos e declarações, o
ponto-e-vírgula &lt;code&gt;;&lt;/code&gt; separacláusulas, e a vírgula &lt;code&gt;,&lt;/code&gt; separa expressões.&lt;/p&gt;
&lt;p&gt;A primeira linha, &lt;code&gt;c(esqueleto).&lt;/code&gt;  manda compilar o módulo no arquivo
&lt;code&gt;esqueleto.erl&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Na segunda linha, &lt;code&gt;Pid = esqueleto:start().&lt;/code&gt; aciona a função &lt;code&gt;start()&lt;/code&gt; do módulo
&lt;code&gt;esqueleto&lt;/code&gt;, que vai gerar um novo processo e retornar o identificador do
processo (em inglês, process identifier), que armazenamos na variável &lt;code&gt;Pid&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;A seguir, na terceira linha usamos o comando!  para envio de mensagens em
Erlang, enviando a mensagem“alo!” para o processo criado na linha anterior,
identificado porPid.  O comando &lt;code&gt;receive&lt;/code&gt; da função &lt;code&gt;loop()&lt;/code&gt;  vai receber a
mensagem e executar o código que imprime a mensagem na tela. A mensagem aparece
repetida na tela porque o retorno do comando de envio &lt;code&gt;Pid ! Mensagem&lt;/code&gt; é a
mensagem enviada, e o shell sempre imprime o retorno do último comando
executado.&lt;/p&gt;
&lt;p&gt;As linhas seguintes apenas repetem o mesmo feito da linha anterior, com outras
mensagens diferentes (um inteiro e uma tupla contendo átomos, inteiros e
strings).&lt;/p&gt;
&lt;p&gt;O comando &lt;code&gt;receive&lt;/code&gt;  tem algumas habilidades especiais: além de bloquear a
execução do código até o processo receber uma mensagem (que também pode ter um
timeout  definido), ele pode selecionar o bloco de código a ser executado
dependendo da forma ou conteúdo da mensagem, com o mecanismo chamado de
&lt;a href="http://en.wikipedia.org/wiki/Pattern_matching"&gt;pattern matching&lt;/a&gt; (ou,
&lt;a href="http://pt.wikipedia.org/wiki/Casamento_de_padr%C3%B5es"&gt;casamento de
padrões&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;Por exemplo, usando pattern matching, podemos alterar o comando  &lt;code&gt;receive&lt;/code&gt; da
função  &lt;code&gt;loop()&lt;/code&gt;   para executar um código diferente caso receba a mensagem
&lt;code&gt;"alo!"&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;loop() -&amp;gt;
    receive
        &amp;quot;alo!&amp;quot; -&amp;gt;
            io:format(&amp;quot;Alooooow, galerinha da paaishhh!&amp;quot;),
            loop();
        Any -&amp;gt;
            io:format(&amp;quot;Received: ~p~n&amp;quot;, [Any]),
            loop()
    end.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Se você repetir os passos anteriores com esse novo código, receberá uma
resposta mais animada quando enviar a mensagem &lt;code&gt;"alo!"&lt;/code&gt;. =)&lt;/p&gt;
&lt;p&gt;Nesse exemplo, o padrão casado foi o conteúdo da mensagem, isto é, a string
&lt;code&gt;"alo!"&lt;/code&gt;. Mas o mecanismo permite fazer vários tipos de verificações: você
pode, por exemplo, verificar se a mensagem é um número ou uma tupla, se é uma
tupla contendo um determinado elemento, se é uma lista com tantos elementos,
etc.&lt;/p&gt;
&lt;p&gt;Quando alguém mais acostumado ao paradigma imperativo se depara com a ideia de
pattern matching (que existe em outras linguagens além de Erlang), usualmente
acha útil &lt;a href="http://stackoverflow.com/questions/2502354/what-is-pattern-matching-in-functional-languages"&gt;pensar nele como um "switch-case em
esteróides"&lt;/a&gt;,
uma espécie de Super Estrutura Condicional.&lt;/p&gt;
&lt;p&gt;Em Erlang, todavia,pattern matching (ou casamento de padrões) aparece em mais
do que estruturas condicionais.&lt;/p&gt;
&lt;p&gt;De fato, na expressão:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;X = 1.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;o &lt;code&gt;=&lt;/code&gt; (igual) é um acionamento do operador depattern matching de Erlang --
diferente de outras linguagens em que o igual é um operador de
&lt;a href="http://pt.wikipedia.org/wiki/Atribui%C3%A7%C3%A3o_(computa%C3%A7%C3%A3o)"&gt;atribuição&lt;/a&gt;.
Erlang não tem operador atribuição, que usualmente permite definir e redefinir
o conteúdo de variáveis.&lt;/p&gt;
&lt;p&gt;O que acontece aqui é que o &lt;a href="http://www.erlang.org/doc/reference_manual/patterns.html"&gt;operador de pattern
matching&lt;/a&gt; liga um
valor a uma variável quando esta ainda não tem nenhum valor associado (isto é,
quando se trata de uma &lt;a href="http://pt.wikipedia.org/wiki/Vari%C3%A1veis_livres_e_ligadas"&gt;variável
livre&lt;/a&gt;, ou
&lt;em&gt;unbound variable&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Na próxima vez que a variável for referenciada, ela terá o valor "casado"
(matched) anteriormente, veja:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1&amp;gt; A.
* 1: variable &amp;#39;A&amp;#39; is unbound
2&amp;gt; A=&amp;quot;oi&amp;quot;.
&amp;quot;oi&amp;quot;
3&amp;gt; A.
&amp;quot;oi&amp;quot;
4&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Uma vez ligada, a variável só casará com o valor original, e nunca mais com
outro. Caso tente casar a variável com outro valor (pensando que funcionaria
como atribuição), você obterá um erro avisando que falhou o casamento do
padrão:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;4&amp;gt; A = &amp;quot;alô&amp;quot;. 
** exception error: no match of right hand side value &amp;quot;alô&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Isto porque em Erlang, as variáveis são imutáveis para o contexto local.  Outra
forma de dizer é: em Erlang, as variáveis são de atribuição única (single
assignment variables).  Uma vez atribuído um valor a uma variável, você não
pode alterá-lo -- como demonstrei acima.&lt;/p&gt;
&lt;p&gt;Isto parece estranho no começo, para quem está acostumado com o paradigma
imperativo. Pensando bem, é a mesma estranheza que a gente sente quando aprende
a programar e é exposto a variáveis e atribuição pela primeira vez (“como
assim, x = x + 1?).  Faz mais sentido pensar nas variáveis de Erlang como as
variáveis da Matemática, em que o valor de um nome é sempre o mesmo.”&lt;/p&gt;
&lt;p&gt;A imutabilidade de variáveis tem como consequência algumas coisas
interessantes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;força você a criar novas variáveis em algumas situações, mesmo que esteja com
  pouca criatividade para dar um nome decente (no livro mesmo tem alguns
  exemplos com &lt;code&gt;Word1&lt;/code&gt;, &lt;code&gt;Word2&lt;/code&gt; -- o que é meio feio)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;evita alguns tipos debugs e simplifica a depuração, pois aumenta a
  previsibilidade da execução do código (isto é, você pode confiar que o valor
  de uma variável não vai mudar)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;facilita a escrita de programas concorrentes e permite que sejam rodados em
  paralelo, pois evita uma cacetada de problemas de memória compartilhada&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E esta última consequência compensa as dificuldades de dar nomes às variáveis.
Porque escrever programas multi-thread é difícil de fazer direito (você precisa
se preocupar com
&lt;a href="http://en.wikipedia.org/wiki/Synchronization_(computer_science)"&gt;sincronização&lt;/a&gt;
de processos e de memória), e o jeito Erlang de escrever programas concorrentes
que se comunicam via envio de mensagens (o &lt;a href="http://c2.com/cgi/wiki?ActorsModel"&gt;modelo de
atores&lt;/a&gt;) simplifica as coisas, de forma que
os programas são sempre paralelizáveis.&lt;/p&gt;
&lt;p&gt;Isso faz com que aplicações escritas em Erlang escalem mais fácil do que
aplicações escritas em outras linguagens. Claro que vários problemas de
escalabilidade se manterão, principalmente os relacionados a hardware e
infraestrutura, mas problemas de software tendem a ser resolvidos mais fácil
com Erlang.&lt;/p&gt;
&lt;p&gt;De fato, Erlang vem de fábrica com mecanismos de clusterização, e você pode
facilmente iniciar nós de um cluster em algumas máquinas e disparar chamadas
remotas de um nó para outro.&lt;/p&gt;
&lt;p&gt;Para um exemplo rápido, inicie um nó do cluster em um terminal, dando um nome:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ erl -sname lennon@localhost
Erlang R16B01 &lt;span class="o"&gt;(&lt;/span&gt;erts-5.10.2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;source&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt;-bit&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;smp:4:4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;async-threads:10&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;kernel-poll:false&lt;span class="o"&gt;]&lt;/span&gt;


Eshell V5.10.2  &lt;span class="o"&gt;(&lt;/span&gt;abort with ^G&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;lennon@localhost&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Em outro terminal, inicie outro nó e faça uma chamada remota ao nó anterior:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ erl -sname mccartney@localhost
Erlang R16B01 &lt;span class="o"&gt;(&lt;/span&gt;erts-5.10.2&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;source&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;64&lt;/span&gt;-bit&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;smp:4:4&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;async-threads:10&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;kernel-poll:false&lt;span class="o"&gt;]&lt;/span&gt;


Eshell V5.10.2  &lt;span class="o"&gt;(&lt;/span&gt;abort with ^G&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;mccartney@localhost&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&amp;gt; rpc:call&lt;span class="o"&gt;(&lt;/span&gt;lennon@localhost, file, list_dir, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;.
&lt;span class="o"&gt;{&lt;/span&gt;ok,&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;var&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;tmp&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;mnt&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;boot&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;lib32&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;vmlinuz&amp;quot;&lt;/span&gt;,
     &lt;span class="s2"&gt;&amp;quot;proc&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;media&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;bin&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;lib64&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;sys&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;opt&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;sbin&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;srv&amp;quot;&lt;/span&gt;,
     &lt;span class="s2"&gt;&amp;quot;root&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;usr&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;initrd.img&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;lost+found&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;cdrom&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;home&amp;quot;&lt;/span&gt;,
     &lt;span class="s2"&gt;&amp;quot;vmlinuz.old&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;run&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;etc&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;initrd.img.old&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]}&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;mccartney@localhost&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O argumento &lt;code&gt;-sname&lt;/code&gt; faz com que Erlang inicie um nó com o nome passado (note
como o nome do nó é mostrado no prompt). No comando que executamos no segundo
nó (&lt;code&gt;mccartney@localhost&lt;/code&gt;) usamos a função &lt;a href="http://erlang.org/doc/man/rpc.html"&gt;call do módulo
&lt;code&gt;rpc&lt;/code&gt;&lt;/a&gt; para acionar uma função remotamente
em outro nó e obter o resultado -- neste caso, a função &lt;code&gt;os:listdir("/")&lt;/code&gt; para
retornar a lista de arquivos do diretório raiz.&lt;/p&gt;
&lt;p&gt;E tudo com código da distribuição padrão. (Try that in Java, biátch!)&lt;/p&gt;
&lt;p&gt;Bom, tentei mostrar algumas coisas interessantes da linguagem aqui, mas Erlang
tem muito a oferecer ainda. Ela tem outros &lt;a href="http://www.erlang.org/doc/reference_manual/data_types.html"&gt;tipos de dados
interessantes&lt;/a&gt;
(átomos,
&lt;a href="http://www.erlang.org/doc/efficiency_guide/binaryhandling.html"&gt;binaries&lt;/a&gt;,
tuplas, &lt;a href="http://www.erlang.org/doc/reference_manual/records.html"&gt;records&lt;/a&gt;, e
na &lt;a href="http://www.erlang.org/news/67"&gt;versão R17&lt;/a&gt; terá
&lt;a href="http://www.erlang.org/eeps/eep-0043.html"&gt;maps&lt;/a&gt;), um &lt;a href="http://www.erlang.org/doc/reference_manual/ports.html"&gt;mecanismo próprio de
comunicação com outros processos do sistema
operacional&lt;/a&gt;, permite a
&lt;a href="http://www.erlang.org/doc/reference_manual/typespec.html"&gt;especificação opcional de tipos para
funções&lt;/a&gt;, um &lt;a href="http://www.erlang.org/doc/man/mnesia.html"&gt;banco
de dados para aplicações
distribuídas&lt;/a&gt;, vem com ferramentas
de fábrica para análise estática de código, depuração e profiling e com um
&lt;a href="http://learnyousomeerlang.com/what-is-otp"&gt;conjunto de bibliotecas e funções para aplicações tolerante a falhas e
distribuídas&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Só tem dois problemas de usabilidade que me incomodam um pouco:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nem todos os comandos ou exemplos de código funcionam no shell. Algumas
  funcionalidades só estão disponíveis no shell, e outras apenas em módulos
  compilados (&lt;a href="http://stackoverflow.com/questions/2065990/defining-erlang-functions-in-the-shell"&gt;criar funções no
  shell&lt;/a&gt;,
  por exemplo). Isso é uma espécie de “bug conhecido”: &lt;a href="http://joearms.github.io/2013/05/31/a-week-with-elixir.html"&gt;Joe Armstrong, o criador
  da linguagem, conta que seus cabelos embranqueceram de tanto explicar por que
  a implementação ficou desse
  jeito&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;O shell não tem histórico persistente, e não suporta atalhos comuns em
  aplicações da linha de comando que usam a &lt;a href="http://en.wikipedia.org/wiki/GNU_Readline"&gt;GNU
  Readline&lt;/a&gt;.  Parece que o esquema
  de IO do shell Erlang é meio complicado de manter -- no GitHub tem &lt;a href="https://github.com/ferd/erlang-history"&gt;um
  projeto que adiciona um histórico persistente
  básico&lt;/a&gt;, mas o FAQ não é muito
  encorajador.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;O resto é fantástico. =)&lt;/p&gt;
&lt;p&gt;Caso você tenha ficado curioso, pode querer conferir o livro &lt;a href="http://learnyousomeerlang.com/"&gt;Learn You Some
Erlang&lt;/a&gt; -- não li, mas já tirei algumas dúvidas
nele caindo de buscas do Google e pareceu muito bom. Have a nice journey!  :)&lt;/p&gt;
&lt;p&gt;Valeu pela revisão, Fredi e Denise.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sat, 05 Apr 2014 23:35:00 -0300</pubDate><guid isPermaLink="false">tag:,2014-04-05:2014/04/05/programando-erlang---1-de-any.html</guid></item><item><title>Trabalho Eficaz com Código Legado</title><link>/2014/01/26/trabalho-eficaz-com-codigo-legado.html</link><description>&lt;p&gt;&lt;a href="http://www.grupoa.com.br/livros/engenharia-de-software-e-metodos-ageis/trabalho-eficaz-com-codigo-legado/9788582600320" title="Página do livro na editora brasileira"&gt;Trabalho Eficaz com Código
Legado&lt;/a&gt; é o título em português do famoso
livro sobre código legado (título original: &lt;em&gt;&lt;a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"&gt;Working Effectively with Legacy
Code&lt;/a&gt;&lt;/em&gt;)
escrito por &lt;a href="https://twitter.com/mfeathers"&gt;Michael Feathers&lt;/a&gt;, um &lt;a href="http://www.objectmentor.com/omTeam/feathers_m.html"&gt;consultor
muito experiente e reconhecido na comunidade
Agile/XP&lt;/a&gt;. Acabei de ler a
versão traduzida que um amigo emprestou, e a tradução está bem decente -- bem
diferente da &lt;a href="http://eljunior.wordpress.com/2013/01/15/aventuras-com-java-ee/" title="Aventuras apresentando Java EE a mim mesmo"&gt;última vez que li um livro técnico em
português&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.grupoa.com.br/livros/engenharia-de-software-e-metodos-ageis/trabalho-eficaz-com-codigo-legado/9788582600320"&gt;&lt;img alt="Capa do
livro" src="http://eljunior.files.wordpress.com/2014/01/trabalho_eficaz_codigo_legado.jpg?w=210" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Veja alguns links sobre o livro, e meu resumo/resenha a seguir:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://c2.com/cgi/wiki?WorkingEffectivelyWithLegacyCode"&gt;Página sobre o livro na
  WikiWikiWeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/Working-Effectively-Legacy-Michael-Feathers/dp/0131177052"&gt;Working Effectively with Legacy Code na
  Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.grupoa.com.br/livros/engenharia-de-software-e-metodos-ageis/trabalho-eficaz-com-codigo-legado/9788582600320"&gt;Página da versão traduzida no grupo de editoras Grupo
  A&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://programmers.stackexchange.com/questions/122014/what-are-the-key-points-of-working-effectively-with-legacy-code"&gt;Tópico no programmers.SE com resumo dos pontos chave do
  livro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.objectmentor.com/resources/articles/WorkingEffectivelyWithLegacyCode.pdf"&gt;Paper do Michael Feathers que originou o
  livro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A definição do livro para código legado é basicamente, código sem
testes. Eis a resposta do livro à pergunta: “o que os testes têm a ver
com o código ser ruim?”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Código sem testes é código ruim. Não importa o quão bem escrito, nem
se ele é bonito, orientado a objetos ou se foi bem encapsulado. Com
testes, podemos alterar o comportamento de nosso código de maneira
rápida e verificável. Sem eles, não temos como saber se nosso código
está melhorando ou piorando.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quando você precisa alterar código que você mesmo fez, é um pouco mais
difícil de fazer isso de forma segura se o código não tem uma suíte de
testes (especialmente se faz mais de meses que você mexeu nele pela
última vez). Agora, se o código que você precisa alterar foi escrito por
outra pessoa, é um pouco mais difícil de alterar com segurança se ele
não tiver testes. Se esse código que você precisa alterar foi feito por
uma equipe de pessoas diferentes, misturando estilos diferentes, e não
tem uma suíte de testes, sua tarefa é um bom bocado mais difícil. E se
foi escrito por várias pessoas diferentes, em períodos de tempo
diferentes, passando por uma série de restrições de prazos e falhas de
comunicação: com testes já seria complicado, sem testes automatizados
certamente será uma tarefa muito lenta, laboriosa e propensa a erros.&lt;/p&gt;
&lt;p&gt;Por isso, essa definição para código legado faz bastante sentido. Se
você está escrevendo código sem testes, você está escrevendo código
legado. Daí a importância desse livro: código legado não é apenas código
daquele projeto que você cai de pára-quedas e tem que tentar entender o
que os programadores que trabalharam nele fizeram. O seu próprio código
vira código legado em questão de minutos, caso você não esteja
escrevendo uma suíte de testes para ele.&lt;/p&gt;
&lt;p&gt;Quando você tenta submeter a testes esse tipo de código que não foi
escrito para ser testável, você frequentemente descobre que não consegue
testá-lo sem refatorar algumas partes. Mas pra fazer refatorações com
segurança, você quer ter testes que verifiquem se as refatorações não
estão quebrando nada. E aí você fica sem nenhuma escolha boa:&lt;/p&gt;
&lt;p&gt;1) ou você arrisca refatorar um pouco para adicionar testes depois e então
alterar com mais segurança&lt;/p&gt;
&lt;p&gt;2) ou arrisca tudo de vez e sai alterando sem testes mesmo&lt;/p&gt;
&lt;p&gt;Acho que todos nós fazemos isso de vez em quando -- pelo menos, eu sei
que sou culpado de escrever muito código legado. Manter uma cobertura de
testes alta é difícil quando você não tem treino ou confiança nesse
método de trabalhar. Além disso, infelizmente é muito fácil racionalizar
que você está melhor do que a maioria, porque tem &lt;em&gt;“muito código pior em
produção por aí”&lt;/em&gt; -- o que não é uma atitude muito saudável.&lt;/p&gt;
&lt;p&gt;Enfim, a utilidade dos testes de unidade é o tipo de coisa que talvez
você tenha que verificar por si próprio. Mas o livro do Michael Feathers
não é sobre testes. O propósito do livro é ensinar passo-a-passo a fazer
as pequenas cirurgias-refatorações necessárias para transformar um
trecho de código em algo testável, para a seguir você conseguir
submetê-lo a testes e fazer as alterações necessárias com mais
segurança.&lt;/p&gt;
&lt;p&gt;Muitas vezes essas pequenas cirurgias elaboradas para serem minimamente
invasivas podem deixar o código um tanto feio, com uma estrutura
estranha. Mas não faz mal. A ideia nesse momento é deixá-lo testável,
permitindo-lhe alterá-lo com segurança. Depois de fazer as alterações
necessárias guiadas por testes, você poderá refatorar para uma estrutura
mais adequada, desta vez com a ajuda dos testes que você escreveu.&lt;/p&gt;
&lt;p&gt;Para isso, o autor explica quais são as coisas necessárias para deixar
um código testável, e passa vários truques para transformar código
&lt;em&gt;spaghetti&lt;/em&gt; em código testável, um degrau de cada vez. Alguns truques de
quebra de dependências você provavelmente já usou de uma forma ou outra,
embora talvez não com foco em melhorar a testabilidade. Muitos deles são
simples, mas nunca teriam me ocorrido antes do livro.&lt;/p&gt;
&lt;p&gt;Um conceito central do livro é o modelo de &lt;strong&gt;pontos de extensão&lt;/strong&gt;
(tradução de &lt;em&gt;&lt;a href="http://c2.com/cgi/wiki?SoftwareSeam"&gt;Software Seam&lt;/a&gt;&lt;/em&gt; --
 literalmente, &lt;em&gt;costura de software&lt;/em&gt;). Pontos de extensão são os locais
do código que permitem embutir um comportamento diferente sem ser
necessário editar o código diretamente no local. Pontos de extensão
colocados nos lugares apropriados permitem que você &lt;strong&gt;isole&lt;/strong&gt; o código
sendo testado do restante e também &lt;strong&gt;detecte&lt;/strong&gt; as diferenças no
comportamento do código sendo exercitado pelos testes -- duas ideias
importantes para testabilidade que o livro também explica em mais
detalhes.&lt;/p&gt;
&lt;p&gt;Um exemplo de ponto de extensão é a chamada de um &lt;a href="http://pt.wikipedia.org/wiki/M%C3%A9todo_virtual"&gt;método
virtual&lt;/a&gt; (isto é, um
método que pode ser sobrescrito) em uma linguagem orientada a objetos.
Se você tem um método &lt;em&gt;updateDb()&lt;/em&gt; chamando um método virtual
&lt;em&gt;getConnection()&lt;/em&gt; na mesma classe, você poderá criar uma nova classe que
estenda a anterior sobrescrevendo o método &lt;em&gt;getConnection()&lt;/em&gt; para
retornar um objeto de conexão diferente. Nesse caso, a chamada ao método
virtual &lt;em&gt;getConnection()&lt;/em&gt; corresponde ao que Feathers chama de um &lt;em&gt;ponto
de extensão de objeto&lt;/em&gt;, por ser característico das linguagens orientadas
a objetos.&lt;/p&gt;
&lt;p&gt;O livro é muito bem escrito, mas talvez lê-lo do começo ao fim como fiz
pode não ser o método mais eficiente de aproveitá-lo. Boa parte do livro
(a parte 2 das 3 que compõem o livro) foi escrita num formato de &lt;em&gt;FAQ -
Perguntas Frequentes&lt;/em&gt;, cujos capítulos podem ser lidos mais ou menos em
qualquer ordem, são cheios de referências cruzadas e tornam o livro
perfeito para manter ao alcance e usar como referência na hora de
resolver um problema. A terceira parte do livro é um catálogo das
refatorações que foram referenciadas nos capítulos da parte 2, contendo
uma descrição e os passos para aplicar cada refatoração. Isso deixa o
conteúdo um pouco repetitivo se você lê todos os capítulos em sequência,
como eu fiz.&lt;/p&gt;
&lt;p&gt;Mas a primeira parte, que tem um material mais introdutório, disseca a
mecânica de fazer alterações e consegue efetivamente vender a ideia da
importância de testes de unidade na manutenção de software. Além de
apresentar a motivação, Michael Feathers explica também as
características encontradas em bons testes de unidade:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;São executados rapidamente&lt;/li&gt;
&lt;li&gt;Ajudam a localizar problemas de imediato&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ele é incisivo: &lt;strong&gt;um teste de unidade que leve 1/10 de segundo para ser
executado é um teste lento&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Você quer rodar milhares desses testes ao mesmo tempo, por isso é desejável que
sua execução não seja lenta. Se você tem 3 mil classes com 10 testes de unidade
cada um levando 1/10 de segundo, levará cerca de 1 hora para rodar todos os
testes -- isso é muito tempo para ter feedback sobre uma alteração. Mesmo que
você não tenha 3 mil classes, os números não melhoram muito. Dez minutos é
tempo demais para esperar por feedback. Quando os testes estão demorando 10
minutos para executar, vale a pena rodar apenas um subconjunto deles quando
fazendo alterações; e rodar a suíte inteira talvez em intervalos de horas ou
antes de fazer &lt;em&gt;commit&lt;/em&gt; no sistema de controle de versão. Mas é bom se esforçar
para obter uma suíte de testes que executem rapidamente.&lt;/p&gt;
&lt;p&gt;Alguns testes se parecem com testes de unidade. Testes que acessam o
banco de dados, que usam a rede, que usam o sistema de arquivos, podem
se parecer com testes de unidade, mas não o são. Não quer dizer que não
são úteis: certamente são úteis! Mas é interessante separá-los dos
verdadeiros testes de unidade, que focam em um trecho específico do seu
código de produção e que você pode executar rapidamente quando estiver
fazendo alterações.&lt;/p&gt;
&lt;p&gt;Bem, o livro é altamente recomendado, e não só por mim. Está destinado a
ser um clássico na biblioteca dos programadores profissionais por muito
tempo, sem dúvida. Leia o livro e mergulhe de cabeça.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 26 Jan 2014 17:58:00 -0200</pubDate><guid isPermaLink="false">tag:,2014-01-26:2014/01/26/trabalho-eficaz-com-codigo-legado.html</guid></item><item><title>Você devia aprender shell-script</title><link>/2014/01/11/voce-devia-aprender-shell-script.html</link><description>&lt;p&gt;Se você é programador, você devia aprender
&lt;a href="http://pt.wikipedia.org/wiki/Shell_script"&gt;shell-script&lt;/a&gt;. Ou pelo
menos, algo parecido.&lt;/p&gt;
&lt;p&gt;Nem que seja apenas o básico para se virar: criar o arquivo e deixar
executável, ler e escrever variáveis, redirecionar entrada e saída,
encadear comandos, &lt;a href="http://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt; e
&lt;a href="http://en.wikipedia.org/wiki/Cut_(Unix)"&gt;cut&lt;/a&gt; basicão.&lt;/p&gt;
&lt;p&gt;Você pode ainda não saber que precisa da habilidade de fazer
shell-scripts, e isso é um problema. Tem sido difícil para mim comunicar
a outros programadores que conheço como a vida deles seria mais fácil se
aprendessem um mínimo de shell-script. (Enquanto isso, meu irmão
sargento do Exército, que nem é programador profissional, usa o shell
regularmente para resolver pepinos impossíveis no trabalho dele. That's
a win!)&lt;/p&gt;
&lt;p&gt;Os motivos que as pessoas dão para deixar de aprender shell-script são
mais ou menos os mesmos: “não tenho tempo, tem outras coisas me ocupando
no momento”, “isso não é da linha de comando? ninguém mais usa a linha
de comando, os anos 80 já se foram há muito tempo” e “por que você se
importa que eu aprenda essa linguagem velha e tosca?”.&lt;/p&gt;
&lt;p&gt;Estou aqui para dizer que nenhum desses motivos é válido, vamos
destrinchá-los um por um.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motivo 1: não tenho tempo, tem outras coisas me ocupando no momento&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;É claro que você não tem tempo e está ocupado, você ainda não sabe
shell-script! Se soubesse, teria resolvido uma penca de problemas antes
do tempo e estaria navegando no reddit. :D&lt;/p&gt;
&lt;p&gt;Brincadeiras à parte: você acha o tempo pra estudar. Invista um pouco de
tempo agora, pra colher depois. Colhe em tempo e tranquilidade -- o que
antes você fazia manualmente, você agora só checa o resultado.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motivo 2: linha de comando é coisa do passado&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Bééééé, not really! Interfaces de linha de comando continuam a todo o
vapor. Mesmo os cool kids brincando com as &lt;a href="http://nodejs.org/"&gt;últimas encarnações de
Javascript&lt;/a&gt; não param de criar
&lt;a href="https://npmjs.org/"&gt;uma&lt;/a&gt; &lt;a href="http://bower.io/"&gt;porção&lt;/a&gt;
&lt;a href="http://gruntjs.com/"&gt;de&lt;/a&gt; &lt;a href="http://yeoman.io/"&gt;ferramentas&lt;/a&gt; para a linha
de comando, uma mais interessante que a outra.&lt;/p&gt;
&lt;p&gt;A verdade é que as interfaces de linha de comando, apesar de não serem
muito intuitivas para um usuário leigo, são muito boas para nós,
programadores. Ou para qualquer pessoa que queira poder resolver os
próprios problemas computacionais sem depender de alguém haver
encontrado o mesmo problema antes e ser generoso a ponto de resolvê-lo e
compartilhar a solução.&lt;/p&gt;
&lt;p&gt;É verdade também que a sintaxe pouco familiar de shell-script pode
assustar um pouco quem está começando. Mas a questão é que a vida fica
muito mais fácil depois que você destrincha o básico.&lt;/p&gt;
&lt;p&gt;Experimente um pouco. Quem sabe, capaz de você acabar se divertindo
nessa brincadeira!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Motivo 3: por que você se importa que eu aprenda essa velharia?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Hã, esse não é bem um motivo, mas é uma reação esperada. E a resposta é:
porque eu só tenho a ganhar.&lt;/p&gt;
&lt;p&gt;Veja só, se você aprender shell-script e
conseguir otimizar sua vida um pouquinho, vai sobrar tempo pra você
aprender ainda mais um pouquinho de shell-script e otimizar ainda mais e
assim por diante, então a tendência é o mundo melhorar, ha-ha!&lt;/p&gt;
&lt;p&gt;Piadinhas à parte, a verdade é que aos poucos você vai começar a
perceber que pode resolver um monte de problemas que antes você nem se
dava conta que existiam. Problemas que, apesar de você não vê-los,
estavam lá atrasando sua vida, atrapalhando seu desempenho, deixando
você numa espécie de indefesa aprendida.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Shell-script&lt;/em&gt; é uma ferramenta semelhante ao seu editor de textos ou
IDE, no sentido que vai acompanhar você pelo resto da vida. Por isso
vale a pena aprender, pois você terá retorno continuamente. E você
estará sempre descobrindo coisas novas e o domínio do shell vai
continuar consistentemente lhe recompensando, à medida que você vai
aprendendo outras coisas.&lt;/p&gt;
&lt;p&gt;Essa é a beleza de shell-scripting, a de permitir você combinar várias
coisas, mesmo algumas que não tenham sido feitas para serem combinadas.
É a beleza da &lt;a href="http://pt.wikipedia.org/wiki/Filosofia_Unix"&gt;filosofia
Unix&lt;/a&gt;. &lt;em&gt;Thanks, &lt;a href="http://pt.wikipedia.org/wiki/Douglas_McIlroy"&gt;Mr.
McIlroy&lt;/a&gt;, we’ve seen the
light now&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Um dos melhores investimentos do meu tempo na época que estava na faculdade foi
ler boa parte do &lt;a href="http://www.tldp.org/LDP/abs/html/"&gt;Advanced Bash Scripting
Guide&lt;/a&gt;, quando um dos rapazes do laboratório
imprimiu uma cópia em folha dupla e letra miúda pra ficar fácil de carregar. É
meio comprido, mas é uma excelente fonte para aprender: é recheada de exemplos,
ensina boas práticas e tem várias notas sobre portabilidade.&lt;/p&gt;
&lt;p&gt;Mas se você não curte ler em inglês, não desanime. Pode &lt;a href="http://aurelio.net/shell/"&gt;começar com a
página do Aurélio&lt;/a&gt;, que é como comecei
também, no fim das contas. &lt;a href="http://www.shellscript.com.br"&gt;Leia o livro
dele&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Fuja das desculpas, e comece logo. O retorno é garantido.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sat, 11 Jan 2014 16:34:00 -0200</pubDate><guid isPermaLink="false">tag:,2014-01-11:2014/01/11/voce-devia-aprender-shell-script.html</guid></item><item><title>Problemas da Filosofia</title><link>/2013/11/20/problemas-da-filosofia.html</link><description>&lt;p&gt;Um amigo indicou-me a leitura de &lt;a href="http://en.wikipedia.org/wiki/The_Problems_of_Philosophy"&gt;The Problems of
Philosophy&lt;/a&gt;
(&lt;em&gt;Os Problemas da Filosofia&lt;/em&gt;), uma introdução a Filosofia escrita por
&lt;a href="http://en.wikipedia.org/wiki/Bertrand_Russell"&gt;Bertrand Russell&lt;/a&gt;,
filósofo e historiador britânico. O livro é excelente, esclareceu várias
dúvidas minhas e me fez pensar melhor sobre muitas coisas.&lt;/p&gt;
&lt;p&gt;O texto original está &lt;a href="http://www.gutenberg.org/ebooks/5827"&gt;disponível no Projeto
Gutenberg&lt;/a&gt;, e existem também
&lt;a href="http://criticanarede.com/problemasdafilosofia.html"&gt;algumas&lt;/a&gt;
&lt;a href="http://www.cfh.ufsc.br/~conte/russell.html"&gt;traduções&lt;/a&gt; online.&lt;/p&gt;
&lt;p&gt;Ele começa fazendo a pergunta: &lt;em&gt;“Existe algum conhecimento no mundo que
é tão certeiro que nenhum homem razoável poderia duvidar?”&lt;/em&gt; Partindo
daí, ele segue mostrando por que responder essa pergunta é difícil,
apontando as hipóteses que comumente assumimos como verdadeiras e quais
motivos podemos ter para acreditar nelas ou não.&lt;/p&gt;
&lt;p&gt;Demorei um pouco pra aceitar que o motivo porque acreditamos que o sol
vai nascer amanhã é, basicamente, porque ele já nasceu muitas vezes
antes! &lt;em&gt;I mean... dude, the shit is probabilistic!&lt;/em&gt; Aparentemente, isso
é um choque pra quase todo mundo, então não estou sozinho.&lt;/p&gt;
&lt;p&gt;É fascinante a quantidade de coisas que assumimos -- algumas com mais
motivos e outras com menos -- e o livro faz um bom trabalho de esmiuçar
várias dessas coisas. Ele é relativamente curto, mas é denso para
noviços como eu, então é meio difícil tentar resumir aqui o que se pode
tirar dele.&lt;/p&gt;
&lt;p&gt;Mas tendo lido esse livro, me sinto mais seguro sobre algumas coisas em
que acredito e também mais capaz de analisar os motivos que tenho para
avaliar novas informações. Quando alguém vier com historinhas tipo &lt;em&gt;“não
existe verdade absoluta, só existem percepções”&lt;/em&gt; com o intuito de me
confundir sobre os fatos -- como já me aconteceu antes -- estarei melhor
preparado para lidar com isso.&lt;/p&gt;
&lt;p&gt;Entendo agora que não existe uma “verdade absoluta” sobre todos os
assuntos, que possa ser conhecida a uma mente, mas sei que existem
algumas verdades universais que podemos aplicar para raciocinar com
fatos, probabilidades e com hipóteses, conforme os motivos (ou falta de
motivos) que temos para acreditar nelas.&lt;/p&gt;
&lt;p&gt;Quem tem curiosidade sobre como as coisas funcionam, como conhecimento
funciona, recomendo a leitura deste livro; vale a pena. Embora outra
introdução a Filosofia provavelmente sirva também.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Valeu, Flávio, pela recomendação do livro. =)&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Wed, 20 Nov 2013 08:16:00 -0200</pubDate><guid isPermaLink="false">tag:,2013-11-20:2013/11/20/problemas-da-filosofia.html</guid></item><item><title>VI Melhorado</title><link>/2013/09/26/vi-melhorado.html</link><description>&lt;p&gt;&lt;a href="http://pragprog.com/book/dnvim/practical-vim"&gt;Practical Vim&lt;/a&gt; é um livro sobre
o &lt;a href="http://www.vim.org/"&gt;Vim&lt;/a&gt; -- o editor de textos xodó dos programadores.
Muito bem escrito, recheado de exemplos e referências, kudos para o &lt;a href="http://drewneil.com/"&gt;Drew
Neil&lt;/a&gt;, autor dessa belezinha.  Drew também faz vídeos
sobre o Vim, disponíveis gratuitamente em
&lt;a href="http://vimcasts.org/"&gt;http://vimcasts.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pragprog.com/book/dnvim/practical-vim"&gt;&lt;img alt="Edit Text at the Speed of
Thought" src="http://eljunior.files.wordpress.com/2013/09/dnvim.jpg?w=250" title="Practical Vim" /&gt;&lt;/a&gt;&lt;/p&gt;


&lt;p&gt;Se você ainda não conhece o Vim, talvez esse livro não seja um começo
adequado. É bom ter pelo menos seguido o
&lt;a href="http://linuxcommand.org/man_pages/vimtutor1.html"&gt;vimtutor&lt;/a&gt;. Se você
usa Vim há um bom tempo e está sentindo que não usa todo o potencial da
ferramenta, este livro pode ser o que você precisa.&lt;/p&gt;
&lt;p&gt;O livro foi escrito num formato de dicas, demonstrando problemas e
soluções, começando com as mais simples e avançando para outras mais
refinadas, com referências cruzadas entre elas. Isso torna possível você
lê-lo aos poucos, não necessariamente em ordem, portanto fica uma
leitura leve -- como se fosse uma centena de blog posts. Mas eu li na
ordem mesmo assim. :P&lt;/p&gt;
&lt;p&gt;Como o livro é extremamente prático e recheado de exemplos, e também como &lt;a href="https://eljunior.wordpress.com/2013/04/07/coisas-sobre-o-vim-que-gostaria-de-ter-sabido-antes/"&gt;já
falei algumas coisas a respeito aqui
antes&lt;/a&gt;,
vou só falar os destaques que pessoalmente me foram legais.&lt;/p&gt;
&lt;p&gt;Um dos pontos centrais do livro é que para usar bem os recursos Vim,
devemos aprender os mecanismos de repetição que ele oferece. Repetir o
último comando, a última mudança no texto, a última macro, a última
busca -- essas funcionalidades ajudam bastante no trabalho de edição,
que é repetitivo por natureza, portanto vale a pena aprender bem como
elas funcionam.&lt;/p&gt;
&lt;p&gt;Aprendi a lidar com registradores (&lt;em&gt;registers&lt;/em&gt;) no Vim, finalmente!  Muitas
vezes antes já senti falta e acabei fazendo a tarefa manualmente ou recorrendo
a uma ou outra mutreta... Você &lt;a href="http://usevim.com/2012/04/13/registers/"&gt;pode aprender facilmente sobre os registers do
Vim em um tutorial online&lt;/a&gt;, mas o
livro ensina com exemplos práticos, dando a motivação certa pra você aprender
cada comando. Eu já havia lido várias vezes sobre os &lt;em&gt;registers&lt;/em&gt; online, mas só
depois de ler os pulos do gato no livro que estou me sentindo confortável para
usá-los. São bem úteis na hora de fazer refatorações em código, e montar ações
a serem repetidas com &lt;a href="http://stackoverflow.com/questions/7325052/can-someone-explain-to-me-why-the-dot-command-is-so-useful-in-vim"&gt;o comando
ponto&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uma dica interessante do livro sobre
&lt;a href="http://usevim.com/2012/08/10/macros/"&gt;macros&lt;/a&gt; é uma maneira de criar
macros que “param automático”. A ideia é usar um movimento
(&lt;em&gt;&lt;a href="http://vimdoc.sourceforge.net/htmldoc/motion.html"&gt;motion&lt;/a&gt;&lt;/em&gt;) que
falhe quando a macro não deve mais ser aplicada. Quando um movimento
falha na execução de uma macro, o restante da execução é cancelado.
Sabendo disso, podemos tirar proveito na hora de montar e executar a
macro, o que nos permite criar macros "infinitas" que não precisam de
contagem exata e pararão a execução no momento certo.&lt;/p&gt;
&lt;p&gt;Descobri algumas coisas legais também sobre a busca do Vim. Se você faz uma
busca usando o comando &lt;em&gt;/&lt;/em&gt; e depois aciona a substituição com a busca vazia
&lt;code&gt;:s//texto a repor/&lt;/code&gt; o Vim reusa o padrão usado na última busca. Isso é legal
porque permite você refinar a busca visualmente primeiro, e então montar o
comando de substituição depois. Às vezes isso é mais prático do que usar a
busca e substituição pedindo confirmação com &lt;code&gt;:s/texto a substituir/texto a
repor/gc&lt;/code&gt;. Ah, e quando estiver montando expressões regulares na busca, é uma
boa ideia começar as ERs com o escape &lt;code&gt;\v&lt;/code&gt; que ativa o &lt;a href="http://www.malloc.co/vim/using-very-magic-to-make-vim-regular-expressions-cleaner/"&gt;comportamento ”very
magic”&lt;/a&gt;
-- muito mágico e muito mais fácil.&lt;/p&gt;
&lt;p&gt;Outra dica boa sobre busca é &lt;a href="https://github.com/nelstrom/vim-visual-star-search"&gt;o plugin que muda comportamento do * e # no
modo visual&lt;/a&gt;. Por padrão, o
Vim buscará a palavra sob o cursor (coerente com o comportamento no modo
normal), estendendo a seleção. O plugin altera para ele buscar o texto que está
selecionado, o que é bem mais útil. =)&lt;/p&gt;
&lt;p&gt;Curti também as explicações sobre a integração do Vim com
&lt;a href="http://ctags.sourceforge.net/"&gt;ctags&lt;/a&gt;,
&lt;a href="http://en.wikipedia.org/wiki/Grep"&gt;grep&lt;/a&gt; &amp;amp; &lt;a href="http://beyondgrep.com/"&gt;ack&lt;/a&gt;, o
funcionamento do corretor ortográfico, etc -- tem uma seção do livro dedicada a
esses assuntos. Ainda não coloquei muita coisa na prática, mas fiquei cheio de
ideias.&lt;/p&gt;
&lt;p&gt;Num mundo em que existem &lt;a href="http://www.jetbrains.com/idea/"&gt;ferramentas muito inteligentes para edição de
código&lt;/a&gt; que por vezes até escrevem o código por
você, o Vim tem se mantido relevante porque permite a economia de movimentos em
qualquer tipo de texto. A longo prazo, o Vim ainda é um bom investimento para
quem precisa de uma edição de texto mais refinada, como muitos programadores.
Não todos, porque alguns programadores infelizmente só usarão as linguagens bem
suportadas pela sua IDE. Mas a trupe de teimosos da qual eu faço parte
provavelmente vai se manter usando Vim até o fim -- o benefício vem a longo
prazo.&lt;/p&gt;
&lt;p&gt;Enfim, &lt;a href="http://www.amazon.com/Practical-Vim-Thought-Pragmatic-Programmers/dp/1934356980"&gt;compre&lt;/a&gt;
&lt;a href="http://pragprog.com/book/dnvim/practical-vim"&gt;o livro&lt;/a&gt;, &lt;a href="http://vimcasts.org/"&gt;assista os
vídeos&lt;/a&gt;, siga &lt;a href="https://twitter.com/vimcasts"&gt;o twitter do
Vimcasts&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;&lt;sub&gt;Ah, e quando programar em Java, sugiro &lt;a href="http://confluence.jetbrains.com/display/IDEADEV/EAP"&gt;usar o Intellij IDEA&lt;/a&gt; -- bem melhor que o Eclipse. :D&lt;/sub&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Thu, 26 Sep 2013 16:49:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-09-26:2013/09/26/vi-melhorado.html</guid></item><item><title>Alguns programas úteis para usar no Ubuntu</title><link>/2013/08/14/alguns-programas-uteis-para-usar-no-ubuntu.html</link><description>&lt;p&gt;Ok, hoje estou tirando a preguiça do traseiro para escrever sobre algo
que há tempo queria fazer: uma lista de alguns programas úteis que uso
no &lt;a href="http://www.ubuntu.com/" title="Ubuntu Linux"&gt;Ubuntu&lt;/a&gt;. A maioria deles eu
demorei um pouco para descobri-los, por isso acho uma boa idéia falar
deles por aqui -- são aplicações bacanas que merecem uma boa propaganda.&lt;/p&gt;
&lt;h3&gt;Meld&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://meldmerge.org/"&gt;Meld&lt;/a&gt; é uma ferramenta muito útil para
programadores, mas que pode muito bem ser útil para outras pessoas
também. Ele ajuda você a ver as diferenças entre versões diferentes de
arquivos ou pastas, e permite copiar as coisas de um lado para outro e
vice-versa.&lt;/p&gt;
&lt;p&gt;Comparando duas pastas com o Meld:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/08/minha_pasta-outra_pasta-meld_004.png"&gt;&lt;img alt="Comparando duas pastas com o Meld" src="http://eljunior.files.wordpress.com/2013/08/minha_pasta-outra_pasta-meld_004.png" title="Comparando duas pastas com o Meld" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ele é uma mão-na-roda para o desenvolvedor na hora de fazer
&lt;em&gt;&lt;a href="http://en.wikipedia.org/wiki/Merge_(revision_control)" title="Artigo sobre merges na Wikipedia"&gt;merges&lt;/a&gt;&lt;/em&gt;
complicados, e também para verificar a situação de projetos que foram
alterados por pessoas diferentes sem usar um sistema de controle de
versão decente (que aliás, se a escolha estiver em aberto pra você ou
caso ainda esteja usando CVS/SVN, recomendo dar uma boa olhada no
&lt;a href="http://mercurial.selenic.com/"&gt;Mercurial&lt;/a&gt; -- &lt;a href="http://hginit.com/"&gt;pode começar por
aqui&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Para instalar no Ubuntu, digite num terminal:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install meld&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dica:&lt;/strong&gt; um jeito rápido de copiar e colar linhas de comando do
navegador no terminal é dar um triplo-clique (clicar 3x) em qualquer
lugar da linha pra selecioná-la inteira, e depois clicar no terminal
com o botão do meio (isto é, com a rodinha do mouse) -- isto já copia
e cola incluindo até o &lt;kbd&gt;Enter&lt;/kbd&gt;. É o "copiar e colar" mais
tradicional do Linux, pra mim é meio surpreendente como muitos
&lt;em&gt;power-users&lt;/em&gt; desconhecem esse truque.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Shutter&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://shutter-project.org/"&gt;Shutter&lt;/a&gt; é um programa que ajuda a fazer
capturas da tela, aka, &lt;em&gt;screenshots&lt;/em&gt;. A maioria das pessoas está
acostumada a fazer esse tipo de coisa usando a tecla &lt;kbd&gt;Print
Screen&lt;/kbd&gt;, mas o legal do Shutter é que você pode escolher um pedaço
específico da tela pra capturar, fazer alterações por cima, tudo no
mesmo passo.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/08/shutter-yo_dawg.png"&gt;&lt;img alt="Yo dawg, I heard you like taking screenshots!" src="http://eljunior.files.wordpress.com/2013/08/shutter-yo_dawg.png?w=640" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ele também tem plugins para aplicar efeitos nas imagens, fazer upload
para ImgUr, TwitPic, ImageShack, Dropbox, etc.&lt;/p&gt;
&lt;p&gt;Pra instalar no Ubuntu, digite num terminal:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install shutter&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;DBeaver&lt;/h3&gt;
&lt;p&gt;O &lt;a href="http://jkiss.org/"&gt;DBeaver&lt;/a&gt; é uma aplicação cliente de banco de dados
SQL, que suporta vários bancos e plataformas. Não é muito espetacular,
mas de todas as aplicações open-source desse tipo que testei, é de longe
a que tem a melhor usabilidade. Ele baixa os &lt;em&gt;drivers&lt;/em&gt; adequados para
conectar nos vários bancos diferentes, só esse recurso já é uma bela
duma ajuda.&lt;/p&gt;
&lt;p&gt;Pra instalar no Ubuntu, você pode escolher entre baixar e instalar o
pacote Debian ou baixar e descompactar o zip do site
&lt;a href="http://dbeaver.jkiss.org/download/"&gt;http://dbeaver.jkiss.org/download&lt;/a&gt; -- ou
ainda, você também pode &lt;a href="http://marketplace.eclipse.org/node/507775"&gt;instalar como
plugin&lt;/a&gt; para o
&lt;a href="http://www.eclipse.org/"&gt;Eclipse&lt;/a&gt; se preferir.&lt;/p&gt;
&lt;h3&gt;PlayItSlowly&lt;/h3&gt;
&lt;p&gt;O &lt;a href="http://29a.ch/playitslowly/"&gt;PlayItSlowly&lt;/a&gt; é um programa muito legal
que permite reproduzir arquivos de áudio ou vídeo em velocidade e
frequência diferentes do áudio/vídeo original, até &lt;a href="http://eljunior.wordpress.com/2011/07/28/tocar-video-ou-musica-em-outra-velocidade-mantendo-o-tom/"&gt;já andei falando
antes sobre ele por
aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/08/play-it-slowly_012.png"&gt;&lt;img alt="Can you guess from which band is this song?" src="http://eljunior.files.wordpress.com/2013/08/play-it-slowly_012.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Usando o PlayItSlowly você pode fazer andar mais rápido o vídeo daquela
palestra lenta que dá sono e também ouvir um trecho duma música
repetindo em velocidade mais lenta sem perder o tom original, pra você
poder perceber melhor as notas -- bem útil pra quem quer aprender a
tocar alguma música. Além disso, você também pode sacanear seus amigos
reproduzindo uma gravação deles conversando com a fala fina... Esse
programa é muito bacana, especialmente porque eu tenho uma pequena
parcela de contribuição no quão legal ele é: a última versão dele inclui
algumas melhorias na interface que eu implementei. =)&lt;/p&gt;
&lt;p&gt;Se você está usando a última versão do Ubuntu, pode instalar digitando
no terminal:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install playitslowly&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Caso esteja usando uma versão mais antiguinha, considere &lt;a href="http://29a.ch/playitslowly/"&gt;baixar o
pacote com a última versão do site&lt;/a&gt; --
prometo que a interface melhora legal.&lt;/p&gt;
&lt;h3&gt;Amphetype&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/08/amphetype_001.png"&gt;&lt;img alt="Amphetype: pratique digitação digitando e lendo seu texto preferido" src="http://eljunior.files.wordpress.com/2013/08/amphetype_001.png?w=640" title="Tela inicial do Amphetype" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/amphetype/"&gt;Amphetype&lt;/a&gt; é um programa pra treinar
digitação com textos que você escolhe, que também gera umas estatísticas
joiadas. Infelizmente, não está mais sendo mantido e acho que nunca teve um
empacotamento de verdade pra Linux (&lt;a href="https://code.google.com/p/amphetype/downloads/list" title="Instaladores do
Amphetype para Windows e Mac"&gt;só tem instalador para Windows e
Mac&lt;/a&gt;).  Mesmo assim, continua sendo bem decente -- eu
uso uma versão que modifiquei levemente para facilitar a deleção dos textos
fontes. Um dia quem sabe eu tomo vergonha na cara e tento montar um pacote,
publicar o &lt;em&gt;patch&lt;/em&gt;, etc.&lt;/p&gt;
&lt;p&gt;Como falei, não tem um empacotamento pronto pra Linux, mas você consegue
rodar baixando o código-fonte, usando alguns comandos no terminal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Instale o subversion para poder baixar os fontes:&lt;br /&gt;
&lt;code&gt;sudo apt-get install subversion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use o subversion para baixar os fontes:&lt;br /&gt;
&lt;code&gt;svn checkout http://amphetype.googlecode.com/svn/trunk/ amphetype-read-only&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Execute o programa com o comando:&lt;br /&gt;
&lt;code&gt;python Amphetype.py&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Pinta&lt;/h3&gt;
&lt;p&gt;O Pinta é um programa muito bem feitinho, pra editar imagens no estilo
do MS Paint -- uma coisa que demorou um pouquinho pra aparecer no Linux.
Um recurso legal dele é o &lt;em&gt;“Recolor”&lt;/em&gt;, que pinta apenas em cima de uma
determinada cor. Funciona como aquelas canetas marca-texto, permitindo
chamar atenção para textos em outras imagens como nesse exemplo:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/08/diffusionofinnovation-pinta_003.png"&gt;&lt;img alt="É divertido pintar com o Pinta =)" src="http://eljunior.files.wordpress.com/2013/08/diffusionofinnovation-pinta_003.png?w=640" /&gt;&lt;/a&gt;
  É divertido pintar com o Pinta =)&lt;/p&gt;
&lt;p&gt;Instale no Ubuntu digitando num terminal:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install pinta&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Programas para usar na linha de comando&lt;/h3&gt;
&lt;p&gt;Além desses programas, gostaria ainda de falar rapidão de outros
programas úteis pra quem também gosta de usar a linha de comando:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://en.wikipedia.org/wiki/Quilt_(software)"&gt;quilt&lt;/a&gt; é um conjunto
    de shell-scripts que ajudam a lidar com diffes e patches, é uma
    ótima ferramenta para um desenvolvedor ter na sua caixa, já me foi
    útil várias vezes. Instale com:&lt;br /&gt;
&lt;code&gt;sudo apt-get install quilt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://utopia.knoware.nl/~hlub/rlwrap/"&gt;rlwrap&lt;/a&gt; é um programa que
    adiciona os recursos da linha de comando de histórico e atalhos de
    edição, em qualquer outro programa que leia comandos da entrada
    padrão (Teste com &lt;code&gt;rlwrap ruby&lt;/code&gt;, por exemplo). Instale com:&lt;br /&gt;
&lt;code&gt;sudo apt-get install rlwrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://stackoverflow.com/questions/3455625/linux-command-to-print-directory-structure-in-the-form-of-a-tree"&gt;tree&lt;/a&gt;
    é um programa bem simples, que lista os diretórios em forma de
    árvore. Por algum motivo, levei anos pra descobrir que esse programa
    existia. Instale com:&lt;br /&gt;
&lt;code&gt;sudo apt-get install tree&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Wed, 14 Aug 2013 22:24:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-08-14:2013/08/14/alguns-programas-uteis-para-usar-no-ubuntu.html</guid></item><item><title>Programming Grails -- a aventura continua</title><link>/2013/07/28/programming-grails----a-aventura-continua.html</link><description>&lt;p&gt;Alguns dias atrás terminei de ler o &lt;em&gt;&lt;a href="http://shop.oreilly.com/product/0636920024750.do" title="Programming Grails - OReilly"&gt;Programming
Grails&lt;/a&gt; (&lt;a href="http://www.amazon.com/Programming-Grails-Burt-Beckwith/dp/1449323936"&gt;Amazon&lt;/a&gt;)&lt;/em&gt;,
um livro sobre &lt;a href="http://www.grails.org/"&gt;o framework Grails&lt;/a&gt; voltado para
desenvolvedores experientes, que explica como funcionam várias coisas do
framework e aponta vários caminhos das pedras. O autor é &lt;a href="http://burtbeckwith.com/"&gt;Burt
Beckwith&lt;/a&gt;, conhecido na comunidade Grails por
criar vários plugins úteis do Grails, &lt;a href="http://burtbeckwith.com/blog/"&gt;escrever sobre Grails no seu
blog&lt;/a&gt;, &lt;a href="http://stackoverflow.com/users/160313/burt-beckwith" title="Burt Beckwith no StackOverflow"&gt;responder perguntas no
StackOverflow&lt;/a&gt;,
&lt;a href="http://www.infoq.com/author/Burt-Beckwith"&gt;palestrar&lt;/a&gt; em
&lt;a href="http://gr8conf.eu/Speakers/Burt-Beckwith"&gt;conferências&lt;/a&gt; e
também colaborar no desenvolvimento do próprio Grails.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://shop.oreilly.com/product/0636920024750.do"&gt;&lt;img alt="Programming Grails -- Best Practices for Experienced Grails Developers" src="http://eljunior.files.wordpress.com/2013/07/cat.gif" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Comprei o livro na Amazon ainda antes do lançamento oficial porque sabia
que sendo material do Burt seria muito bom. Não me decepcionei: o livro
é excelente! Na mesma semana que comecei a ler já pude aplicar as idéias
do livro, e minha compreensão do framework melhorou bastante --
recomendo fortemente pra quem trabalha com o framework. O livro não é
para iniciantes, todavia -- para quem quer começar com Grails, pode ser
melhor pegar um livro como o &lt;a href="http://www.manning.com/gsmith2/"&gt;Grails in
Action&lt;/a&gt; ou o &lt;a href="http://www.apress.com/java/java-ee/9781430243779"&gt;The Definitive Guide to
Grails 2&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Introdução a Groovy&lt;/h3&gt;
&lt;p&gt;O texto começa com uma introdução à linguagem
&lt;a href="http://groovy.codehaus.org/"&gt;Groovy&lt;/a&gt;, a linguagem usada no
desenvolvimento com Grails, demonstrando várias particularidades da
linguagem e sua excelente interoperabilidade com Java, explicando alguns
detalhes da implementação e exemplificando as várias vantagens que a
linguagem oferece em relação a Java. Já estou usando Groovy há um bom
tempo, mas essa introdução esclareceu algumas coisas sobre a linguagem.&lt;/p&gt;
&lt;p&gt;Um destaque dessa parte é a explicação sobre &lt;a href="http://groovy.codehaus.org/Closures" title="Groovy Closures -- documentação oficial"&gt;&lt;em&gt;owner&lt;/em&gt;, &lt;em&gt;delegate&lt;/em&gt; e
&lt;em&gt;this&lt;/em&gt; nas closures em
Groovy&lt;/a&gt;.
Basicamente, numa closure em Groovy, &lt;strong&gt;&lt;em&gt;this&lt;/em&gt;&lt;/strong&gt; se refere à instância da
classe que contém a Closure, &lt;strong&gt;&lt;em&gt;owner&lt;/em&gt;&lt;/strong&gt; se refere ou a essa instância
ou a outra closure que esteja envolvendo a closure atual, e
&lt;strong&gt;&lt;em&gt;delegate&lt;/em&gt;&lt;/strong&gt; é uma variável mutável que por padrão aponta pra owner. O
interessante aqui é que você pode alterar o valor de &lt;em&gt;delegate&lt;/em&gt; em tempo
de execução, e redefinir todo o comportamento da closure. Essa técnica é
bastante utilizada para criar as &lt;a href="https://pt.wikipedia.org/wiki/Linguagem_de_dom%C3%ADnio_espec%C3%ADfico"&gt;mini-linguagens
(DSLs)&lt;/a&gt;
em Grails, tipo as que você usa nos blocos &lt;em&gt;mapping&lt;/em&gt; e &lt;em&gt;constraints&lt;/em&gt;
numa classe de domínio.&lt;/p&gt;
&lt;p&gt;Segue um exemplo pra ajudar a entender:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OutraClasse&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;metodoDaOutraClasse&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;metodoDaOutraClasse()&amp;quot;&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClasseMae&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;minhaClosure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;def&lt;/span&gt; &lt;span class="n"&gt;subClosure&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;this: ${this.class}&amp;quot;&lt;/span&gt;
                &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;owner: ${owner.class}&amp;quot;&lt;/span&gt;
                &lt;span class="n"&gt;println&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;delegate: ${delegate.class}&amp;quot;&lt;/span&gt;
                &lt;span class="n"&gt;metodoDaOutraClasse&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;subClosure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;delegate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;OutraClasse&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;subClosure&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nf"&gt;ClasseMae&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="na"&gt;minhaClosure&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nesse exemplo, por causa da redefinição do delegate da &lt;em&gt;subClosure()&lt;/em&gt;,
podemos chamar métodos da &lt;em&gt;OutraClasse&lt;/em&gt; dentro dele. O resultado de
rodar esse código é:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ClasseMaeowner&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ClasseMae$_closure1delegate&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="n"&gt;OutraClassemetodoDaOutraClasse&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Recomendo assistir a palestra &lt;a href="http://gr8conf.eu/Presentations/Functional-Programming-in-Groo"&gt;Functional Programming in
Groovy&lt;/a&gt;,
para ver um exemplo legal de uso do &lt;em&gt;delegate&lt;/em&gt; simplificando uma API de
envio de email.&lt;/p&gt;
&lt;h3&gt;Grails Internals&lt;/h3&gt;
&lt;p&gt;O livro avança falando do framework Grails, das várias escolhas que
foram feitas na sua criação e evolução, e explica como criar e rodar uma
aplicação, narrando o que acontece quando você roda cada comando. A
seguir, Burt descreve todos os plugins incluídos na instalação padrão:
para o que servem, como foram implementados e como você pode
configurá-los ou desativá-los, se assim desejar.&lt;/p&gt;
&lt;p&gt;Este capítulo define o tom do livro, no
sentido de que ele é bem voltado para quem deseja saber melhor como as
coisas funcionam. Por isso, ele pode ser um tanto entediante para alguém
que esteja buscando algo mais receita-de-bolo garantindo gratificação
imediata -- o livro fala bastante nos detalhes de implementação de
várias partes do framework, com a idéia de habilitar você a resolver
problemas em todos os níveis de abstração envolvidos no desenvolvimento
de uma aplicação Grails.&lt;/p&gt;
&lt;p&gt;Acho que esse é o tipo de livro que é bom ter sempre por perto quando
estiver desenvolvendo para poder consultar. Várias vezes desejei
consultá-lo quando estava no trabalho, lembrando ter lido algo que ia
ajudar no problema que estava resolvendo. Então, a dica é mantê-lo ao
alcance -- agora eu carrego na mochila. :)&lt;/p&gt;
&lt;p&gt;Bem, seguindo adiante, o Burt fala de persistência com o
&lt;a href="http://grails.org/GORM"&gt;GORM&lt;/a&gt; (Grails Object Relational Mapping),
passando dicas de configuração pra facilitar a vida na hora de depurar o
código -- configurar um método nas classes de domínio para mensagens de
erro mais amigáveis, um filtro pra converter brancos em nulos, entre
outros.&lt;/p&gt;
&lt;h3&gt;Spring e Injeção de Dependência&lt;/h3&gt;
&lt;p&gt;O capítulo seguinte é sobre o papel do
&lt;a href="http://pt.wikipedia.org/wiki/Spring_Framework"&gt;Spring&lt;/a&gt; e &lt;a href="http://pt.wikipedia.org/wiki/Inje%C3%A7%C3%A3o_de_depend%C3%AAncia"&gt;injeção de
dependência&lt;/a&gt;
no Grails, explicando o funcionamento dos serviços Grails (que são beans
do Spring com suporte a transação), vários detalhes de configuração que
funcionam em cima do Spring, incluindo como integrar com outras
aplicações Spring já existentes. Aqui você já deve entender que é a
flexibilidade do Spring e a riqueza do ecossistema em torno dele que
garantem bastante poder ao Grails e a facilidade de integrar com várias
tecnologias diferentes. Acho que o Grails é um bom exemplo de tecnologia
que aproveita bastante as outras soluções já existentes no mercado por
isso.&lt;/p&gt;
&lt;p&gt;Aliás, apesar de conter vários pontos excelentes, esse capítulo sobre Spring
foi uma leitura um tanto árida -- em alguns momentos o texto descreve detalhes
de implementação de maneira complicada de entender, coisas tipo: “pra fazer
&lt;code&gt;&amp;lt;algum recurso&amp;gt;&lt;/code&gt;, Grails instancia a classe &lt;code&gt;&amp;lt;fully qualified name da classe
aqui&amp;gt;&lt;/code&gt;, que implementa a interface &lt;code&gt;&amp;lt;outro fully qualified name aqui&amp;gt;&lt;/code&gt; e usa o
adapter &lt;code&gt;&amp;lt;ainda outro fully qualified name&amp;gt;&lt;/code&gt;, registrando um bean &lt;code&gt;&amp;lt;nome do
bean&amp;gt;&lt;/code&gt; ...“!&lt;/p&gt;
&lt;p&gt;Ficou um pouco difícil de acompanhar, especialmente por eu não estar na
frente da IDE, sem poder conferir facilmente as definições das classes.
Bem, eu sabia onde estava me metendo quando peguei um livro avançado,
acho que o Burt fez um excelente trabalho com o livro, mas houveram
esses trechos que reli várias vezes e continuei sem entender. Talvez meu
conhecimento de &lt;em&gt;design patterns&lt;/em&gt; esteja fraco -- nunca fiz questão de
estudá-los muito, de qualquer forma.&lt;/p&gt;
&lt;h3&gt;Hibernate&lt;/h3&gt;
&lt;p&gt;A seguir, vem o maior capítulo do livro, dissecando o uso do Hibernate com
Grails, tanto com e sem o GORM. Aqui ele explica vários detalhes de
funcionamento do mapeamento objeto-relacional e como usá-lo para obter o máximo
de benefício. Burt sugere brincar com uma aplicação configurada com Hibernate
puro (isto é, sem o plugin do Hibernate pro Grails &amp;amp; GORM) como um exercício
útil pra entender o que Grails provê de graça pra você.&lt;/p&gt;
&lt;p&gt;Um trecho muito legal desse capítulo é a parte sobre &lt;em&gt;caching&lt;/em&gt;, em que ele
mostra como configurar o mecanimo de cache do Grails (usando
&lt;a href="http://ehcache.org/"&gt;Ehcache&lt;/a&gt;) e testar usando o console do Grails (&lt;em&gt;grails
console&lt;/em&gt;), conferindo as saídas do log. Compreendi melhor como funciona o
esquema de cache do Grails e como tirar vantagem dele minimizando os riscos de
acontecer merda. Tem &lt;a href="http://www.infoq.com/presentations/GORM-Performance"&gt;uma apresentação do Burt relacionada a esse assunto
disponível online&lt;/a&gt;, vale
conferir.&lt;/p&gt;
&lt;p&gt;Bem, ainda nesse capítulo (eu falei que era o maior do livro =P), vem
uma série de dicas sobre o uso do GORM com Hibernate, incluindo um
configurador de nomes para as chaves estrangeiras (porque os
        &lt;em&gt;FK1236718237&lt;/em&gt; que o Hibernate gera por padrão são crípticos demais na
        hora de depurar), como mapear views e subclasses, diferenças entre
&lt;a href="http://grails.org/doc/latest/ref/Domain%20Classes/get.html"&gt;get&lt;/a&gt;/&lt;a href="http://grails.org/doc/latest/ref/Domain%20Classes/load.html"&gt;load&lt;/a&gt;/&lt;a href="http://grails.org/doc/latest/ref/Domain%20Classes/read.html"&gt;read&lt;/a&gt;
e algumas dicas sobre performance. Sobre esse assunto, também recomendo
ler os posts do Peter Ledbrook da série GORM Gotchas, seguem os links:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://blog.springsource.org/2010/06/23/gorm-gotchas-part-1/"&gt;http://blog.springsource.org/2010/06/23/gorm-gotchas-part-1/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.springsource.org/2010/07/02/gorm-gotchas-part-2/"&gt;http://blog.springsource.org/2010/07/02/gorm-gotchas-part-2/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.springsource.org/2010/07/28/gorm-gotchas-part-3/"&gt;http://blog.springsource.org/2010/07/28/gorm-gotchas-part-3/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Especificamente sobre o comportamento do &lt;a href="http://grails.org/doc/latest/ref/Domain%20Classes/save.html" title="save()"&gt;método
save()&lt;/a&gt;
explicado no primeiro post dessa série GORM Gotchas, eu &lt;a href="http://eljunior.wordpress.com/2013/06/03/aventurando-se-com-grails/"&gt;penso um pouco
diferente&lt;/a&gt;
dos autores do framework e sempre configuro a chave
&lt;code&gt;grails.gorm.failOnError=true&lt;/code&gt; no &lt;em&gt;Config.groovy&lt;/em&gt; logo após criar um
projeto novo em Grails. Acho que é especialmente importante fazer isso
quando a equipe de desenvolvedores é um pouco heterogênea ou recém está
começando a usar o framework -- você evita muitas sessões de depuração
quando o &lt;em&gt;save()&lt;/em&gt; sempre ou salva ou erra berrantemente.&lt;/p&gt;
&lt;h3&gt;Integração&lt;/h3&gt;
&lt;p&gt;Em sequência tem um capítulo sobre integração, em que o livro cobre as
facilidades do Grails para usar mensageria com JMS, enviar emails de
forma assíncrona, criar e acessar WebServices SOAP usando os plugins
&lt;a href="http://grails.org/plugin/cxf"&gt;CXF&lt;/a&gt; e &lt;a href="http://grails.org/plugin/cxf-client"&gt;CXF
client&lt;/a&gt;, criar e acessar
WebServices REST com os plugins &lt;a href="http://grails.org/plugin/jaxrs"&gt;JAX-RS&lt;/a&gt;
e &lt;a href="http://grails.org/plugin/rest-client-builder"&gt;REST Client Builder&lt;/a&gt; e
também como habilitar gerenciamento e monitoração com o &lt;a href="http://grails.org/plugin/jmx"&gt;plugin
JMX&lt;/a&gt;. Ah, outra coisa legal que o Burt
mostra nesse capítulo é como usar o &lt;a href="http://grails.org/plugin/tcpmon"&gt;plugin
TCPMon&lt;/a&gt; para depurar as requisições que
chegam no servidor rodando em desenvolvimento -- ele funciona como um
&lt;em&gt;proxy&lt;/em&gt; rodando em outra porta e tem uma interface desktop pra
inspecionar os dados da requisições, bem interessante.&lt;/p&gt;
&lt;h3&gt;Configuração&lt;/h3&gt;
&lt;p&gt;Depois tem um capítulo dedicado ao assunto de configuração, que ensina uma
série de truques para organizar suas configurações. É bem útil, porque no
Grails as configurações podem ficar um pouco bagunçadas, então é legal dar uma
arrumada na casa de vez em quando. Como alguns arquivos suportam algumas
funcionalidades especiais, às vezes são necessários alguns truques pra
modularizá-los ou fazer as configurações específicas por ambiente.&lt;/p&gt;
&lt;h3&gt;Plugins&lt;/h3&gt;
&lt;p&gt;Esse capítulo é bem legal, explica como funciona o mecanismo de plugins
do Grails e ensina as boas práticas na hora de criar seu próprio plugin.
Curti bastante o esquema de plugins do Grails, é realmente bem poderoso:
a estrutura de um plugin é bem parecida a de uma aplicação, podendo
adicionar classes de domínio, controllers, filtros, recursos estáticos
(Javascript, CSS), beans do Spring, e tudo o mais.&lt;/p&gt;
&lt;p&gt;Isso quer dizer que é fácil de quebrar suas aplicações em vários
plugins, bastando você manter as relações de dependências adequadas
entre as classes -- e o livro tem uma seção dedicada a fazer justamente
isso, incluindo publicar os plugins num repositório local com o
&lt;a href="http://www.jfrog.org/"&gt;Artifactory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nesse mesmo capítulo, o Burt demonstra sua experiência no
desenvolvimento de vários plugins detalhando seu workflow para
desenvolver e testar vários plugins, usando diferentes versões do
framework -- muitas dicas úteis.&lt;/p&gt;
&lt;h3&gt;Segurança&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;“O propósito desse capítulo é assustar você.”&lt;/em&gt; É assim que começa o capítulo
do Programming Grails sobre segurança -- que é excelente, por sinal! Aqui, Burt
explica vários riscos (os &lt;a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project"&gt;Top Ten da
OWASP&lt;/a&gt;, o livro
usou os de 2010, mas já saiu uma lista atual) aos quais sua aplicação pode
estar vulnerável caso você não tome certos cuidados.&lt;/p&gt;
&lt;p&gt;O livro dá várias dicas de como melhorar a segurança das aplicações, e
explica como usar alguns plugins interessantes que ajudam a melhorar
alguns aspectos de segurança. Como o assunto é complicado, vou apenas
dizer aqui alguns pontos muito importantes que todo mundo usando Grails
precisa ficar ligado:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1)&lt;/strong&gt; Considere configurar o codec de HTML por padrão para as páginas
GSP, no &lt;em&gt;Config.groovy&lt;/em&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;grails&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;default&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;codec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Dessa forma, as variáveis usadas nas páginas GSP serão escapadas com
HTML por padrão -- a configuração (&lt;em&gt;'none'&lt;/em&gt;) não escapa nada, uma
escolha infeliz que tem sido mantida pra não quebrar compatibilidade.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2)&lt;/strong&gt; Não implemente seu próprio mecanismo de autenticação e autorização. Use
os plugins/frameworks testados e aprovados pela comunidade (uso e recomendo o
&lt;a href="http://www.springsource.org/spring-security"&gt;Spring Security&lt;/a&gt;, cujo &lt;a href="http://grails.org/plugin/spring-security-core"&gt;plugin
pro Grails&lt;/a&gt; foi feito por
ninguém menos que o próprio Burt Beckwith). Tem muitos tutoriais de Grails na
Internet ensinando a fazer autorização usando filtros, implicando que é fácil
de fazer autorização -- dica: não é! À medida que vai desenvolvendo a
aplicação, você descobre que precisa de vários outros recursos relacionados:
&lt;em&gt;hash&lt;/em&gt; decente para as senhas, gerenciamento da sessão, fluxo para “esqueci a
senha”, etc. Se você implementar esses recursos você mesmo, aumenta bastante o
risco de acabar fazendo alguma coisa errada. Portanto, faça uso do que está
disponível, invista em estudar os plugins disponíveis -- vale a pena.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3)&lt;/strong&gt; Capriche. Teste sua segurança com testes funcionais, não com testes
unitários ou de integração que usam mocks e stubs. Faça revisão de código com a
equipe para procurar vulnerabilidades em potencial.  Mantenha-se atualizado
sobre as atualizações do framework. Aprenda &lt;a href="http://blog.springsource.org/2012/03/28/secure-data-binding-with-grails/"&gt;a fazer data binding com
segurança&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Cloud, AOP e Upgrade&lt;/h3&gt;
&lt;p&gt;O livro dedica um breve capítulo explicando o deploy no Cloud, falando das
vantagens/desvantagens, e explicando passo-a-passo como fazer deploy de
aplicações que usam banco de dados no &lt;a href="http://www.cloudfoundry.com/"&gt;Cloud
Foundry&lt;/a&gt; e &lt;a href="http://www.heroku.com/"&gt;Heroku&lt;/a&gt;, e
algumas configurações para fazer escalar. Curti! =)&lt;/p&gt;
&lt;p&gt;A seguir, vem um trecho interessante sobre as técnicas de &lt;a href="http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_orientada_a_aspecto"&gt;programação
orientada a
aspectos&lt;/a&gt;
disponíveis por padrão no Grails (basicamente, as mesmas já disponíveis no
Spring só que empoderadas pela linguagem Groovy), e também como adicionar
outras capacidades usando o &lt;a href="http://grails.org/plugin/aspectj"&gt;plugin AspectJ&lt;/a&gt;.
Burt ilustra AOP com uma maneira de avisar se algum método das classes de
domínio que altera o estado do banco está sendo chamado fora de um contexto de
transação -- &lt;em&gt;pretty cool stuff&lt;/em&gt;!&lt;/p&gt;
&lt;p&gt;Por fim, o último capítulo detalha os procedimentos para fazer upgrade de
aplicações para versões mais novas do Grails (Burt usa um método sofisticado
que inclui fazer um &lt;em&gt;diff&lt;/em&gt; com uma aplicação nova criada com a mesma versão da
aplicação legada, pra saber com precisão o que foi alterado), e faz um breve
histórico das mudanças nas versões mais importantes do Grails, explicando as
novidades e rumos tomados no framework.&lt;/p&gt;
&lt;p&gt;A maior mudança foi na versão 2.0, que trouxe vários plugins novos, adotou a
jQuery e muitas melhorias - e algumas quebras de compatibilidade. Algumas das
mudanças que causam quebra são: os métodos nos controllers também são
considerados como actions (antes eram apenas closures), os JOINs com Criteria
são INNER joins em vez de LEFT joins, alguns nomes dos recursos na configuração
dos logs mudaram e a inclusão do &lt;a href="http://grails.org/plugin/resources"&gt;plugin
resources&lt;/a&gt; pode forçar algumas alterações.
Sempre vale conferir &lt;a href="http://grails.org/doc/latest/guide/upgradingFromPreviousVersionsOfGrails.html"&gt;a documentação oficial na hora de fazer o
upgrade&lt;/a&gt;.
O Peter Ledbrook também tem algumas &lt;a href="http://pledbrook.github.io/grails-howtos/en/upgradeToGrails2.html"&gt;dicas para o upgrade para Grails
2&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Conclusão&lt;/h3&gt;
&lt;p&gt;Enfim, o livro é muito bom, recomendo fortemente pra quem esteja usando
Grails, descobri várias coisas novas e ainda quero botar em prática
várias idéias que aprendi nele. Como já disse no início, para quem quer
começar com Grails pode ser mais adequado usar outro material antes, mas
logo depois de pegar o jeito já pode partir para o &lt;em&gt;Programming Grails&lt;/em&gt;
-- a satisfação é garantida.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;That’s all, folks! =)&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 28 Jul 2013 10:12:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-07-28:2013/07/28/programming-grails----a-aventura-continua.html</guid></item><item><title>Goodbye, JSF!</title><link>/2013/06/23/goodbye-jsf.html</link><description>&lt;p&gt;Ok, se você não é javeiro, talvez nunca tenha ouvido falar em JSF. &lt;em&gt;No
worries&lt;/em&gt;, você não está perdendo muita coisa.&lt;/p&gt;
&lt;p&gt;Porém, se você aprendeu a programar em Java, talvez nem tenha procurado
aprender outra linguagem de propósito geral (... &lt;em&gt;ainda&lt;/em&gt;, I hope) mas já
se interessou por programar para a Web, nesse caso provavelmente já
ouviu falar, talvez deu uma conferida, ou quem sabe está ferrado tendo
que manter aplicações escritas com o &lt;a href="http://pt.wikipedia.org/wiki/JavaServer_Faces"&gt;Java Server Faces -- aka
JSF&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Os motivos para o meu ranço com JSF são vários. Alguns problemas que eu
vejo são técnicos, outros são culturais e outros são meio filosóficos,
mesmo.&lt;/p&gt;
&lt;p&gt;Há uns anos atrás, quando tive meu primeiro contato com JSF, odiei a
tecnologia com todas as minhas forças. Meu background com Web era
principalmente
&lt;a href="http://en.wikipedia.org/wiki/LAMP_(software_bundle)"&gt;LAMP&lt;/a&gt; -- muito PHP
e um pouquinho de Python/Django -- e todo aquele mundo JSF de
componentes no servidor era uma coisa &lt;strong&gt;muito&lt;/strong&gt; distante. Continua sendo
distante de certa forma, mas hoje a coisa até que está melhorzinha para
o JSF.&lt;/p&gt;
&lt;p&gt;Enfim, pude ter uma compreensão melhor da coisa quando, depois de passar
2 anos reclamando, resolvi brigar de volta. Decidi lutar com o dragão,
ia aprender como a bagaça funcionava, pra depois poder xingar com
propriedade -- em um post comprido no blog! :P&lt;/p&gt;
&lt;p&gt;Comecei a acompanhar a &lt;a href="http://stackoverflow.com/tags/jsf/" title="JSF taginfo"&gt;tag JSF no
StackOverflow&lt;/a&gt;, li e
reli as respostas e perguntas dos top usuários e comecei a tentar
responder as perguntas de outros -- a velha tática de aprender tentando
resolvendo problemas mais ou menos reais.&lt;/p&gt;
&lt;p&gt;Nesse caminho, acabei aprendendo bastantes coisas, e à medida que fui
dominando mais a parada eu estava até já quase começando a gostar -- mas
aí aconteceu que  &lt;a href="http://grails.org"&gt;Grails&lt;/a&gt; meio que &lt;a href="https://eljunior.wordpress.com/2013/06/03/aventurando-se-com-grails/"&gt;se meteu no meio
da
história&lt;/a&gt;
e o meu ranço com JSF voltou. Aliás, estou atualmente lendo o livro
&lt;a href="http://shop.oreilly.com/product/0636920024750.do" title="Programming Grails - pagina do livro"&gt;Programming
Grails&lt;/a&gt; e
estou descobrindo tudo tão mais fácil que Java/JSF, que decidi
compartilhar logo meu &lt;em&gt;rant&lt;/em&gt; antes que eu apague da memória. :P&lt;/p&gt;
&lt;h1&gt;Problema técnico chato de JSF&lt;/h1&gt;
&lt;p&gt;O grosso da lógica de UI fica no lado servidor. &lt;em&gt;Yeah&lt;/em&gt;, os browsers
estão cada vez mais espertos, a tendência tem sido
&lt;em&gt;fat-client/thin-server&lt;/em&gt; já há algum tempo, e JSF ainda tá nessa de usar
o servidor pra controlar quase tudo da interface. Isto significa que
mesmo para pequenas atualizações na tela do lado cliente, você
&lt;strong&gt;precisa&lt;/strong&gt; fazer novas requisições AJAX ao servidor.&lt;/p&gt;
&lt;p&gt;Pior, para suportar isso, o objeto que representa a árvore de
componentes (view state) de cada página XHTML é armazenada no servidor.
Para cada acesso... Para cada usuário... Por várias requisições
consecutivas... [1]&lt;/p&gt;
&lt;p&gt;Está vindo aí no &lt;a href="http://jdevelopment.nl/jsf-22/" title="JSF 2.2"&gt;JSF 2.2&lt;/a&gt; o
suporte a &lt;a href="http://jsfcorner.blogspot.com.br/2013/05/jsf-22-stateless-views-explained.html"&gt;Stateless
Views&lt;/a&gt; (basicamente,
páginas que não precisem de armazenar a árvore no servidor) para amainar
o problema, mas como para usá-las você precisa abrir mão de várias
comodidades do framework
(&lt;a href="http://docs.oracle.com/javaee/6/api/javax/faces/bean/ViewScoped.html"&gt;@ViewScoped&lt;/a&gt;,
por exemplo), não percebo tanto avanço assim. [2]&lt;/p&gt;
&lt;h1&gt;Problema filosófico chato de JSF&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Design_by_committee"&gt;Design by comittee&lt;/a&gt;
-- no caso, não só de JSF, mas de &lt;a href="http://en.wikipedia.org/wiki/Java_Platform,_Enterprise_Edition"&gt;Java
EE&lt;/a&gt; em
geral. As coisas demoram muito pra evoluir esperando pelos comitês de
&lt;em&gt;experts&lt;/em&gt; resolverem as coisas, e não ficam com a melhor qualidade por
causa disso. Spring está aí sustentando a controvérsia há já alguns anos
-- existe uma velha discussão Spring (projeto graúdo open source
tradicional, evolui sem especificação) vs Java EE (uma cacetada de
especificações, todo um processo para sugestão de melhorias,
implementações de referência de cada especificação espalhadas em
projetos open source mundo afora e reunidas no
&lt;a href="https://glassfish.java.net"&gt;Glassfish&lt;/a&gt;) que já está meio gasta mas
&lt;a href="http://stackoverflow.com/questions/2822812/spring-3-0-vs-java-ee-6-0"&gt;ainda
sobrevive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uma das coisas chatas desse problema é que seguidamente algum ingênuo
que pensa de forma conservadora vai dizer pra você que é melhor usar
Java EE porque é “&lt;em&gt;standardized&lt;/em&gt;”, querendo dizer que é padronizado,
especificado e tudo o mais. Escolhendo Java EE você supostamente não se
prenderia a nenhum fabricante (já que tem várias implementações das
espeficações), e evita o “lock-in” que você está sujeito se usar Spring.
&lt;em&gt;OH NO, vamos ficar presos à uma solução “proprietária”&lt;/em&gt;! Nevermind que
o Spring é open source, e que existem muitos empreendimentos por aí
usando .NET e outras coisas &lt;em&gt;realmente&lt;/em&gt; proprietárias, do tipo em que o
&lt;em&gt;lock-in&lt;/em&gt; é real, e tudo continua funcionando mesmo assim. Dá pra
imaginar?&lt;/p&gt;
&lt;p&gt;Fora que você não ganha muita liberdade de escolha indo com Java EE. O
que acaba acontecendo é que você acaba escolhendo um servidor de
aplicação, pelo menos uma biblioteca de componentes e fica preso neles
até o fim. Experimenta mudar pra ver se você não está em &lt;em&gt;vendor
lock-in&lt;/em&gt;... E agora?&lt;/p&gt;
&lt;p&gt;Enfim, na minha opinião, esses argumentos são balela. As reais vantagens
e desvantagens que diferenciam um e outro estão relacionadas a políticas
de configuração. Com Spring, o &lt;em&gt;deploy&lt;/em&gt; é usualmente obter um WAR que já
tem todas as configurações que a aplicação precisa dentro, e basta
jogá-lo no servidor de aplicação -- a configuração de ambiente é
usualmente feita em tempo de &lt;em&gt;build&lt;/em&gt;. Com Java EE, você precisa fazer
todas as configurações necessárias para a aplicação (datasources, filas,
etc) no servidor de aplicação (ainda bem que a interface pra configurar
é padrão em todos os servidores de aplicação... &lt;em&gt;NOT!&lt;/em&gt;), e geralmente
tem alguém responsável pela configuração que acaba mexendo nos WARs,
EARs e JARs da vida. Como algumas empresas têm equipes dedicadas para
cuidar da infra Java (e têm medo de deixar os desenvolvedores mexer no
banco de produção), o Java EE é jogo pra elas.&lt;/p&gt;
&lt;h1&gt;Problema cultural chato de JSF&lt;/h1&gt;
&lt;p&gt;Acabo classificando esse problema como cultural porque é uma coisa que
fica meio "aceita" pelo pessoal, e se reflete na maioria das aplicações.
Basicamente, a curva de aprendizado é escarpada e longa &lt;strong&gt;demais&lt;/strong&gt;!
Fazer JSF de um jeito decente exige aprender o famoso &lt;a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnaqq.html"&gt;ciclo de
vida&lt;/a&gt; (um
&lt;a href="https://javaserverfaces.java.net/nonav/docs/2.0/javadocs/javax/faces/lifecycle/Lifecycle.html"&gt;objeto&lt;/a&gt;
usado pra controlar toda a putaria que exige programação Web baseada em
componentes com Java), sacar que o código dentro do seu XHTML passa por
várias fases de execução diferentes (construção da view, renderização da
view, HTML renderizado rodando no browser) e uma cacetada enorme de
pegadinhas não-intuitivas. Aprender todas essas coisas leva um tempo
danado!&lt;/p&gt;
&lt;p&gt;O resultado é que você só aprende a coisa pela metade, decidindo que não
vale a pena ir muito a fundo, acaba se conformando com as soluções
existentes e fica esperando que alguém mais encarnado resolva os
problemas parecidos com os que você está tentando resolver -- pra depois
você copiar a solução. A galera que programa em JSF acaba conhecendo o
&lt;a href="http://balusc.blogspot.com" title="BalusC's blog"&gt;BalusC&lt;/a&gt; de uma maneira ou
outra, basicamente porque ele resolve a maioria dos problemas práticos
de JSF antes de todo mundo. Esse cara é um herói de Java EE -- ele manja
mais de JSF que os próprios desenvolvedores da parada!&lt;/p&gt;
&lt;p&gt;Ele faz algumas coisas importantíssimas que mantêm JSF vivo: mantém o
&lt;a href="http://code.google.com/p/omnifaces"&gt;OmniFaces&lt;/a&gt; (um projeto de código
aberto simplesmente imperdível pra quem programa JSF 2.x), escreve
tutoriais &lt;a href="http://balusc.blogspot.com"&gt;bem completos e compreensíveis no seu
blog&lt;/a&gt;, e responde ativamente as &lt;a href="http://stackoverflow.com/tags/jsf*" title="tag JSF no SO"&gt;perguntas
no Stackoverflow&lt;/a&gt;.
Aprendi muito desse cara -- além de ser um
&lt;a href="http://en.wikipedia.org/wiki/Maven"&gt;maven&lt;/a&gt; de Java/JSF, é um cara muito
generoso compartilhando seu conhecimento e sempre atencioso. &lt;em&gt;Hey,
Bauke, all the JSF devs in the world thank their gods for your very
existence and spetacular work. You rock, dude!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Bem, mas como ele é ele, e eu sou eu, ele provavelmente está nesse
momento estudando, produzindo, escrevendo ou &lt;a href="http://stackoverflow.com/tags/jsf/"&gt;ajudando a galera no
SO&lt;/a&gt;, enquanto eu tô aqui, escrevendo
só mais um &lt;em&gt;rant&lt;/em&gt; no blog.&lt;/p&gt;
&lt;p&gt;Enfim, para esse post não ficar só na reclamação, vou usar o velho
truque de jornalista e colocar aqui...&lt;/p&gt;
&lt;h1&gt;10 coisas que todo desenvolvedor JSF precisa saber&lt;/h1&gt;
&lt;p&gt;Ok, está mais para 10 perguntas e respostas do StackOverflow que todo
desenvolvedor JSF precisa ler, mas tá valendo! :)&lt;/p&gt;
&lt;h2&gt;1. &lt;a href="http://stackoverflow.com/questions/3106452/how-do-servlets-work-instantiation-session-variables-and-multithreading"&gt;Como funcionam os tais servlets? O que acontece quando eu inicio uma aplicação, e em que ordem?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Entender como funcionam os servlets, filtros, listeners, as sessões e
como funciona tudo isso em cima do protocolo HTTP ajuda bastante na hora
de resolver problemas -- são os fundamentos de Java Web. A explicação
concisa e bem completa contida nessa resposta do BalusC simplesmente não
tem preço.&lt;/p&gt;
&lt;h2&gt;2. &lt;a href="http://stackoverflow.com/questions/2090033/why-jsf-calls-getters-multiple-times"&gt;Porque os métodos getters são chamados várias vezes durante a mesma requisição?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Boa pergunta! Leia essa pra saber por que você não deve fazer chamadas
de acesso ao banco dentro de um método &lt;em&gt;getAlgumaCoisa()&lt;/em&gt; nos seus
backing beans. E sim, eu também já fiz isso antes e tive que mudar
tudo... Contra-intuitivo, ou não?&lt;/p&gt;
&lt;h2&gt;3. &lt;a href="http://stackoverflow.com/questions/2118656/hcommandlink-hcommandbutton-is-not-being-invoked"&gt;Meu botão ou link não está sendo acionado! Ai mel dels, e agora?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Rá! Você caiu na armadilha! Leia todos os itens possíveis nessa
resposta, é uma excelente checklist na hora de depurar problemas. Você
vai acabar aprendendo um bocadinho de JSF, vai se dar conta que o BalusC
é um herói por conseguir fazer as coisas acontecerem mesmo JSF sendo a
droga que é -- e escrever respostas completíssimas no SO.&lt;/p&gt;
&lt;p&gt;Quero dizer, olhe para aquela lista! Ninguém devia ter TANTO possíveis
problemas afetando se um botão vai realmente fazer o esperado! Talk
about bad developer UX...&lt;/p&gt;
&lt;h2&gt;4. &lt;a href="http://stackoverflow.com/questions/4317684/when-should-i-use-houtputlink-instead-of-hcommandlink"&gt;Quando devo usar links e quando usar commandLinks?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;HTTP: GET vs POST.  Navegação/favoritabilidade vs. ações do tipo altera/cria
alguma coisa. A maioria dos desenvolvedores JSF levaram 10 anos para aprender
&lt;a href="http://www.w3.org/2001/tag/doc/whenToUseGet.html"&gt;quando usar GET vs POST&lt;/a&gt;.
Alguns ainda não aprenderam...  &lt;/p&gt;
&lt;h2&gt;5. &lt;a href="http://stackoverflow.com/questions/4994458/how-can-i-pass-a-parameter-to-a-commandlink-inside-a-datatable"&gt;Como passar parâmetro para um commandLink dentro de um datatable?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Datatables são basicamente inúteis se você não puder fazer uma ação para
agir no registro de uma linha. Isso às vezes é mais difícil do que
parece. Leia essa para não sofrer na próxima vez que precisar fazer
isso. E não seja bobo: se estiver usando um container antigo, &lt;a href="http://stackoverflow.com/questions/3284236/invoke-direct-methods-or-methods-with-arguments-variables-parameters-in-jsf"&gt;use a
JBoss-EL logo e largue de
frescura&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;6. &lt;a href="http://stackoverflow.com/questions/10726653/by-default-jsf-generates-unusable-ids-which-are-incompatible-with-css-part-of"&gt;Meu jQuery não tá funcionando! #comofas&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JSF gera ids no HTML usando o dois-pontos &lt;strong&gt;':'&lt;/strong&gt; como separador, isso
acaba gerando alguma confusão porque o dois-pontos é um separador com
significado diferente para a nossa &lt;em&gt;&lt;a href="http://www.jquery.com" title="jQuery rocks!"&gt;beloved Javascript library
jQuery&lt;/a&gt;&lt;/em&gt;. Aprenda como evitar ser
mordido por esse problema.&lt;/p&gt;
&lt;p&gt;Talvez você possa aproveitar o ensejo pra mudar de hábito: como atrelar
comportamento pelo &lt;em&gt;id&lt;/em&gt; do elemento HTML não escala, há quem digo que é
melhor usar sempre &lt;em&gt;classes&lt;/em&gt;. Dizem que é como o Gmail faz, mas nunca
conferi... (sim, eu tenho medo do JavaScript compilado do Gmail).&lt;/p&gt;
&lt;h2&gt;7. &lt;a href="http://stackoverflow.com/tags/composite-component/info"&gt;Como usar Composite Components?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, dessa vez o link não é para uma pergunta/resposta no SO, mas para a
wiki da tag composite-component. Aí tem um tutorial bacana ensinando a
criar um &lt;a href="http://docs.oracle.com/javaee/6/tutorial/doc/giqzr.html"&gt;Composite
Component&lt;/a&gt;. Se
você está usando JSF 2.x e ainda não fez algo do tipo, tire uma meia
horinha pra seguir o tutorial lá, vale muito a pena -- é a maneira mais
efetiva de reuso para as páginas JSF.&lt;/p&gt;
&lt;h2&gt;8. &lt;a href="http://stackoverflow.com/questions/6822000/when-to-use-uiinclude-tag-files-composite-components-and-or-custom-componen"&gt;Facelets templates, Facelets tags, Composite Components, Custom Components, aaargh! WTF are they about, anyway?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Pois é, era de esperar que reuso em um framework baseado em componentes
fosse algo trivial, claro, tranquilo e sussa. &lt;em&gt;Hmmmm, not really&lt;/em&gt;! Você
ainda precisa ficar ligado em muita coisa pra fazer as coisas
funcionarem do jeito que você quer.&lt;/p&gt;
&lt;p&gt;Acho que a dica maior aqui é que os ids dos objetos dentro dos
componentes são únicos para a própria instância, isto é, cada vez que
você usar o componente numa página, os outros componentes dentro dele
terão identificador prefixado pelo id do componente que você criou. Isso
facilita na hora de fazer componentes AJAX reusáveis, porque o alvo das
alterações (o que você usa no render) sempre terá uma identificação
única para aquele componente.&lt;/p&gt;
&lt;h2&gt;9. &lt;a href="http://balusc.blogspot.com.br/2011/09/communication-in-jsf-20.html"&gt;Comunicação em JSF 2.0 -- como passar os dados que eu quero para onde eu preciso&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Bom... se você está usando JSF 2.x, provavelmente já chegou esse artigo
antes. Eu nem precisaria postar, porque é tão batata que todo mundo
usando JSF 2.x deve cair nele toda hora, mas como tenho a impressão que
meu eleitorado não gosta de textos grandes, é bom colocar na lista. Você
não vai ler agora mesmo, então sugiro favoritar a página e ir lendo aos
poucos durante a semana.&lt;/p&gt;
&lt;h2&gt;10. &lt;a href="http://stackoverflow.com/questions/3623911/what-are-the-main-disadvantages-of-java-server-faces-2-0"&gt;Por fim, uma breve história de JSF&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Apesar de reclamar um bocado sobre JSF, reconheço que ele está
melhorando, e nos últimos anos tem andado melhor do que antes. É bom
estar a par de como a coisa começou, os problemas foram aparecendo, como
eles foram sendo (lentamente) resolvidos, como outros apareceram no
processo, e como alguns ainda estão esperando solução. Toda tecnologia
acaba tendo um certo ciclo de vida, e é sempre bom saber o caminho que
está seguindo as ferramentas que você está investindo.&lt;/p&gt;
&lt;p&gt;Eu, por exemplo, comecei a me afastar de JSF depois que &lt;a href="http://www.infoq.com/news/2012/01/jsf-update-2.x"&gt;o Ed Burns
(lead developer de JSF) confirmou que JSF vai continuar sempre mantendo
a maior parte da lógica de UI no lado
servidor&lt;/a&gt;. Realmente
faz sentido pra JSF se manter assim, afinal, sempre vai existir
desenvolvedores que não estão muito a fim de aprender coisas novas,
empresas que vão postergar upgrades por anos, enfim... Ainda vai ter
muita aplicação JSF pra ser mantida nos próximos 20 anos. Mas eu prefiro
investir numa tecnologia que me ajude a alavancar as demais tecnologias
da Web (especialmente as que eu preciso conhecer de qualquer forma, como
HTML/CSS/HTTP), e não uma em que as &lt;a href="http://en.wikipedia.org/wiki/Leaky_abstraction" title="abstrações vazadas na Wikipedia em inglês"&gt;abstrações simplesmente vazam
demais&lt;/a&gt; e
dificultam usar os outros blocos da construção. Para mim, JSF está
definitivamente no último grupo. So... &lt;em&gt;Goodbye, JSF!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;[1] No Mojarra, a implementação de referência de JSF, o default é
armazenar a &lt;em&gt;view&lt;/em&gt; por 15 requisições consecutivas; outras
implementações/configurações podem variar.&lt;/p&gt;
&lt;p&gt;[2] A idéia de stateless views em JSF foi implementada pela primeira vez
por um consultor australiano, que pelo jeito &lt;a href="http://www.industrieit.com/blog/2011/11/stateless-jsf-high-performance-zero-per-request-memory-overhead/"&gt;compartilha a mesma idéia
de que UI no servidor é
roubada&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 23 Jun 2013 13:31:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-06-23:2013/06/23/goodbye-jsf.html</guid></item><item><title>Aventurando-se com Grails</title><link>/2013/06/03/aventurando-se-com-grails.html</link><description>&lt;p&gt;Estou usando &lt;a href="http://www.grails.org"&gt;Grails&lt;/a&gt; ativamente há alguns meses
atrás. Comecei fazendo manutenção numa aplicação legada usando uma
versãozinha do Grails já bem gasta. Eventualmente, acabei migrando de
vez, usando Grails 2.x para praticamente todas as aplicações novas lá no
trampo. O bichinho é muito bom!&lt;/p&gt;
&lt;p&gt;Quem caiu aqui para ler uma simplificação grosseira, lá vai: Grails é
Rails pra &lt;a href="http://groovy.codehaus.org"&gt;Groovy&lt;/a&gt;, e
&lt;a href="http://groovy.codehaus.org/"&gt;Groovy&lt;/a&gt; é Ruby + Java. &lt;a href="#f1"&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Groovy, pelo menos, inspira-se bastante em ambas as linguagens. De fato,
Groovy é um “Ruby” para os programadores Java que têm preguiça de
aprender outra linguagem. Qualquer programador fluente na linguagem Java
pode &lt;a href="http://groovy.dzone.com/news/java-groovy-few-easy-steps"&gt;aprender o básico de Groovy em uma horinha de boa
vontade&lt;/a&gt; e há
&lt;a href="http://streetsaheadllc.com/article/ten-reasons-every-java-developer-should-learn-groovy--part-1-"&gt;vários&lt;/a&gt;
&lt;a href="http://streetsaheadllc.com/article/ten-reasons-every-java-developer-should-learn-groovy--part-2-"&gt;motivos&lt;/a&gt;
muito bons para fazer isso.&lt;/p&gt;
&lt;p&gt;Mas não vou ficar explicando aqui &lt;a href="http://pt.wikipedia.org/wiki/Groovy"&gt;o que é
Groovy&lt;/a&gt; e &lt;a href="http://pt.wikipedia.org/wiki/Grails"&gt;o que é
Grails&lt;/a&gt;, a Wikipedia tá aí pra
isso. Só quero anotar algumas coisas, mesmo -- também não é como se você
estivesse com as expectativas lá muito altas. :P&lt;/p&gt;
&lt;p&gt;Como você talvez já se deu conta, as tais &lt;a href="http://pt.wikipedia.org/wiki/Linguagem_de_dom%C3%ADnio_espec%C3%ADfico"&gt;linguagens de domínio
específico
(DSLs)&lt;/a&gt;
representam hoje &lt;a href="http://eljunior.wordpress.com/2012/12/03/fatos-e-falacias-da-engenharia-de-software-notas-do-livro/"&gt;nossa melhor chance de conseguir reuso em grande
escala&lt;/a&gt;
-- isto é, reuso de soluções para problemas genéricos. Groovy, a
linguagem que empodera Grails, tem vários &lt;a href="http://docs.codehaus.org/display/GROOVY/Writing+Domain-Specific+Languages"&gt;recursos justamente pra
facilitar a criação de
DSLs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E Grails é recheado dessas linguagenzinhas. &lt;a href="#f2"&gt;[2]&lt;/a&gt; Tem DSLs para as
configurações em diferentes ambientes, pra customizar o mapeamento de
tabelas no banco de dados, pra configurar recursos estáticos (arquivos
CSS, JS, etc), pra fazer consultas no banco de maneira mais legível, pra
declarar regras de validação, enfim, pra uma pancada de coisa. E tem uma
pancada de &lt;a href="http://grails.org/plugins/"&gt;plugins extras&lt;/a&gt; pra você usar
que adicionam ainda outras.&lt;/p&gt;
&lt;p&gt;Isso é muito legal porque significa que você consegue fazer muito
escrevendo bem pouco. Compressão. Eu curto. :)&lt;/p&gt;
&lt;p&gt;Bem, o caso é que eu tô curtindo muito ter &lt;a href="http://grails.org/plugin/console"&gt;um REPL dentro da própria
aplicação&lt;/a&gt;, que permite eu vasculhar
os objetos que estão escondidos lá no servidor de aplicação, executar
queries no mesmo banco que a aplicação tá usando, checar a configuração
da aplicação rodando e até mesmo esboçar um novo &lt;em&gt;feature&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Além disso, várias coisas que você sofre pra configurar nas aplicações
Java Web comuns (gerenciamento de dependências, build automatizado fora
da IDE, maneira fácil de rodar os testes unitários e de integração,
gerenciamento dos recursos estáticos), com Grails você já ganha tudo
prontinho de graça, bem organizado e em geral, muito mais fácil de
manter.&lt;/p&gt;
&lt;p&gt;Nem tudo são flores, todavia. Não curto muito o comportamento default do
&lt;a href="http://www.grails.org/doc/latest/ref/Domain%20Classes/save.html"&gt;save()&lt;/a&gt;,
essa parada de ele falhar silenciosamente quando a validação não passa.
Estou a par dos &lt;a href="http://blog.springsource.com/2010/06/23/gorm-gotchas-part-1/"&gt;motivos que levaram os desenvolvedores do Grails a
fazer dessa
forma&lt;/a&gt;,
mas isso é simplesmente contrário ao esperado -- &lt;em&gt;not the best UX, guys,
and you know it&lt;/em&gt;. Já que não podíamos ter o parzinho &lt;em&gt;save&lt;/em&gt; e &lt;em&gt;save!&lt;/em&gt;
como no Rails, bem que o comportamento poderia ter sido invertido aqui
-- &lt;em&gt;save()&lt;/em&gt; e &lt;em&gt;saveQuietly(),&lt;/em&gt; talvez?&lt;/p&gt;
&lt;p&gt;De qualquer forma, tarde demais. Ainda assim, agora é só a gente lembrar
de colocar &lt;code&gt;grails.gorm.failOnError=true&lt;/code&gt; lá no &lt;code&gt;Config.groovy&lt;/code&gt; sempre
que criar uma aplicação nova, e todo mundo fica feliz de novo. :)&lt;/p&gt;
&lt;p&gt;&lt;a name="f1"&gt;&lt;/a&gt;&lt;strong&gt;[1]&lt;/strong&gt; É, eu sei, Rails hoje em dia é um animal bem
diferente, mas o fato é que Grails tem muita semelhança com as primeiras
versões do Rails e ainda se inspira muito nele.&lt;/p&gt;
&lt;p&gt;&lt;a name="f2"&gt;&lt;/a&gt;&lt;strong&gt;[2]&lt;/strong&gt; Não, as sintaxes das DSLs não são um problema
-- todas elas são meio parecidas, justamente porque usam as mesmas
&lt;a href="http://groovy.codehaus.org/Closures"&gt;construções básicas&lt;/a&gt;. Você nem
precisa saber que são DSLs. ;-)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Mon, 03 Jun 2013 20:09:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-06-03:2013/06/03/aventurando-se-com-grails.html</guid></item><item><title>Desenvolvimento de software é um esporte de equipe</title><link>/2013/04/27/desenvolvimento-de-software-e-um-esporte-de-equipe.html</link><description>&lt;p&gt;Dãã, &lt;em&gt;grande notícia&lt;/em&gt;, certo? Todo mundo sabe disso, não precisa nenhum
anúncio. Bem, pelo menos não era pra precisar. Todavia, pelo que converso com outros amigos
desenvolvedores e pela minha própria experiência mesmo, seria muito bom
se fôssemos lembrados disso mais vezes.&lt;/p&gt;
&lt;p&gt;Há uns dias li o fantástico
livrito &lt;a href="http://shop.oreilly.com/product/0636920018025.do"&gt;&lt;em&gt;Team Geek, a Software Developer’s Guide to Working Well with
Others&lt;/em&gt;&lt;/a&gt; (ou &lt;em&gt;Equipe
Geek, um Guia do Desenvolvedor para Trabalhar Bem com Outros&lt;/em&gt;). Deixa
ver, como descrever... Um exercício catártico! Um banho na alma! Todo
mundo envolvido em desenvolvimento de software deveria ler esse livro e
colocar nos seus &lt;em&gt;top 10&lt;/em&gt;! E a capa é joinha:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.amazon.com/Team-Geek-Software-Developers-Working/dp/1449302440"&gt;
&lt;img width="300" src="http://akamaicovers.oreilly.com/images/0636920018025/lrg.jpg" /&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Contrastando com
&lt;a href="http://www.amazon.com/Peopleware-Productive-Projects-Teams-Second/dp/0932633439"&gt;&lt;em&gt;Peopleware&lt;/em&gt;&lt;/a&gt;,
que está por aí (sendo ignorado) há já alguns anos e é mais voltado para
gerentes, &lt;a href="http://www.amazon.com/Team-Geek-Software-Developers-Working/dp/1449302440"&gt;&lt;em&gt;Team
Geek&lt;/em&gt;&lt;/a&gt;
é para os desenvolvedores/engenheiros de software aprenderem a trabalhar
com humanos -- e justamente por isso que é tão urgente.&lt;/p&gt;
&lt;p&gt;Bem, andaram me reclamando do tamanho dos posts, por isso vou tentar pegar leve
dessa vez aqui, mas você terá que ler o livro -- até porque ele é curto (194
páginas) e barato (10 dólares a edição Kindle). Além disso, tenho receio de
tentar resumi-lo: além de deixar grande demais, eu esqueceria coisas
importantes e você acabaria não lendo o livro -- o que você deve. Serve também
como uma boa desculpa para a minha preguiça, é claro. Mas ei, eu tenho outros
livros pra ler, ok? Faz meses que estou em 30% do &lt;em&gt;&lt;a href="http://www.amazon.com/Agile-Principles-Patterns-Practices-C/dp/0131857258" title="link do livro na Amazon"&gt;Agile Principles, Patterns
and Practices in
C#&lt;/a&gt;&lt;/em&gt; e tremo só de pensar em escrever sobre!&lt;/p&gt;
&lt;p&gt;Enfim, hoje você terá que se contentar com minha tradução livre de algumas
quotes não muito selecionadas, e depois decidir se vai &lt;a href="http://www.amazon.com/Team-Geek-Software-Developers-Working/dp/1449302440"&gt;ler o livro
sofregamente&lt;/a&gt;
ou ver &lt;a href="https://www.youtube.com/watch?v=q-7l8cnpI4k" title="Programming Well
with Others -- Social Skills for Geeks"&gt;algum&lt;/a&gt;
&lt;a href="https://www.youtube.com/watch?v=0SARbwvhupQ" title="The Myth of the Genius
Programmer"&gt;dos&lt;/a&gt; &lt;a href="https://www.youtube.com/watch?v=-F-3E8pyjFo" title="Open Source
Projects and Poisonous People"&gt;vídeos&lt;/a&gt; &lt;a href="https://www.youtube.com/watch?v=OTCuYzAw31Y" title="The Art of Organizational
Manipulation"&gt;da
dupla&lt;/a&gt; &lt;a href="http://www.red-bean.com/fitz/" title="Brian Fitzpatrick"&gt;Fitz&lt;/a&gt; e &lt;a href="http://www.red-bean.com/sussman/"&gt;Ben
Sussman&lt;/a&gt; antes.  &lt;/p&gt;
&lt;h3&gt;Citações -- livre tradução:&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;O fator que vai fazer ou ferrar&lt;code&gt;*&lt;/code&gt; sua carreira é quão bem você colabora com outras
pessoas.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; Tenho uma tradução alternativa um pouco mais colorida para esse verbo que
rima com o primeiro, mas que cai melhor numa conversa de bar... :D&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Pessoas são inerentemente imperfeitas.
Mas antes de entender os bugs em  seus colegas, você precisa entender
os bugs em você mesmo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;O Mito do Programador Gênio* é só mais um aspecto da nossa insegurança. A
maioria dos programadores temem compartilhar um trabalho que recém começaram
porque isto significa que os colegas vão enxergar seus erros e saber que o
autor do código não é um gênio. [...] A reação natural a isso é se esconder
em uma caverna e trabalhar sozinho. [...] Se você está trabalhando sozinho,
você está aumentando o risco de falhar e reduzindo seu potencial de
crescimento.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;* No Youtube tem &lt;a href="https://www.youtube.com/watch?v=CUF3y-H5jOs"&gt;um vídeo dos dois autores em busca do programador
gênio&lt;/a&gt;, funny stuff.&lt;/p&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Trabalhar sozinho é mais arriscado do que trabalhar com outros. Você pode
estar com medo que alguém roube sua idéia ou descubra que você não é um
gênio, mas você deveria estar com mais medo de gastar enormes quantidades de
tempo e energia trabalhando na coisa errada.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Os três pilares que fundamentam toda interação e colaboração saudável são: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Humildade:&lt;/strong&gt; você não é o centro do Universo, não é onisciente e nem
  infalível.  você está aberto a se melhorar:&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Respeito:&lt;/strong&gt; Você se importa genuinamente com as pessoas com quem
  trabalha, trata-os como seres humanos e aprecia suas habilidades e
  realizações.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Confiança:&lt;/strong&gt; Você acredita que os outros são competentes e farão a coisa
  certa, e está confortável em deixá-los pilotar quando apropriado.   [..]
  Quase todo conflito social pode ser rastreado a uma falta de humildade,
  respeito ou confiança.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;center&gt;
  &lt;a href="http://eljunior.files.wordpress.com/2013/04/i_don_know_what_do_you_think-balloon.png"&gt;&lt;img alt="Às vezes, a melhor coisa a se fazer é apenas dizer: &amp;quot;Eu não sei.&amp;quot;" src="http://eljunior.files.wordpress.com/2013/04/i_don_know_what_do_you_think-balloon.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;Às vezes, a melhor coisa a se fazer é apenas dizer: "Eu não sei."&lt;/h5&gt;
&lt;p&gt;&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quanto mais você for aberto a influência, mais você conseguirá influenciar;
quanto mais vulnerável você for, mais forte você parece.  [...] Lembre-se que
para ser ouvido adequadamente, você precisa primeiro ouvir os outros. [...]
Admitir que você errou engloba os três pilares: você demonstra &lt;strong&gt;humildade&lt;/strong&gt;,
é um sinal que você &lt;strong&gt;confia&lt;/strong&gt; na opinião dos outros, e as pessoas acabarão
por &lt;strong&gt;respeitar&lt;/strong&gt; sua honestidade e integridade.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Políticos profissionais são notórios por não admitir erro ou
ignorância, mesmo quando está patentemente óbvio que estão errados ou
não têm conhecimento sobre um assunto, e por causa disso as pessoas
não acreditam em nenhuma palavra do que eles dizem. Este comportamento
existe porque os políticos estão constantemente sob ataque dos
oponentes. Contudo, quando você está desenvolvendo software, é
desnecessário estar num estado constante de defesa -- seus colegas são
colaboradores, não competidores.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Uma forte cultura de equipe está aberta a mudanças que a melhorem e
resistente a mudanças radicais que a prejudiquem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Se você é um gerente e está se sentindo inseguro por algum motivo, uma
maneira de fazer que ninguém questione sua autoridade ou ameace seu
emprego é contratar pessoas que você pode manipular mais facilmente.
[...] Em vez disso, você deve se esforçar para contratar pessoas que
são mais inteligentes que você e que possam substituí-lo.
&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Esperança não é uma estratégia. Todavia, esperança é muito usada como
estratégia ao lidar com um funcionário que não está rendendo bem.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr /&gt;
&lt;blockquote&gt;
&lt;p&gt;Falhar é uma opção. Se você não está falhando de vez em quando, é
sinal que não está sendo inovador nem tomando riscos o suficiente.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So... that's it for today and thank you very much. :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sat, 27 Apr 2013 20:22:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-04-27:2013/04/27/desenvolvimento-de-software-e-um-esporte-de-equipe.html</guid></item><item><title>Coisas sobre o VIM que gostaria de ter sabido antes</title><link>/2013/04/07/coisas-sobre-o-vim-que-gostaria-de-ter-sabido-antes.html</link><description>&lt;p&gt;O &lt;a href="http://www.vim.org"&gt;Vim&lt;/a&gt; ainda é o meu editor predileto. Tentei substituí-lo
várias vezes, e as únicas alternativas que chegaram perto de ameaçá-lo foram
&lt;a href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; e &lt;a href="http://www.sublimetext.com"&gt;Sublime
Text&lt;/a&gt;: o primeiro pela quantidade de recursos, o
segundo pela interface joiada. Mas sempre que precisava resolver um problema
rapidão, acabava voltando pro &lt;a href="http://arstechnica.com/information-technology/2011/11/two-decades-of-productivity-vims-20th-anniversary/" title="Texto sobre os 20 anos de Vim"&gt;&lt;em&gt;good ol'&lt;/em&gt;
Vim&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ah, só antes de continuar, uma palavrinha para os perdidos: &lt;strong&gt;Vim&lt;/strong&gt; não é o
mesmo que &lt;strong&gt;vi&lt;/strong&gt;, okay? Eu não suportaria usar o vi... :P&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Mesmo que sempre gostasse do Vim, por um bom tempo me senti envergonhado por
continuar usando ele, pensando que nunca me esforçei de verdade em sair da zona
de conforto e usar outra coisa. Mas hoje, considerando que uso regularmente as
full-blown IDEs nos projetos Java - além de ter brincado bastante com Emacs e
ST2 --, se eu continuo voltando para o Vim, talvez não seja tanto assim por
falta de esforço meu pra sair da zona de conforto. Talvez seja porque ele seja
uma ferramenta que se encaixe bem no meu modo de pensar -- o meu &lt;em&gt;&lt;a href="http://www.joelonsoftware.com/uibook/fog0000000249.html"&gt;user
model&lt;/a&gt;&lt;/em&gt;. Talvez seja
porque ele é uma ferramenta &lt;a href="http://en.wikipedia.org/wiki/Principle_of_good_enough"&gt;boa o
suficiente&lt;/a&gt; pra mim.
Talvez, em vez de sentir vergonha de usar uma ferramenta com aparência
antiquada, eu deveria valorizá-lo mais e melhorar o meu próprio uso dele.&lt;/p&gt;
&lt;p&gt;Preferir o Vim não faz de mim um programador menos capaz - a não ser que eu
deixe de refatorar um código só porque meu editor não oferece as mesmas
facilidades duma IDE. (ahn, não quero falar dos programadores que amam sua IDE
mas nunca usam os recursos de refatoração...) Toda escolha envolve &lt;em&gt;tradeoffs&lt;/em&gt;,
e o Vim certamente tem suas desvantagens, mas é uma escolha muito válida e pode
ser mesmo muito divertida.&lt;/p&gt;
&lt;p&gt;Enfim, por isso que resolvi finalmente comprar o livro &lt;a href="http://pragprog.com/book/dnvim/practical-vim"&gt;Practical
Vim&lt;/a&gt; do &lt;a href="http://vimcasts.org"&gt;Drew
Neil&lt;/a&gt;, que estou lendo (27%, me diz o Kindle) e curtindo
muito!&lt;/p&gt;
&lt;p&gt;Acontece que o Vim, apesar de não ter uma boa usabilidade para usuários comuns,
é uma ferramenta muito boa pra programar ainda hoje. Quem não tem medo de
aprender novas linguagens e maneiras diferentes de fazer as coisas fica muito
bem com ele, obrigado. O foco do Vim não é usabilidade, mas eficiência. De
fato, é uma ferramenta ideal para &lt;a href="http://www.vimgolf.com"&gt;nerds de
eficiência&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Uma das primeiras coisas a sacar pra usar o Vim de maneira eficiente é que o
modo Normal não tem esse nome à toa: &lt;a href="http://www.viemu.com/a-why-vi-vim.html"&gt;é o modo planejado pra você usar durante
a maior parte do tempo&lt;/a&gt;. Se você tentar
maximizar o tempo no modo de inserção pra ter uma experiência mais parecida com
a dos outros editores, acabará perdendo as grandes vantagens do Vim -- como a
possibilidade de repetir ações, por exemplo.&lt;/p&gt;
&lt;p&gt;Devo ter aprendido isso de alguma forma há um tempo atrás, e já estou até bem
confortável com esse estilo, mas tem algumas coisinhas que ainda me deixam pra
trás no Vim. O que segue são algumas pequenas dicas da minha redescoberta do
Vim dos últimos meses, que teriam feito minha vida um bocado mais fácil se
tivesse sabido delas antes.&lt;/p&gt;
&lt;p&gt;1) É mais prático voltar para o modo Normal usando &lt;code&gt;&amp;lt;Ctrl-C&amp;gt;&lt;/code&gt; em vez de &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt;
-- especialmente se você mapeia a tecla &lt;code&gt;&amp;lt;caps lock&amp;gt;&lt;/code&gt; para um &lt;code&gt;&amp;lt;ctrl&amp;gt;&lt;/code&gt;
alternativo, como eu faço. Veja &lt;a href="http://vim.wikia.com/wiki/Avoid_the_escape_key"&gt;outras maneiras de evitar o
&lt;kbd&gt;Esc&lt;/kbd&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2) Se a meio caminho de uma seleção visual você se dá conta que começou do
lugar errado, você pode ir para o "outro lado" da seleção usando a tecla &lt;code&gt;o&lt;/code&gt;
(caractere o minúsculo), modificar o começo da seleção conforme necessário. Use
&lt;code&gt;o&lt;/code&gt; novamente pra voltar pro outro lado e continuar o que estava fazendo.&lt;/p&gt;
&lt;p&gt;3) Acabou de fazer uma operação numa seleção visual e precisa fazer outra na
mesma seleção? Use &lt;code&gt;gv&lt;/code&gt; pra reselecionar a última seleção, e mande ver.&lt;/p&gt;
&lt;p&gt;4) No modo Normal, &lt;code&gt;&amp;lt;ctrl-o&amp;gt;&lt;/code&gt; leva o cursor pra &lt;a href="http://vim.wikia.com/wiki/Jumping_to_previously_visited_locations"&gt;última posição antes de um
pulo&lt;/a&gt;.
&lt;code&gt;&amp;lt;ctrl-i&amp;gt;&lt;/code&gt; faz o caminho inverso. Aprenda isso hoje e me conte depois como você
usou 35 vezes no mesmo dia.&lt;/p&gt;
&lt;p&gt;5) Fazer scrolling com &lt;code&gt;&amp;lt;ctrl-f&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;ctrl-b&amp;gt;&lt;/code&gt; (mesmo que
&lt;code&gt;&amp;lt;pageup&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;pagedown&amp;gt;&lt;/code&gt;), &lt;code&gt;&amp;lt;ctrl-u&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;ctrl-d&amp;gt;&lt;/code&gt; (up/down conforme a
configuração scroll) e &lt;code&gt;&amp;lt;ctrl-y&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;ctrl-e&amp;gt;&lt;/code&gt; (sobe/desce uma linha) é mais
prático do que usar &lt;code&gt;&amp;lt;pageup&amp;gt;&lt;/code&gt;/&lt;code&gt;&amp;lt;pagedown&amp;gt;&lt;/code&gt;, setinhas e a rodinha do mouse.
Veja &lt;a href="http://vim.wikia.com/wiki/All_the_right_moves"&gt;mais sobre movimentação no
Vim&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;6) Descobri que manter uma cópia impressa do &lt;a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html"&gt;&lt;em&gt;cheatsheet&lt;/em&gt;
gráfico&lt;/a&gt; por
perto realmente ajuda a aprender mais coisas. Não tanto porque é fácil de
consultar, mas porque você acaba batendo o olho em alguma coisa útil quando
fica entediado. :)&lt;/p&gt;
&lt;p&gt;Sobre plugins, existem muitos que valem a pena conferir (tenho pelo menos uns
vinte instalados), mas alguns se tornam essenciais bem rapidinho:&lt;/p&gt;
&lt;p&gt;1) &lt;a href="https://github.com/tpope/vim-pathogen"&gt;Pathogen&lt;/a&gt; - ajuda a manter os
plugins atualizados e deixa muito fácil para experimentar plugins novos, só por
isso já vale muito a pena. Se ainda não conferiu o Pathogen, &lt;a href="http://tammersaleh.com/posts/the-modern-vim-config-with-pathogen"&gt;comece por
aqui&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2) &lt;a href="http://kien.github.io/ctrlp.vim/"&gt;CtrlP&lt;/a&gt; - ajuda a achar arquivos dentro do
diretório de um projeto. Se você usa Eclipse, pense &lt;code&gt;&amp;lt;ctrl-shift-r&amp;gt;&lt;/code&gt;, só que
melhor, porque usa uma busca "fuzzy" por padrão.&lt;/p&gt;
&lt;p&gt;3) &lt;a href="https://github.com/tpope/vim-surround"&gt;Surround&lt;/a&gt; - mão na roda na hora de
editar texto estruturado a la XML, HTML, etc. Veja um &lt;a href="http://net.tutsplus.com/tutorials/other/vim-essential-plugin-surround/"&gt;tutorial do Surround com
vídeo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Por enquanto é isso! :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 07 Apr 2013 15:41:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-04-07:2013/04/07/coisas-sobre-o-vim-que-gostaria-de-ter-sabido-antes.html</guid></item><item><title>Desenho de Interface do Usuário - para programadores</title><link>/2013/03/18/desenho-de-interface-do-usuario---para-programadores.html</link><description>&lt;p&gt;&lt;a href="http://www.joelonsoftware.com/"&gt;Joel Spolsky&lt;/a&gt; é um cara batuta e muito
inteligente. Ele é uma das figuras por trás do
&lt;a href="https://www.trello.com/"&gt;Trello&lt;/a&gt; e do
&lt;a href="http://stackoverflow.com/"&gt;StackOverflow&lt;/a&gt; (e seus &lt;a href="http://stackexchange.com/"&gt;sites
irmãos&lt;/a&gt;), dois produtos show de bola que têm
sido parte da minha vida diária ultimamente. Ele também é bastante
conhecido pelos excelentes textos que escreveu no blog sobre vários
aspectos de desenvolvimento de software, cobrindo assuntos desde
gerenciamento de projetos, arquitetura e design de software, usabilidade
e também contratação de funcionários. Resumindo: HERÓI! Se você lê
inglês, ou quer aprender (e se você é programador, isso é altamente
recomendado), dê uma olhada por lá! Aqui, vou deixar fácil:
&lt;a href="http://www.joelonsoftware.com/"&gt;http://www.JoelOnSoftware.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Num fim de semana desses, gastei duas horinhas lendo &lt;a href="http://www.joelonsoftware.com/uibook/fog0000000249.html"&gt;a versão online do
mini-livro dele voltado para programadores que trata desenho de
interfaces de
usuário&lt;/a&gt; (tem
&lt;a href="http://www.amazon.com/User-Interface-Design-Programmers-Spolsky/dp/1893115941"&gt;outra versão à venda na Amazon que parece ter mais
conteúdo&lt;/a&gt;).
Tempo muito bem gasto, diga-se de passagem, porque o conteúdo é muito
bom! O Joel escreve bem pra caramba, a leitura é muito engajante e as
histórias que ele conta são bem divertidas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; Recentemente, descobri que tem &lt;a href="http://brazil.joelonsoftware.com/" title="Tradução dos posts do Joel"&gt;uma tradução dos posts do Joel Spolsky que fizeram o livro aqui&lt;/a&gt;: &lt;a href="http://brazil.joelonsoftware.com/"&gt;http://brazil.joelonsoftware.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ele comenta sobre o desgosto que alguns programadores têm de fazer
interfaces, provavelmente baseado no medo injustificado de ter que fazer
&lt;a href="http://pt.wikipedia.org/wiki/Design_gr%C3%A1fico"&gt;design gráfico&lt;/a&gt; (não,
não é a mesma coisa que &lt;em&gt;desenho de interface -- UI design&lt;/em&gt;).
Programadores tendem a pensar sobre si mesmos como pessoas racionais,
com bom raciocínio mas fraco em arte. Todavia, Joel explica, desenho de
interface não é nenhuma arte misteriosa, e na verdade existem uma série
de regras e princípios que podem ser aplicados para melhorar a interface
dos programas para o usuário.&lt;/p&gt;
&lt;p&gt;O caso é que a interface é importante porque afeta as emoções das
pessoas. Quando um usuário não consegue fazer o que ele queria com o
software, fica frustrado. Infeliz, mesmo! Mesmo que sejam algumas
pequenas frustraçõezinhas, elas tendem a se somar, principalmente num
software que é usado frequentemente. E o resultado é um grupo de
usuários bem infelizes, no fim do dia. E eles vão botar a culpa no seu
software!&lt;/p&gt;
&lt;p&gt;Todavia, quando o usuário consegue fazer o que queria, o programa
funciona do jeito que ele esperava, o resultado é um usuário bem
animado. &lt;em&gt;Funcionou! Ripei um DVD! Que massa esse programa! \o/&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Por isso, a primeira coisa importante a se ter em mente é:&lt;/p&gt;
&lt;h3&gt;Uma interface é bem-feita quando o programa se comporta exatamente como o usuário esperava.&lt;/h3&gt;
&lt;p&gt;Todas as regras e princípios restantes são corolários a esta.&lt;/p&gt;
&lt;p&gt;Quando um usuário senta pra usar um programa, ele tem uma série de
expectativas sobre como ele acha que o programa vai funcionar. Se ele já
usou outros programas parecidos antes, vai achar que esse vai funcionar
mais ou menos como aquele outro. Essas expectativas que devemos tentar
descobrir, na hora de fazer uma interface pra o usuário. E você descobre
isso de um jeito muito científico, e muito simples: &lt;strong&gt;perguntando aos
usuários!&lt;/strong&gt; Você não precisa &lt;em&gt;fazer&lt;/em&gt; o que eles querem que você faça,
mas você deve pelo menos &lt;em&gt;ouvir&lt;/em&gt; o que eles têm a dizer.&lt;/p&gt;
&lt;p&gt;Em vez de ficar argumentando e discutindo qual o melhor jeito de tratar
determinado problema, simplesmente pergunte a alguns usuários o que eles
esperariam como solução. É claro que alguns podem não saber, não se
interessar ou simplesmente nunca ter pensado muito a respeito, mas se
você perguntar pra gente suficiente eventualmente vai começar a enxergar
uma espécie de consenso. E aí você já pode fazer um teste de usabilidade
usando um protótipo da interface e pedindo pra alguns usuários tentar
completar algumas tarefas, enquanto você observa.&lt;/p&gt;
&lt;p&gt;Nessa hora você pode descobrir algumas coisas interessantes, tipo como
certos usuários tentam clicar em coisas que não são clicáveis, ou
procuram por uma certa opção num lugar diferente no menu. Talvez você
perceba que precisará melhorar o suporte a copiar e colar em alguns
campos, ou oferecer uma opção para desfazer certas ações, talvez
reescrever os rótulos de alguns botões, e outras coisas do tipo. O legal
é que você nem precisa fazer o teste com muitos usuários: mais de cinco
ou seis pessoas e os resultados já começarão a se repetir! Resumindo,
não requer nenhum investimento pesado em pesquisa.&lt;/p&gt;
&lt;p&gt;Enfim, fazendo as coisas dessa maneira você consegue ter uma idéia
melhor do que é que os usuários esperam. Você pode descobrir que
melhorará a vida duma grande porcentagem dos usuários se construir sua
aplicação a respeito de tarefas dos usuários, em vez de uma série de
recursos genéricos não muito claros. Está no caminho para construir uma
interface que atenda essas expectativas.&lt;/p&gt;
&lt;p&gt;Uma coisa que reforça esse assunto, é a questão da &lt;a href="http://web.cs.wpi.edu/~matt/courses/cs563/talks/smartin/int_design.html"&gt;consistência
externa&lt;/a&gt;,
isto é, a consistência com as outras ferramentas que o usuário está
acostumado (este assunto é também tratado &lt;a href="http://eljunior.wordpress.com/2012/11/25/livro-effectiveui-minhas-notas/"&gt;no livro sobre experiência do
usuário que comentei há uns tempos
atrás&lt;/a&gt;).
Quando as primeiras aplicações começaram a aparecer, todo mundo precisou
imaginar os próprios atalhos, menus e botões para determinadas coisas.
Ainda existe muito software daquela época que é assim até hoje, em que
mesmo o jeito de fechar o programa é bem diferente (&lt;em&gt;hello, Emacs... and
vim :&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Hoje em dia, as aplicações Web tentam se aproximar bastante à
experiência oferecida pelas aplicações Desktop, porque corresponde
melhor às expectativas dos usuários. Estou escrevendo este texto no
Google Docs e sou grato ao Google por ter mantido no Docs a interface
familiar das outras suítes de Office -- menus
Arquivo/Editar/Formatar/etc, a barra de ferramentas, a maioria dos
atalhos para formatação também simplesmente funcionam. Imagina se eles
resolvessem: &lt;em&gt;“ei, nossa aplicação é Web, não tem nada a ver com o
Office tradicional, vamos então prover uma experiência totalmente nova!
Arquivos são coisas do passado, nós não temos arquivos, temos documentos
na nuvem, então esse item File no menu não faz sentido!”&lt;/em&gt; Ainda bem que
não rolou nada disso, certo? (Certo, Google?)&lt;/p&gt;
&lt;p&gt;Por isso, ao fazer a interface do seu programa, faça o favor de seguir
as convenções que os outros estão usando -- mesmo que elas tenham sido
estabelecidas por certas gigantes multinacionais pelas quais você não
tem muito carinho. Para construir interfaces usáveis deixe a ideologia
de lado, os usuários agradecem. Caso contrário, você corre o risco de
ser &lt;a href="http://sivers.org/quirks"&gt;aquele hotel que resolveu fazer tudo diferente e deixou impossível
pra um recém-chegado descobrir como acender as luzes do quarto ou abrir
a torneira&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A segunda grande regra de desenho de interface do Joel é:&lt;/p&gt;
&lt;h3&gt;Cada vez que você apresenta uma opção, você está pedindo ao usuário para tomar uma decisão.&lt;/h3&gt;
&lt;p&gt;O que não é necessariamente uma coisa ruim, é claro. Todo mundo gosta de
poder escolher certas coisas, é por isso que Subway, Spoletto e outros
restaurantes do tipo fazem sucesso. Todavia, ninguém gosta de escolher
coisas que &lt;em&gt;simplesmente não interessam&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/03/clippy-letter20110724-22047-qcxdai.png"&gt;&lt;img alt="Lembra desse cara chato?" src="http://eljunior.files.wordpress.com/2013/03/clippy-letter20110724-22047-qcxdai.png" /&gt;&lt;/a&gt;
  Lembra desse cara chato?&lt;/p&gt;
&lt;p&gt;E a verdade é que a maioria dos usuários não se importam com tanta coisa
quanto você pode achar. Joel dá um exemplo do que não fazer, citando o
caso da ajuda do Windows, que em vez de mostrar a ajuda, abria um wizard
perguntando como você queria configurar o índice da ajuda... É igual
como quando você está tentando trabalhar em alguma coisa e alguém fica
interrompendo, exigindo sua atenção para um assunto inútil.&lt;/p&gt;
&lt;p&gt;Outro exemplo de problema do tipo foi a possibilidade de configurar a
posição das barras de ferramentas... Você pode configurar tanto, que
pode inclusive extrair a barra pra uma janela separada (e depois lutar
bastante pra colocá-la de volta no lugar original). Aí você tem uma
coisa que ninguém quer, mas que acaba atrapalhando para todo mundo.&lt;/p&gt;
&lt;p&gt;Resumindo: &lt;em&gt;pense muito bem antes de forçar o usuário decidir sobre uma
coisa&lt;/em&gt;. Em geral, você deve tentar minimizar a quantidade de decisões,
deixando apenas o que realmente importa.&lt;/p&gt;
&lt;h2&gt;Como criar interfaces para pessoas que têm mais o que fazer na vida&lt;/h2&gt;
&lt;p&gt;Quando você desenha interfaces para o usuário, diz Joel, é uma boa idéia
manter dois princípios em mente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Usuários não lêem o manual&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Na verdade, usuários não lêem nada&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usuários não lêem o manual por diversos motivos. Às vezes, eles nem
&lt;em&gt;têm&lt;/em&gt; o manual, mas não iam querer ler mesmo se tivessem. Em geral, seus
usuários estão tentando &lt;em&gt;fazer&lt;/em&gt; alguma coisa. Para eles, ler o manual é
interromper a tarefa que estão fazendo, é mais perda de tempo (e tendo
em vista como tantos manuais são escritos mal, frequentemente eles estão
corretos em assumir isso).&lt;/p&gt;
&lt;p&gt;E de fato, usuários não lêem nada! Isso pode soar meio bizarro, mas a
verdade é que existem muitas pessoas que simplesmente não lêem as
palavras que estão escritas na tela. Isso é muito azarado para o
programador, que geralmente gosta de imaginar tendo uma espécie de
diálogo com o usuário. Mas se você já parou para observar as outras
pessoas usando o computador, provavelmente já percebeu que algumas nunca
lêem o que aparece num diálogo e automaticamente clicam em &lt;em&gt;Ok&lt;/em&gt; ou
&lt;em&gt;Cancelar&lt;/em&gt; -- dependendo do nível de confiança de cada uma.&lt;/p&gt;
&lt;p&gt;Eu conheço de perto um programador que se comporta exatamente dessa
forma. O bicho simplesmente não lê as mensagens que aparecem na tela,
mesmo quando vai usar um programa que não está acostumado, é incrível!
Incidentalmente, ele vive reclamando que os usuários dos programas dele
não lêem as mensagens na tela...&lt;/p&gt;
&lt;p&gt;Mas é assim mesmo. Os usuários avançados usualmente pulam as instruções.
Iniciantes não gostam mesmo de ler muito. E os poucos usuários que realmente
tentam ler as instruções, muitas vezes acabam ficando ainda mais confusos
depois de lê-las! Por isso, os textos que você põe na tela devem ser polidos
para minimização. Substitua explicações por ações auto-explicativas. Dá mais
trabalho fazer assim porque você precisa pensar mais para conseguir reduzir os
textos, mas vale a pena. &lt;strong&gt;Menos é realmente mais.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ok. Joel fala de várias outras coisas também, mas este texto está ficando
grande demais, e você é um herói legendário tendo lido até aqui de qualquer
forma, então, prometo que já-já vou terminar.&lt;/p&gt;
&lt;p&gt;Outra coisa que usuários também não são muito bons em fazer é controlar o
mouse. Pois é, eles não controlam o mouse muito bem. Meus pais mesmo tiveram
uma certa dificuldade de aprender o duplo clique. Certas tarefas são
particularmente complicadas de fazer com o mouse. E às vezes, mesmo se o
usuário sabe usar o mouse, ele não funciona muito bem. Eu mesmo cansei de
xingar aplicações com barras de rolagem muito chatas, em que algumas tarefas
simples viram um exercício de autocontrole pra não socar o monitor. E até hoje
ainda tenho alguns medinhos sobre clicar e arrastar...&lt;/p&gt;
&lt;p&gt;Outra coisa a lembrar: Usuários não conseguem lembrar muita coisa.
Praticamente, nadica! E é por isso que menus são melhores interfaces que linhas
de comando crípticas. Por isso que escolher um arquivo de imagem selecionando
uma miniatura da imagem é melhor do que procurar o nome do arquivo numa lista.
E por isso que, mesmo quem jura que a linha de comando é uma interface melhor,
não larga do autocompletar. :)&lt;/p&gt;
&lt;p&gt;E ei, eu sou um que vivo na linha de comando, uso na grande maioria das minhas
tarefas no PC. Mas não tem como negar que o Windows Explorer apresentando as
pastas em árvore é uma metáfora &lt;em&gt;beeem&lt;/em&gt; melhor para o sistema de arquivos. Eu
na linha de comando é só eu na minha zona de conforto. Eu devia tentar usar
mais a interface gráfica, mas...&lt;/p&gt;
&lt;p&gt;Ok, agora sim, estou finalizando! O que segue é provavelmente o ponto mais
importante de todo esse texto.&lt;/p&gt;
&lt;p&gt;Alguém lendo este texto, pode achar que um princípio geral a ser seguido é:
&lt;em&gt;“pense que seus usuários são muito burros”&lt;/em&gt;, e talvez achar que essa seja uma
atitude arrogante. Não muito, eu diria... &lt;em&gt;Uma arrogância muito pior é achar
que o seu software é tão bom e bem-feito que as outras pessoas simplesmente
devem se virar pra aprender a usá-lo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/03/ui-usuarios-final.png"&gt;&lt;img alt="UI-usuarios-final" src="http://eljunior.files.wordpress.com/2013/03/ui-usuarios-final.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pense comigo. A grande maioria das pessoas sabe operar uma televisão.
Uma boa porção dessas pessoas deve ser capaz de usar o PC, navegar na
Internet e olhar email, criar tabela no Excel. Uma porção pequena dessas
pessoas deve saber usar Linux, talvez usar um pouco a linha de comando,
e usar o último &lt;em&gt;tablet&lt;/em&gt; da moda. Pouquíssimas dessas pessoas saberão
programar. E das que sabem, muito poucas saberão programar em C++. (&lt;em&gt;Cá
entre nós, quase nenhuma mesmo, mas vai ter muitas que acham que sabem!
:D&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;O que podemos concluir disso é que &lt;em&gt;quando você melhora a interface do
seu programa, mesmo que em pequena quantidade, você aumenta
dramaticamente o número de pessoas que pode usá-lo&lt;/em&gt; com facilidade.
Melhore a interface para o &lt;em&gt;noob&lt;/em&gt; que mal e mal sabe usar a TV, e a
interface vai melhorar pra todo mundo -- inclusive para os hackers
barbudinhos! Tipo, melhore a interface em 10%, e ganhe 50% mais
usuários. Por isso também, que fazer pequenas melhoras numa aplicação
ruim que é usada largamente, pode valer muito mais a pena do que criar
uma aplicação nova toda perfeitinha, que talvez não tenha tanto público.&lt;/p&gt;
&lt;p&gt;Então, não é que os seus usuários sejam tolos, mas sim que se você
seguir tentando fazer seu sistema à prova de tolos, você chegará num
programa fácil de usar pra todo mundo. De fato, se fazer de tolo é uma
boa maneira de avaliar a usabilidade de um programa ou tela. Não ler o
que tá escrito na tela, sair clicando onde acha que deve ser, usar o
mouse com um dedo só. Se a interface não aguenta você sendo imaturo e
impaciente, provavelmente ela pode ser melhorada um bocado.&lt;/p&gt;
&lt;p&gt;Finalmente, o último conselho é: &lt;strong&gt;faça seu programa girar em torno de
atividades do usuário&lt;/strong&gt;. Se você vai fazer um produto, não saia
simplesmente criando os recursos que acha que será necessário. Imagine
alguns usuários (Pedro, pai de família, usa o PC para ver vídeos no
YouTube e trocar emails com os amigos. Luana, filha adolescente de
Pedro, passa as tardes no Facebook e baixa MP3 via BitTorrent). Isso
deve ajudar a despertar empatia por eles. Então você pode imaginar
algumas &lt;em&gt;coisas&lt;/em&gt; que esses usuários queiram &lt;em&gt;fazer&lt;/em&gt; com seu programa. E
o passo seguinte é ter certeza de deixar bem óbvio como essas coisas
podem ser feitas, na interface do seu programa.&lt;/p&gt;
&lt;p&gt;Dessa maneira você evita uma aplicação que os usuários tenham que ler o
manual (que ele não tem, lembra?) pra ver o que pode fazer com ela. De
cara, ele já pode descobrir como fazer o que precisa. &lt;em&gt;Ripar um CD&lt;/em&gt;.
Enviar um cartão de Feliz Aniversário. &lt;em&gt;Criar álbum de fotos&lt;/em&gt;. Imprimir
o artigo inteiro. &lt;em&gt;Achar uma imagem para ilustrar o texto&lt;/em&gt;. Revisar os
últimos comentários postados.&lt;/p&gt;
&lt;p&gt;Uma interface desenhada em torno de atividades sempre vai detonar uma
desenhada em cima de quantidade de recursos, tranquilamente e de mãos
atadas!&lt;/p&gt;
&lt;p&gt;Era isso, chega por hoje! :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Mon, 18 Mar 2013 22:57:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-03-18:2013/03/18/desenho-de-interface-do-usuario---para-programadores.html</guid></item><item><title>Por que as estimativas em desenvolvimento de software normalmente estão erradas por um fator de 2-3?</title><link>/2013/02/26/por-que-as-estimativas-em-desenvolvimento-de-software-normalmente-estao-erradas-por-um-fator-de-2-3.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Aviso 1: Esta é uma tradução livre de uma das melhores histórias sobre
estimativas de software já escritas. O original em inglês é uma
&lt;a href="http://www.quora.com/Engineering-Management/Why-are-software-development-task-estimations-regularly-off-by-a-factor-of-2-3"&gt;resposta no Quora à pergunta do
título&lt;/a&gt;,
e essa tradução foi realizada com o consentimento do autor &lt;a href="http://about.me/michaelrwolfe" title="Michael Wolfe"&gt;Michael
Wolfe&lt;/a&gt;. Caso a língua
não seja problema, recomendamos fortemente a leitura do texto
original... simplesmente melhor e mais engraçado.&lt;/p&gt;
&lt;p&gt;Aviso 2: Este post é resultado duma colaboração minha com o senhor
Crineu Tres. Isto é, ele fez tudo e eu só traduzi os palavrões.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Vamos dar uma caminhada saindo da costa de San Francisco até Los Angeles
para visitar nossos amigos em Newport Beach. Pego meu mapa e desenho
nossa rota pela costa:&lt;/p&gt;
&lt;p&gt;&lt;img alt="1" src="http://eljunior.files.wordpress.com/2013/02/1.png" /&gt;&lt;br /&gt;
O percurso é de aproximadamente 400 milhas; podemos caminhar 4 milhas
por hora, 10 horas por dia. Dessa forma chegaremos lá em 10 dias.
Ligamos para nossos amigos e marcamos uma janta para o próximo domingo
às 18h, quando chegaremos de forma triunfante! Eles mal podem esperar!&lt;/p&gt;
&lt;p&gt;Acordamos cedo no dia seguinte altamente motivados para essa nova
aventura. Colocamos as mochilas, pegamos o mapa e a rota para o primeiro
dia. Olhamos então para o mapa. Ai ai:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/02/2.png"&gt;&lt;img alt="2" src="http://eljunior.files.wordpress.com/2013/02/2.png" /&gt;&lt;/a&gt;&lt;br /&gt;
Caramba, a costa tem um milhão de curvas e reentrâncias! Com apenas um
dia de caminhada de 40 milhas não chegaremos nem em Half Moon Bay. Essa
viagem tem pelo menos 500 milhas, e não 400! Ligamos para nossos amigos
e atrasamos o jantar para a terça-feira. É melhor sermos realistas. Eles
ficam meio desapontados, mas não vêem a hora de chegarmos. Além disso,
12 dias de San Francisco até Los Angeles não é um tempo ruim.&lt;/p&gt;
&lt;p&gt;Bem, com essa inconveniência resolvida, partimos. Duas horas mais tarde,
não passamos nem do zoológico. Qual o problema? Olhamos novamente para
nossa trilha:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/02/3.jpg"&gt;&lt;img alt="3" src="http://eljunior.files.wordpress.com/2013/02/3.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Jesus, essa trilha não é fácil! Areia, água, escadas, riachos, lobos
marinhos furiosos! Estamos caminhando a no máximo 2 milhas por hora,
metade da velocidade pretendida... podemos então começar a caminhar 20
horas por dia ou ligar para nossos amigos e atrasar a janta mais uma
semana. Ok, vamos dividir o fardo: caminharemos 12 horas por dia e
atrasaremos a janta até o final de semana seguinte. Ligamos para nossos
amigos e remarcamos o jantar até o domingo seguinte. Eles ficam um pouco
irritados, mas confirmam o evento mesmo assim.&lt;/p&gt;
&lt;p&gt;Montamos acampamento em Moss Beach após um dia duro de doze horas
caminhando. Cacilda, como é difícil montar barracas nesse vento! Não
conseguimos dormir antes da meia noite. Nada demais: iremos apertar o
passo amanhã.&lt;/p&gt;
&lt;p&gt;Dormimos demais e acordamos doídos e cansados às.. 10 da manhã. Caralho!
Sem condições de fazer 12 horas hoje! Vamos caminhar 10 e compensaremos
com 14 amanhã. Juntamos os equipamentos e partimos.&lt;/p&gt;
&lt;p&gt;Após um esforço redobrado nas primeiras horas, percebo nosso colega
mancando. Maravilha, bolhas nos pés... precisamos resolver isso agora.
Somos do tipo de grupo que resolve os problema individuais antes que
comecem a nos atrasar. Eu corro por 45 minutos, 3 milhas para longe da
costa até Pescadero, pego alguns band-aids e corro de volta para medicar
meu colega. Chego exausto e o sol está se pondo, então declaramos o dia
encerrado. Vamos dormir após fazer míseras 6 milhas. Mas temos
suprimentos novos. Ficaremos bem. Compensaremos amanhã.&lt;/p&gt;
&lt;p&gt;Acordamos na manhã seguinte, protegemos nossos pés de futuras bolhas e
começamos a caminhar. Contornamos a encosta. Que?! Que porra é essa?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2013/02/4.jpg"&gt;&lt;img alt="4" src="http://eljunior.files.wordpress.com/2013/02/4.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;O maldito mapa não mostra essa merda! Temos que caminhar 3 milhas para o
interior, contornar uma propriedade federal rodeada por cercas, nos
perder duas vezes, e somente então voltar à costa em torno do meio-dia.
A maior parte do dia foi gasta para realizar 1 milha de progresso. Ok,
&lt;strong&gt;não&lt;/strong&gt; ligaremos para nossos amigos para atrasar mais uma vez a janta.
Caminharemos até meia-noite para voltar ao planejamento inicial.&lt;/p&gt;
&lt;p&gt;Após uma terrível noite de sono sob a névoa, meu amigo acorda com uma
dor de cabeça infernal e febre. Pergunto se ele consegue continuar e ele
responde: &lt;em&gt;"O que você acha, panaca? Estou caminhando nessa névoa gelada
por 3 dias sem descanso!"&lt;/em&gt;. Beleza... o dia de hoje está perdido. Vamos
descansar e nos recuperar. A partir de amanhã faremos 14 horas por dia,
já que estaremos descansados e preparados para tudo... são apenas mais
alguns dias, então obviamente podemos cumprir o prazo!&lt;/p&gt;
&lt;p&gt;Acordamos moídos no dia seguinte. Olho o mapa:&lt;/p&gt;
&lt;p&gt;&lt;img alt="5" src="http://eljunior.files.wordpress.com/2013/02/5.png" /&gt;&lt;/p&gt;
&lt;p&gt;Puta merda! Estamos no dia 5 de uma viagem de 10 dias e não saímos nem
da Bay Area! Isso é patético! Vamos trabalhar em uma estimativa mais
precisa e ligar para nossos amigos. Provavelmente seremos repreendidos,
mas teremos uma data realista pelo menos.&lt;/p&gt;
&lt;p&gt;Meu amigo diz: &lt;em&gt;"Bem, fizemos 40 milhas em 4 dias, e é uma viagem de
pelo menos 600 milhas, então são 60 dias, provavelmente 70 considerando
uma margem para imprevistos"&lt;/em&gt;. Eu respondo &lt;em&gt;"Nem fu...... Ok, eu posso
nunca ter feito essa caminhada antes, mas eu &lt;strong&gt;sei&lt;/strong&gt; que não demora 70
dias para caminhar de São Francisco até Los Angeles. Nossos amigos irão
rir de nós se ligarmos avisando que só chegaremos na Páscoa!"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;E continuo: &lt;em&gt;"Se vocês se comprometerem a caminhar 16 horas por dia,
podemos compensar o tempo perdido! Sei que será difícil, mas essa é a
reta final!"&lt;/em&gt;. Meu colega grita de volta: &lt;em&gt;"Pra começo de conversa, não
fui eu que liguei dizendo que estaríamos lá no Domingo, tá? Você está
acabando com a gente por um erro seu!"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Um silêncio tenso recai sobre o grupo. A ligação não é realizada.
Ligarei amanhã, quando meu camarada voltar às suas faculdades mentais e
concordar em algo razoável.&lt;/p&gt;
&lt;p&gt;Na manhã seguinte aguardamos em nossas barracas até o temporal passar.
Levantamos acampamento e saímos às 10h, esticando músculos doídos e
novas bolhas nos pés. Não comentamos nada sobre a briga do dia anterior,
embora eu tenha xingado um certo colega idiota que esqueceu a garrafa de
água e fez a gente gastar 30 minutos para buscá-la.&lt;/p&gt;
&lt;p&gt;Faço uma nota mental lembrando que estamos sem papel higiênico e
precisamos parar na cidade mais próxima. Contornamos a enseada: um rio
está bloqueando nosso caminho. Sinto uma forte dor-de-barriga e a
sensação de diarréia iminente...&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Tue, 26 Feb 2013 06:34:00 -0300</pubDate><guid isPermaLink="false">tag:,2013-02-26:2013/02/26/por-que-as-estimativas-em-desenvolvimento-de-software-normalmente-estao-erradas-por-um-fator-de-2-3.html</guid></item><item><title>Aventuras apresentando Java EE a mim mesmo</title><link>/2013/01/15/aventuras-apresentando-java-ee-a-mim-mesmo.html</link><description>&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Cuidado:&lt;/strong&gt; o texto a seguir contém níveis perigosos de nerdice,
acrônimos e javeiragem em geral.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Não sou nenhum fã de Java: a linguagem eu realmente &lt;strong&gt;não&lt;/strong&gt; curto (não
tenho culpa de ter conhecido
&lt;a href="http://www.python.org/" title="Python.org"&gt;Python&lt;/a&gt; e
&lt;a href="http://www.ruby-lang.org/" title="Ruby-Lang.org"&gt;Ruby&lt;/a&gt; antes :P), todavia a
plataforma tem os seus apelos. Só que eu estava ficando com vergonha de
ainda desconhecer o &lt;em&gt;stack&lt;/em&gt; do &lt;a href="http://en.wikipedia.org/wiki/Java_EE"&gt;Java
EE&lt;/a&gt;, ao passo que uso diariamente
várias tecnologias relacionadas no meu trabalho. Por isso, decidi que
iria tomar vergonha na cara e estudar um pouco mais da parada (e tentar
reclamar menos). Comprei &lt;a href="http://antoniogoncalves.org/2009/02/13/java-ee-6-book/"&gt;o
livro&lt;/a&gt; do
&lt;a href="http://antoniogoncalves.org/"&gt;Antonio Goncalves&lt;/a&gt; sobre &lt;a href="http://en.wikipedia.org/wiki/Java_EE"&gt;Java
EE&lt;/a&gt; 6, e caí em cima. Tendo
recentemente terminado sua leitura, registro aqui minhas impressões a
respeito.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href="http://www.amazon.com/Beginning-Java-Platform-GlassFish-Professional/dp/1430219548"&gt;&lt;img alt="Read the original, dude!" src="http://eljunior.files.wordpress.com/2013/01/intro-javaee.png?w=300" /&gt;&lt;/a&gt;
  Read the original, dude!&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Antes de começar, porém, já adianto uma coisa: apesar do conteúdo do
livro ser bem decente, a tradução dele é &lt;strong&gt;péssima&lt;/strong&gt;. Me encontrei
frequentemente tendo que adivinhar como seria o texto original em inglês
para poder compreender o traduzido, pois este não fazia nenhum sentido.
A impressão é que o livro foi traduzido por várias pessoas diferentes
(estagiários?), que não sabem muito sobre orientação a objetos e muito
menos da plataforma Java EE, resultando numa confusão de palavreado
mal-traduzido bem difícil de entender. Resumindo: a tradução atrapalha
muito mais do que ajuda! Se soubesse que seria tão desleixada, jamais
teria comprado o livro traduzido. Portanto, se você já lê inglês,
obtenha &lt;a href="http://www.amazon.com/Beginning-Java-Platform-GlassFish-Professional/dp/1430219548"&gt;a versão
original&lt;/a&gt;
(mesmo que saia mais caro): você vai poupar sofrimento e a leitura será
mais tranquila. Se você não lê inglês, leia &lt;a href="http://www.amazon.com/Beginning-Java-Platform-GlassFish-Professional/dp/1430219548" title="Beginning Java EE 6 Platform with Glassfish 3"&gt;a versão
original&lt;/a&gt;
também e aproveite pra começar a aprender inglês logo: será mais
saudável pra sua carreira não depender de traduções fajutas! OK, fim da
reclamação.&lt;/p&gt;
&lt;p&gt;O livro fornece uma visão geral da plataforma, e também tenta mostrar o
contexto histórico e motivações para o surgimento dos protocolos e APIs.
Após apresentar rapidamente o que consiste a plataforma e os programas
necessários para rodar os exemplos
(&lt;a href="http://en.wikipedia.org/wiki/Java_Development_Kit"&gt;JDK&lt;/a&gt;,
&lt;a href="https://maven.apache.org/"&gt;Maven&lt;/a&gt;, &lt;a href="http://glassfish.java.net/"&gt;Glassfish
3&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/JUnit"&gt;Junit
4&lt;/a&gt; and
&lt;a href="http://db.apache.org/derby"&gt;Derby&lt;/a&gt;), o livro começa a apresentar as
APIs e conceitos da plataforma numa abordagem meio &lt;em&gt;bottom-up&lt;/em&gt;: alguns
capítulos sobre mapeamento objeto-relacional com
&lt;a href="http://en.wikipedia.org/wiki/Java_Persistence_API"&gt;JPA&lt;/a&gt; -- a API
especificada para persistência com Java, depois alguns capítulos sobre
as partes de Java EE usadas principalmente para a lógica de negócio
(&lt;a href="http://en.wikipedia.org/wiki/Enterprise_JavaBeans"&gt;EJBs&lt;/a&gt;, Transações,
&lt;a href="http://en.wikipedia.org/wiki/Aspect-oriented_programming"&gt;AOP&lt;/a&gt; no
estilo Java EE com &lt;em&gt;Callbacks&lt;/em&gt; e &lt;em&gt;Interceptors&lt;/em&gt;), seguidos de uma visão
rápida das tecnologias usadas para a parte de apresentação na Web
(&lt;a href="http://en.wikipedia.org/wiki/JavaServer_Faces"&gt;JSF&lt;/a&gt;,
&lt;a href="http://en.wikipedia.org/wiki/JavaServer_Pages"&gt;JSP&lt;/a&gt;, e assuntos
relacionados), e culmina com os últimos 3 capítulos dedicados a
comunicação entre sistemas: mensageria com
&lt;a href="http://en.wikipedia.org/wiki/Java_Message_Service"&gt;JMS&lt;/a&gt;, &lt;a href="http://en.wikipedia.org/wiki/Java_API_for_XML_Web_Services"&gt;Web Services
SOAP&lt;/a&gt; e
&lt;a href="http://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services"&gt;RESTful&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O conteúdo é bom pra &lt;em&gt;“designorantar-se”&lt;/em&gt; dos conceitos e tecnologias
disponíveis na plataforma, acho que dá pra recomendar pra qualquer
pessoa envolvida com Java e ainda não conferiu o Java EE, ou que vem de
outras linguagens/frameworks e quer conhecer o padrão. Todavia, pelo que
tenho lido no StackOverflow e em alguns outros lugares, a API
especificada de Java EE sobre &lt;a href="http://docs.oracle.com/javaee/6/tutorial/doc/gjbnr.html"&gt;Contextos e Injeção de
Dependência&lt;/a&gt;
(CDI, na sigla em inglês) vem ganhando cada vez mais importância na
plataforma, então é um certo pecado o livro simplesmente ignorá-la -- em
nenhum lugar do texto é sinalizado a omissão de uma parte importante da
coisa.&lt;/p&gt;
&lt;p&gt;Gostei bastante da cobertura de JPA, relativamente bem completa para um
livro de introdução à plataforma. Rapidamente encontrei material pra uso
no meu trabalho. A seção sobre EJBs pra mim foi interessante para
comparar com a minha experiência com os recursos substitutos do
&lt;a href="http://en.wikipedia.org/wiki/Spring_Framework"&gt;Spring&lt;/a&gt;. (Parece que os
meus &lt;a href="http://en.wikipedia.org/wiki/Session_Beans#Stateless_Session_Beans"&gt;SLSBs&lt;/a&gt;
são beans do Spring com
&lt;a href="http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/transaction/annotation/Transactional.html"&gt;@Transactional&lt;/a&gt;.
:) As partes exclusivamente sobre JSF não me reservaram muitas
surpresas, mas curti aprender mais sobre o contexto histórico do
framework, com a seção descrevendo o surgimento de
&lt;a href="http://en.wikipedia.org/wiki/JavaServer_Pages"&gt;JSP&lt;/a&gt;,
&lt;a href="http://en.wikipedia.org/wiki/JavaServer_Pages_Standard_Tag_Library"&gt;JSTL&lt;/a&gt;,
&lt;a href="http://en.wikipedia.org/wiki/Facelets"&gt;Facelets&lt;/a&gt;,
&lt;a href="http://en.wikipedia.org/wiki/Unified_Expression_Language"&gt;EL&lt;/a&gt;, etc.
Achei muito boa também a exposição sobre a API Javascript que ganhou
especificação no JSF 2, usada para as requisições Ajax.&lt;/p&gt;
&lt;p&gt;Por fim, os 3 últimos capítulos sobre interoperabilidade também estão
interessantes, embora eu me arrastei na leitura deles. Sobre JMS, não
tinha muita novidade (a API andou meio parada por algum tempo, e deverá
ter novidades no &lt;a href="http://jcp.org/en/jsr/detail?id=342"&gt;Java EE 7&lt;/a&gt; com o
&lt;a href="http://jcp.org/en/jsr/detail?id=343"&gt;JMS 2&lt;/a&gt;). Fato curioso: o capítulo
sobre serviços REST conseguiu ser mais enfadonho do que o de serviços
SOAP (e olha que eu tendo a favorecer REST). Começou entrando demais nos
conceitos dos protocolos antes de mostrar um exemplo prático que
demonstrasse as vantagens da coisa -- o que provavelmente teria criado
um engajamento melhor com a exposição da API. Mas bem, o estilo REST é
relativamente novo no mundo Java, talvez à medida que mais gente compre
a idéia, ele deve receber mais atenção no futuro.&lt;/p&gt;
&lt;p&gt;Os exemplos do livro servem apenas como um chute inicial mesmo, é só pra
você ter uma idéia mesmo do que é possível de atingir com as APIs que
estão sendo explicadas. Quase nada dos códigos de exemplo parecem
aproveitáveis para uma aplicação real -- muito longe de código de
produção. Nesse sentido, o livro provavelmente não está longe da vasta
maioria das documentações técnicas para programadores, infelizmente.&lt;/p&gt;
&lt;p&gt;Apesar de tudo, ler esse livro foi muito bom pra mim, pois expandiu um
bocado minha compreensão sobre algumas tecnologias que trabalho e sobre
as possibilidades da tal plataforma Java EE. E como uso bastante JPA e
JSF no meu trabalho atual, fiquei por dentro de vários recursos úteis
dessas APIs que eu desconhecia. Por exemplo, apesar de usar JPA há já
uns 2 anos, eu desconhecia os mecanismos de mapeamento com
&lt;a href="http://docs.oracle.com/javaee/6/api/javax/persistence/ElementCollection.html"&gt;@ElementCollection&lt;/a&gt;
e
&lt;a href="http://docs.oracle.com/javaee/6/api/javax/persistence/Embeddable.html"&gt;@Embeddable&lt;/a&gt;.
Também, mesmo usando JSF há um bom tempo, desconhecia o
&lt;a href="http://docs.oracle.com/javaee/6/javaserverfaces/2.0/docs/pdldocs/facelets/composite/insertChildren.html"&gt;composite:insertChildren&lt;/a&gt;
(meus olhos devem ter pulado essa tag na listagem da documentação mais
de uma vez). Essas e outras coisas encontraram uso bem rapidinho no
código da aplicação que estou trabalhando. Meio besta eu não saber disso
antes, né? Mas bem, isso é pra ser um dos benefícios esperados ao se
sentar pra ler uma josca dessas até o final. :)&lt;/p&gt;
&lt;p&gt;No final, fiquei com uma sensação um pouco mais positiva em relação ao
Java EE (ou devo dizer, menos negativa?). Enfim, parece que do seu
próprio modo a plataforma está evoluindo, e as APIs estão ficando bem
decentes. E &lt;a href="http://jcp.org/en/jsr/detail?id=342"&gt;a próxima versão Java EE
7&lt;/a&gt; parece que sairá em breve (&lt;a href="http://jdevelopment.nl/open-source/java-ee-7-progress-page/"&gt;essa
página&lt;/a&gt;
tenta registrar o progresso), com mais melhorias em todas as áreas.
Contudo, às vezes tenho a impressão que o meu sentimento positivo é mais
devido ao péssimo estado anterior das APIs do que aos recursos
verdadeiros das versões atuais.&lt;/p&gt;
&lt;p&gt;Pessoalmente, das tecnologias para aplicações Web do “mundo Java”, tendo
a gostar mais de coisas como o &lt;a href="http://grails.org/"&gt;Grails&lt;/a&gt;, que oferece
várias facilidades semelhantes aos da plataforma Java EE, mas com
usabilidade bem melhorada para mim como programador. Sei que não é muito
justo comparar, já que Java EE é um conjunto de especificações (tem
muita gente que valoriza isso), mas em termos de recursos disponíveis
para um programador construir um app, pode fazer bastante sentido
compará-los.&lt;/p&gt;
&lt;p&gt;Finalmente, tem algumas coisas que me importam bastante num &lt;em&gt;toolkit&lt;/em&gt;, e
que Java EE ainda precisa melhorar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Facilidade de fazer bootstrap duma aplicação Web (IDEs e o Maven
    ajudam, mas ainda estão longe de &lt;em&gt;grails create-app NOME_DO_APP&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Facilidade de instalar/publicar uma aplicação -- em especial,
    minimizando a quantidade de configuração a ser feita para os
    recursos que ela vai usar.&lt;ul&gt;
&lt;li&gt;Envolve colocar o máximo de configuração possível embutido na
    aplicação. Isso meio que bate de frente com a idéia prevalente
    do Java EE de que as configurações devem ser feitas no servidor
    de aplicação.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Suporte de primeira-classe a uma linguagem dinâmica nas partes em
    que faz mais sentido. (Groovy, Python, Ruby ou JavaScript já
    resolveriam pra mim, mas outras também serviriam).&lt;/li&gt;
&lt;li&gt;Independência de IDE -- quero poder acionar facilmente a execução
    dos testes e geração de builds pela linha de comando. (Aqui usar uma
    ferramenta como o Maven ajuda bastante, mas ainda depende de muita
    configuração &lt;em&gt;boilerplate&lt;/em&gt; -- e frequentemente, bastante esforço).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Concluindo, acho que é bem interessante conhecer o que o Java EE tem a
oferecer. Mas é bom não parar por aí: ainda tem
&lt;a href="http://www.playframework.org/"&gt;bastante&lt;/a&gt; &lt;a href="http://torquebox.org/"&gt;coisa&lt;/a&gt;
&lt;a href="http://grails.org/"&gt;interessante&lt;/a&gt; &lt;a href="http://www.joodoweb.com/"&gt;por&lt;/a&gt;
&lt;a href="http://www.webnoir.org/"&gt;aí&lt;/a&gt; &lt;a href="http://griffon.codehaus.org/"&gt;pra&lt;/a&gt;
&lt;a href="http://appfuse.org/"&gt;investigar&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Tue, 15 Jan 2013 07:45:00 -0200</pubDate><guid isPermaLink="false">tag:,2013-01-15:2013/01/15/aventuras-apresentando-java-ee-a-mim-mesmo.html</guid></item><item><title>Fatos e Falácias da Engenharia de Software - notas do livro</title><link>/2012/12/03/fatos-e-falacias-da-engenharia-de-software---notas-do-livro.html</link><description>&lt;p&gt;&lt;a href="http://www.amazon.com/Facts-Fallacies-Software-Engineering-Robert/dp/0321117425"&gt;&lt;img alt="" src="http://codinghorror.typepad.com/.a/6a0120a85dcdae970b012877703e5c970c-pi" /&gt;&lt;/a&gt;Acabo
de terminar a leitura de um livro simplesmente excelente, &lt;em&gt;Facts and
Fallacies of Software Engineering&lt;/em&gt; (Fatos e Falácias da Engenharia de
Software), do programador/pesquisador/escritor &lt;a href="https://en.wikipedia.org/wiki/Robert_L._Glass"&gt;Robert L.
Glass&lt;/a&gt;. Bob Glass não é
um acadêmico que fica falando abobrinha sobre como deve ser feito
software mas que nunca quer botar a mão na massa. Ele se descreve como
um pesquisador e &lt;span
style="text-decoration: underline;"&gt;praticante&lt;/span&gt; de engenharia de
software (com 45 anos na área), e ele tem mesmo muita coisa interessante
pra dizer.&lt;/p&gt;
&lt;p&gt;O livro -- dedicado aos pesquisadores que acenderam o fogo da ES e aos
praticantes que mantêm-no aceso -- consiste em 55 fatos apresentados num
formato fácil de ler (fato, discussão, controvérsia, fontes &amp;amp;
referências) e mais 10 falácias que ele resolveu adicionar depois que
começou a escrever o livro. Antes de ser cortado pelos editores o título
era “55 fatos fundamentais e frequentemente esquecidos (e algumas
falácias)”, o que é uma descrição do conteúdo bem apropriada na visão do
autor: uma grande porção dos fatos é coisa que todo mundo envolvido em
engenharia de software deveria saber e não sabe, e quem já sabe acaba
esquecendo e não faz nada a respeito.&lt;/p&gt;
&lt;p&gt;Lendo esse livrinho (é pequeno, não chega às 200 páginas), fiquei
surpreso encontrando respostas relevantes para perguntas que
aparentemente ninguém estaria prestando atenção, mas que estão
disponíveis de fato há algumas décadas! A leitura foi fascinante, mas
lendo me senti muito ignorante por ainda não ter lido um material
articulando essas coisas.&lt;/p&gt;
&lt;p&gt;Espie só:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Propagandas exageradas (aka &lt;em&gt;hype&lt;/em&gt;) são a praga da engenharia de
    software. A maioria dos melhoramentos envolvendo ferramentas e
    técnicas ajudam a aumentar entre 5% a 35% em produtividade e
    qualidade. Não obstante, esses melhoramentos são propagandeados como
    tendo benefícios de “uma ordem de magnitude”.&lt;strong&gt;Adotar uma nova
    ferramenta ou técnica na verdade diminui a produtividade e qualidade
    do trabalho, inicialmente.&lt;/strong&gt; O benefício só é atingido depois da
    curva inicial de aprendizado, e portanto só vale a pena caso seu
    valor seja visto de forma realista e se tenha paciência ao medir os
    benefícios.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O fator mais importante no trabalho com software não são as
    técnicas ou ferramentas usadas pelos desenvolvedores, e sim a
    qualidade dos próprios desenvolvedores.&lt;/strong&gt; Esse fato é sabido,
    evidenciado e documentado desde os anos 70. Apesar disso, muita
    gente decide "cortar custos" na hora de contratar desenvolvedores e
    depois tenta instigar qualidade com metodologias, processos e
    ferramentas. Seguidamente aparecem abordagens mesmo anti-pessoas,
    que tentam transformá-las em engrenagens numa linha de montagem, e
    serem facilmente substituíveis. Um exemplo famoso é o &lt;a href="http://en.wikipedia.org/wiki/Capability_Maturity_Model"&gt;CMM -
    Capability Maturity
    Model&lt;/a&gt; do
    &lt;a href="http://en.wikipedia.org/wiki/Software_Engineering_Institute"&gt;Software Engineering Institute
    (SEI)&lt;/a&gt;,
    que se alastrou nas empresas públicas americanas (e vem fazendo o
    mesmo nas brasileiras...), que é baseado na percepção errônea de que
    o caminho para bom software é um bom processo. &lt;em&gt;Not so!&lt;/em&gt; Mas veja o
    site do CMMI... O hype lá cativa qualquer gerente! :P&lt;/li&gt;
&lt;li&gt;As duas maiores causas de projetos saírem do controle são
    &lt;small&gt;(a)&lt;/small&gt; péssimas estimativas e &lt;small&gt;(b)&lt;/small&gt;
    requisitos instáveis. Estimativas são frequentemente feitas pelas
    pessoas erradas (que não têm conhecimento o suficiente sobre como
    software é construído), no momento errado (no início do projeto,
    antes de qualquer trabalho pra descobrir exatamente o que será
    feito), nunca são ajustadas ao longo do projeto, e apesar disso tudo
    ainda são levadas a sério por todo mundo -- isso acaba gerando
    expectativas inalcançáveis desde o início, estresse desnecessário e
    moral-baixa das equipes. Já requisitos instáveis é um problema mais
    complicado, e a engenharia de software vem tentando abordagens
    diferentes em busca de soluções (depois de falhar miseravelmente
    tentando achar um jeito de obter um conjunto fechado de requisitos
    no início do projeto). Hoje, já é aceito como natural os requisitos
    sofrerem alterações ao longo do projeto, e a controvérsia está mais
    em como lidar nessas circunstâncias.&lt;/li&gt;
&lt;li&gt;Reuso em pequena escala (&lt;em&gt;reuse-in-the-small&lt;/em&gt;) existe há muito tempo
    (muito antes de OO, viu?), e é um problema resolvido desde os anos&lt;ol&gt;
&lt;li&gt;Reuso em grande escala (componentização de soluções de problemas
genéricos) é um problema muito difícil, não-resolvido, mas que tem
maior chance de funcionar para uma família de sistemas de um domínio
específico. Linguagens de domínio específico (aka DSLs) são uma boa
idéia, façamos mais coisas desse tipo!&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Para cada 25% de aumento na complexidade do problema, há um
    aumento de 100% na complexidade de sua solução.&lt;/strong&gt; Isso não é uma
    coisa a ser mudada, é só uma constatação de como as coisas são. Esse
    fato é muito bom saber porque, apesar de pouco conhecido, explica
    grande parte dos outros. Veja:&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Por que pessoas são tão importantes?&lt;/em&gt; Porque é necessário
    habilidade e inteligência para superar complexidade.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Por que estimar é tão difícil?&lt;/em&gt; Porque as soluções são bem mais
    complicadas do que os problemas aparentam.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Por que reuso em larga escala é tão difícil?&lt;/em&gt; Porque grande
    complexidade significa grande diversidade de soluções.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Por que existem tantas maneiras diferentes de abordar uma
    solução pra um problema?&lt;/em&gt; Porque o espaço de soluções é bastante
    complexo.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Por que conhecer uma solução existente é a tarefa mais difícil
    de manutenção de software?&lt;/em&gt; Porque há muitas soluções possíveis
    para qualquer problema.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Por que os softwares têm tantos erros?&lt;/em&gt; Porque é difícil de
    fazer direito na primeira vez.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Por que alguns pesquisadores de software recorrem a defesa de
    idéias não verificadas em vez de fazer pesquisas avaliativas que
    verifiquem suas declarações?&lt;/em&gt; Talvez porque, no mundo de
    software complexo, é muito difícil fazer as pesquisas
    avaliativas tão necessárias e que deveriam anteceder as defesas
    de idéias.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eu ainda não tinha visto tantas coisas relevantes -- e que muito
presenciei serem negligenciadas, às vezes por mim mesmo, sem saber como
agir -- compactadas em tão poucas páginas, e com dados reais, obtidos
usando medidas reais e úteis. Isso que a maioria das fontes do livro são
pré-2000 (o livro é de 2003), e tem bastante coisa interessante que é
pré-1980! Fenomenal... Me senti besta por ainda não ter ido atrás de
material como esse.&lt;/p&gt;
&lt;p&gt;Comecei a montar a lista acima para funcionar como um "&lt;em&gt;sneak-peak"&lt;/em&gt; do
material do livro, mas agora tô achando que o formato funciona legal
para apresentar um resumão dos pontos importantes do livro (e eu posso
ser mais preguiçoso, também :). Por isso, sigo com a lista de fatos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Erros em requisitos são os mais caros de consertar quando o software
    já está em produção (e os mais baratos de consertar cedo no
    desenvolvimento), sendo os casos de “requisitos ausentes” os mais
    difíceis de todos.&lt;/li&gt;
&lt;li&gt;Ocorre uma explosão de &lt;em&gt;requisitos derivados&lt;/em&gt; (os requisitos para
    uma solução em particular) causada pela complexidade do processo de
    solução, que pode assumir proporções 50 vezes maior que os
    requisitos originais. Isso faz com que seja impossível de se obter o
    Santo Graal da rastreabilidade na prática.&lt;/li&gt;
&lt;li&gt;Desenvolvedores alternam entre "modos" de análise e implementação
    quando o programa está sendo decomposto num nível de &lt;em&gt;primitivas&lt;/em&gt;
    (unidades fundamentais conhecidas e facilmente codificadas) que o
    responsável pela análise domina. Se o implementador não é a mesma
    pessoa que fez a análise, as primitivas de cada um serão diferentes,
    e esse confronto gera uma série de problemas, tanto no caso do
    projetista ou no do implementador ser o profissional mais
    experiente. Por isso, é melhor que a pessoa que faça a análise seja
    a mesma que o implemente. Repetidamente se tenta praticar uma
    divisão de trabalho de análise e implementação, e repetidamente isso
    só causa mais problemas.&lt;/li&gt;
&lt;li&gt;Remoção de erros é o que mais consome tempo do ciclo de vida do
    desenvolvimento de um software. &lt;strong&gt;Inspeção rigorosa do código é a
    maneira mais efetiva de remoção de erros&lt;/strong&gt;, mas esse fato não é
    muito propagandeado porque inspeções exigem trabalho mental intenso,
    não existem fabricantes fazendo dinheiro com isso e ainda, da mesma
    forma que testes, às vezes são vistas como não essenciais. (Note que
    apesar dos grandes benefícios para remoção de erros, inspeções
    rigorosas não substituem os testes.)&lt;/li&gt;
&lt;li&gt;Software que um programador típico acredita ter sido testado a
    fundo, teve apenas de 55% a 60% dos seus fluxos de lógica
    executados. Analisadores de cobertura ajudam a aumentar isso para
    entre 85 a 90%, mas é praticamente impossível atingir os 100%. Mesmo
    se fosse possível atingir os 100%, isso ainda não seria um critério
    suficiente para os testes. Em torno de 35% dos defeitos em software
    surgem de fluxos não-existentes e outros 40% resultam de uma
    combinação única de caminhos de lógica, portanto não seriam
    descobertos por uma cobertura de 100%.&lt;/li&gt;
&lt;li&gt;Revisões têm aspectos tanto técnicos como sociológicos. Prestar
    atenção numa parte e não na outra é receita para o desastre. Por
    mais que se clame pela &lt;em&gt;“egoless programming”&lt;/em&gt;, todos nós temos um
    investimento emocional e intelectual no resultado do nosso trabalho
    e estamos vulneráveis quando outros o estão revisando. E quando o
    resultado de um revisor é considerado pelos demais participantes
    duma revisão, o ego desse revisor também está na reta. Cabem algumas
    sugestões:&lt;ol&gt;
&lt;li&gt;Não permita gerentes participar de revisões, eles tendem a
    revisar o produtor em vez do produto.&lt;/li&gt;
&lt;li&gt;Não permita pessoas despreparadas participar, elas atrapalham os
    que estão preparados e causam digressões nos tópicos.&lt;/li&gt;
&lt;li&gt;Separe o papel do líder da revisão do papel do produtor, para
    diminuir o envolvimento do ego do produtor.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Manutenção é uma solução, e não um problema. É a solução ao problema
    de não saber exatamente o que se quer construir na primeira vez, e
    por isso é um &lt;em&gt;big deal, dude, very important!&lt;/em&gt; Ela consiste
    tipicamente de 40 a 80% de custos de software (média 60%), sendo por
    isso a fase mais importante. E 60% da manutenção consiste em
    melhorias, 17% apenas para correção de erros, 18% manutenção
    adaptiva (manter funcionando os recursos existentes em um ambiente
    novo), e os restantes 5% é o popular “outros” (manutenções
    preventivas -- refatorações -- estariam nesses 5%). Essa relação 60%
    do custo de construção de software é manutenção, e 60% da manutenção
    é adição de melhorias é chamada &lt;a href="http://programmer.97things.oreilly.com/wiki/index.php/The_60/60_Rule"&gt;regra
    60/60&lt;/a&gt;.
    Por fim, como manutenção é tão importante, talvez devesse ser
    ensinada antes de ensinar a produzir software (ensinar a ler antes
    de ensinar a escrever).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Qualidade de software é uma coleção de atributos:&lt;/strong&gt;&lt;ol&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;Portabilidade&lt;/span&gt; é
    sobre criar um produto de software facilmente movido para outra
    plataforma.&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;Confiabilidade&lt;/span&gt;
    é sobre um software que faz o que devia fazer de forma
    confiável.&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;Eficiência&lt;/span&gt; é
    sobre um software que economiza em tempo de execução e consumo
    de espaço.&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;Engenharia humana (ou
    usabilidade)&lt;/span&gt; é sobre um software que é fácil e
    confortável de usar.&lt;/li&gt;
&lt;li&gt;&lt;span style="text-decoration: underline;"&gt;Testabilidade&lt;/span&gt; é
    sobre um software que é fácil de testar.&lt;/li&gt;
&lt;li&gt;&lt;span
    style="text-decoration: underline;"&gt;Compreensibilidade&lt;/span&gt; é
    sobre um software que é fácil para o mantenedor compreender.&lt;/li&gt;
&lt;li&gt;&lt;span
    style="text-decoration: underline;"&gt;Modificabilidade&lt;/span&gt; é
    sobre um software que é fácil para o mantenedor modificá-lo.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Não existe uma ordem universal correta desses atributos que deve ser
    atingida, mas é importante que cada projeto tenha a sua lista
    priorizada.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se você é como eu, os fatos acima devem ter ressonados fortemente com
sua experiência. Em vários pontos do livro, experimentei uma sensação de
alívio, constantando várias comichões minhas sendo coçadas, e numa forma
tão coerente, sensata, comedida, auto-avaliativa, madura...  —
&lt;small&gt;nuóssa, agora me apavorei comigo mesmo e a minha sacolinha de
adjetivos! :)&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Pois não se trata de um time de "desenvolvedores chorões e teimosos que
só querem bater contra a gerência", mas sim de evidência científica,
informações coletadas e analisadas de forma estudada e organizada,
enfim, fatos! Esquecidos frequentemente, sim, mas sempre serão fatos, e
não vão deixar de ser verdade mesmo que muitos na indústria e na
academia estejam em negação.&lt;/p&gt;
&lt;p&gt;Bem, o livro tem bem mais coisas (tô pulando toda a parte específica de
codificação), pra quem quiser saber mais pode visitar os links no fim do
artigo ou então arranjar uma cópia do livro mesmo, que vale a pena. Só
quero ainda falar sobre algumas das falácias apresentadas no fim do
livro:&lt;/p&gt;
&lt;p&gt;Falácia: &lt;em&gt;Você não pode gerenciar o que não pode medir.&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Errado!&lt;/strong&gt; Na verdade, fazemos isso o tempo todo. Gerenciamos um monte
de tipo de coisas que não temos como medir. Na vida diária mesmo,
inclusive, desde relações sociais até os hábitos de alimentação.
Gerenciamos até a pesquisa do câncer. Gerenciamos análise e projeto de
software, que é uma tarefa essencialmente criativa. Gerenciamos muitas
coisas que são intelectuais ou mesmo criativas, sem nenhuma idéia que
números deveríamos ter pra nos guiar. Gerentes que trabalham com bom
conhecimento tendem a gerenciar qualitativamente, e não
quantitativamente.&lt;br /&gt;
Todavia, não é porque esse dito é uma falácia que devemos rejeitar a
mensagem que ele traz. Afinal, gerenciar tendo em mãos alguns dados
úteis é mais fácil que na ausência deles, e por isso é muito importante
para o gerenciamento de software medir as coisas úteis.&lt;br /&gt;
Boa capacidade de julgamento é vital.&lt;/p&gt;
&lt;p&gt;Falácia: &lt;em&gt;Você consegue "gerenciar qualidade” para um produto de
software (manage quality into a software product)&lt;/em&gt;&lt;br /&gt;
&lt;strong&gt;Errado também!&lt;/strong&gt; Aqui é basicamente uma reprise da afirmação anterior
sobre qualidade ser composta de alguns atributos: portabilidade,
confiabilidade, usabilidade, eficiência, testabilidade,
compreensibilidade e modificabilidade. &lt;strong&gt;Todos esses atributos da
qualidade de software têm aspectos profundamente técnicos, e portanto
&lt;span style="text-decoration: underline;"&gt;qualidade é uma realização
técnica&lt;/span&gt;.&lt;/strong&gt; Não funciona marketar qualidade, ou “metodologizar”
qualidade  -- as abordagens dos gerentes para atingir qualidade, que
tendem a ser um tiro no pé, alienando os profissionais técnicos. E não
ajuda que o inimigo número um de qualidade na maioria dos projetos é a
pressão do cronograma. A gerência fica querendo enfiar “qualidade” com
uma mão e tirar com a outra!
&lt;a href="http://eljunior.files.wordpress.com/2012/12/tqm-wont_work.jpg"&gt;&lt;img alt="TQM-wont_work" src="http://eljunior.files.wordpress.com/2012/12/tqm-wont_work.jpg?w=300" /&gt;&lt;/a&gt;&lt;br /&gt;
Note que a falácia aqui é que qualidade seja um trabalho da gerência. A
gerência tem um papel muito importante em atingir qualidade: estabelecer
a cultura de prioridade em primeiro lugar, remover barreiras que impedem
os técnicos de instituir qualidade, contratar pessoas de qualidade (a
&lt;em&gt;ultimate&lt;/em&gt; melhor maneira de atingir qualidade no produto), e sair do
caminho dessas pessoas de qualidade, permitindo-as que façam o que
queriam fazer o tempo todo: construir algo que eles possam se orgulhar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ler mais:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Post do Jeff Atwood com a lista completa de fatos e falácias (em
    inglês) -- &lt;small&gt;o texto que me instigou a comprar o livro:&lt;/small&gt;
    &lt;a href="http://www.codinghorror.com/blog/2008/03/revisiting-the-facts-and-fallacies-of-software-engineering.html"&gt;http://www.codinghorror.com/blog/2008/03/revisiting-the-facts-and-fallacies-of-software-engineering.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;"You can indeed manage what you can’t measure"&lt;/em&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.galorath.com/wp/you-can-manage-what-you-cant-measure.php"&gt;http://www.galorath.com/wp/you-can-manage-what-you-cant-measure.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blogs.hbr.org/davenport/2010/10/what_cant_be_measured.html"&gt;http://blogs.hbr.org/davenport/2010/10/what_cant_be_measured.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://corporatedeathspiral.blogspot.com.br/2009/11/managing-what-you-cant-measure.html"&gt;http://corporatedeathspiral.blogspot.com.br/2009/11/managing-what-you-cant-measure.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Série de posts em português discutindo os fatos e falácias do livro:&lt;ul&gt;
&lt;li&gt;&lt;a href="http://mr-bin.blogspot.com.br/2011/03/fatos-e-falacias-de-engenharia-de.html"&gt;http://mr-bin.blogspot.com.br/2011/03/fatos-e-falacias-de-engenharia-de.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mr-bin.blogspot.com.br/2011/03/fatos-e-falacias-de-engenharia-de_18.html"&gt;http://mr-bin.blogspot.com.br/2011/03/fatos-e-falacias-de-engenharia-de_18.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mr-bin.blogspot.com.br/2011/04/fatos-e-falacias-de-engenharia-de.html"&gt;http://mr-bin.blogspot.com.br/2011/04/fatos-e-falacias-de-engenharia-de.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mr-bin.blogspot.com.br/2011/09/fatos-e-falacias-de-engenharia-de.html"&gt;http://mr-bin.blogspot.com.br/2011/09/fatos-e-falacias-de-engenharia-de.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://mr-bin.blogspot.com.br/2011/11/fatos-e-falacias-de-engenharia-de.html"&gt;http://mr-bin.blogspot.com.br/2011/11/fatos-e-falacias-de-engenharia-de.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Mon, 03 Dec 2012 13:23:00 -0200</pubDate><guid isPermaLink="false">tag:,2012-12-03:2012/12/03/fatos-e-falacias-da-engenharia-de-software---notas-do-livro.html</guid></item><item><title>Sobre construir excelente experiência de usuário - livro EffectiveUI</title><link>/2012/11/25/sobre-construir-excelente-experiencia-de-usuario---livro-effectiveui.html</link><description>&lt;blockquote&gt;
&lt;p&gt;Este é o primeiro post na idéia de escrever sobre os livros que leio,
na tentativa de fixar melhor o que tô aprendendo. Rezemos pra que não
seja o último! :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;O livro é &lt;a href="http://www.amazon.com/Effective-UI-Building-Experience-Software/dp/059615478X" title="Effective UI na Amazon"&gt;Effective UI: The Art of Building Great User Experience in
Software,&lt;/a&gt;
os autores são os fundadores e os empregados da empresa
&lt;a href="http://www.effectiveui.com/"&gt;EffectiveUI&lt;/a&gt;, no site deles tem uma
&lt;a href="http://www.effectiveui.com/book-resources/" title="Effective UI - book resources"&gt;página do
livro&lt;/a&gt;.
Pelo que entendi, a empresa trabalha principalmente com consultoria de
UX, e o livro é baseado principalmente na experiência deles. Nunca tinha
ouvido falar da empresa antes, mas se a
&lt;a href="http://oreilly.com/" title="oreilly.com"&gt;O'Reilly&lt;/a&gt; pediu pra eles escreverem
o livro, imagino que eles devem saber do que estão falando. :)  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://shop.oreilly.com/product/9780596154790.do"&gt;&lt;img alt="" src="http://akamaicovers.oreilly.com/images/9780596154790/cat.gif" title="EffectiveUI - livro" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Ele trata do assunto: &lt;em&gt;"como fazer um projeto de software de qualidade,
considerando a experiência do usuário -- UX (User eXperience)"&lt;/em&gt;. Quando
me recomendaram esse livro, pensei que trataria de alguns princípios
básicos de interface e que talvez tivesse algumas receitas de bolo para
serem aplicadas no desenho de interfaces na prática. Todavia, um projeto
de experiência do usuário [1] envolve muito mais do que questões de
leiaute, tamanhos e tipografia. De acordo com os autores, para fazer
softwares que estimulem o envolvimento do usuário e ajudem-no a fazer
suas tarefas, é necessário construir um certo clima desde o começo do
projeto, que possibilite a equipe ser eficiente, e manter esse clima
durante o projeto até o fim. Por isso, acho que posso dizer que esse
livro também é sobre como escapar das armadilhas que causam a maioria
dos softwares serem muito ruins de usar, e que fazem projetos
fracassarem antes de você ouvir falar deles.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[1]: minha tradução para &lt;a href="http://en.wikipedia.org/wiki/User_experience_design"&gt;User experience design&lt;/a&gt;, não sei se existe termo melhor.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Boa parte dos conselhos do livro são diretamente aplicáveis para pessoas
envolvidas com liderança de projetos, mas o conteúdo interessa qualquer
pessoa que esteja envolvido em algum esforço pra produzir software de
qualidade.&lt;/p&gt;
&lt;p&gt;O engraçado é que, se eu soubesse de antemão exatamente do que o livro
tratava, acho que eu não teria me interessado. Mas como me recomendaram
como sendo um livro muito bom, resolvi ler e ver o que conseguiria
aprender, e no fim das contas valeu muito a pena! O livro é bem
abrangente, e fala de muita coisa que como desenvolvedor, é muito útil
eu me dar conta. Ainda assim, tenho a impressão que algumas lições ainda
vão demorar pra amadurecer na minha cabeça.&lt;/p&gt;
&lt;p&gt;Alguns pontos importantes do livro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Melhorias na experiência do usuário (UX) de um produto podem render
    facilmente retorno sobre investimento, pois criam valor ajudando os
    usuários a atingir seus objetivos.&lt;/li&gt;
&lt;li&gt;A responsabilidade pela experiência do usuário é de todo mundo, e
    não funciona sendo delegada a alguns departamentos isolados -- basta
    lembrar de como é "divertido" ligar para o call-center da sua
    prestadora de telefonia...&lt;/li&gt;
&lt;li&gt;Na hora de vender a idéia de melhorar a UX para as partes
    interessadas
    (&lt;em&gt;&lt;a href="http://pt.wikipedia.org/wiki/Stakeholder" title="Stakeholder na Wikipedia"&gt;stakeholders&lt;/a&gt;&lt;/em&gt;),
    exponha-as ao feedback dos usuários. Os autores inclusive contam uma
    história de como os &lt;em&gt;stakeholders&lt;/em&gt; de um projeto finalmente
    decidiram priorizar a melhoria da usabilidade de um produto, depois
    de assistirem o vídeo de um usuário muito irritado com o software a
    ponto de esmurrar o teclado.&lt;/li&gt;
&lt;li&gt;Você nunca tem todas as respostas antes do produto ser
    desenvolvido. Especificações e requerimentos funcionais feitos antes
    de começar o desenvolvimento são instantaneamente deficientes por
    terem sido feitos da perspectiva menos informada. Em vez de perder
    tempo definindo especificações, descubra os objetivos e as
    prioridades dos usuários e do negócio. Atingir os objetivos do
    negócio por meio de habilitar os usuários a atingir seus objetivos
    == sucesso.&lt;/li&gt;
&lt;li&gt;Intolerância a incertezas é intolerável. Durante a maior parte do
    projeto, sempre haverá incerteza e desconhecidos, aprender a lidar
    com isso é fundamental. Planejamento detalhado demais está fadado ao
    fracasso porque muito do desconhecido ainda não foi descoberto.
    Evite os problemas do &lt;a href="http://en.wikipedia.org/wiki/Big_Design_Up_Front"&gt;Big Design Up
    Front&lt;/a&gt; e comece o
    desenvolvimento o mais rápido possível. Quanto mais adiante no
    projeto você estiver, mais sábio você será. Por isso, descubra os
    objetivos cedo e postergue as decisões sobre os detalhes.&lt;/li&gt;
&lt;li&gt;A coisa mais importante que pode ser feita para o sucesso de um
    projeto é montar a melhor equipe. A equipe deve reconhecer a
    importância das necessidades dos usuários para o produto. Sem
    empatia com os usuários, os desenvolvedores podem acabar
    sacrificando UX pelo que é mais fácil de fazer (ou por um “desejo de
    elegância” para o modelo), os designers podem focar demais em deixar
    bonito em vez de funcional, e outros colaboradores podem dar
    importância demais às suas suposições sobre como o produto deve ser
    e deixar de lado a pesquisa de usuário: tudo isso sacrifica a
    qualidade do produto e diminui as chances dum bom retorno sobre o
    investimento.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Além da parte inicial que apresenta alguns conceitos de UX, explica sua
importância e por que você deveria se importar, o livro tem um capítulo
muito interessante sobre como capturar a perspectiva do negócio. Nele
são descritos alguns exercícios úteis para ajudar a descobrir as
expectativas das partes interessadas, encontrar as reais necessidades
por trás das idéias formuladas (por exemplo, alguém pode dizer que deve
haver um mecanismo para os usuários trocarem emails, em vez de expor a
necessidade de  compartilhamento de recursos e facilidades de
colaboração), estabelecer o público-alvo do produto e as características
de alguns usuários desse público, e ainda, priorizar quais são as partes
importantes disso tudo. Basicamente, uma sucessão de negociações e de
aplicações do &lt;a href="http://pt.wikipedia.org/wiki/Princ%C3%ADpio_de_Pareto" title="Princípio de Pareto"&gt;princípio de
Pareto&lt;/a&gt;
para descobrir o que é realmente necessário.&lt;/p&gt;
&lt;p&gt;Mas o trecho que mais me chamou a atenção foi o capítulo intitulado
Arquitetura Inicial do Produto (&lt;em&gt;Initial Product Architecture&lt;/em&gt;), que
discorre sobre as decisões iniciais do desenvolvimento, sobre coisas que
serão difíceis de mudar depois. A hora em que são respondida perguntas
tipo: "Que tamanho é esse troço que vamos fazer?" "Que outros produtos
teremos que integrar?" "Quais linguagens/plataformas vamos utilizar?" 
"Como os componentes serão conectados?” “Como as pessoas vão usar as
coisas que vamos criar?” “Que ‘cara’ o produto vai ter?”, e várias
outras. Segundo os autores, são dois tipos de “arquitetos” que trabalham
nessa parte: os "arquitetos de UX" e os "arquitetos técnicos".&lt;/p&gt;
&lt;p&gt;Os arquitetos de UX usariam seus conhecimentos (que envolvem usualmente
usabilidade, design gráfico, práticas de engenharia de software, etc,
até psicologia) para produzir um refinamento das soluções a serem
desenvolvidas através de descrições de cenários contextuais, guias de
estilos, mapeamento de fluxos da interface, elaboração de nomenclatura,
e outras coisas mais. O livro detalha algumas técnicas usadas, e eu
curti em especial a parada sobre o uso de cenários (&lt;a href="http://uxsuccess.com/2009/12/01/agile-personas-and-context-scenario/" title="Agile Personas and Context Scenario"&gt;exemplos
aqui&lt;/a&gt;
- em inglês), porque esses tempos comecei a fazer algo parecido num
projeto sem saber, e me pareceu que funcionava legal. A sacada desses
cenários é que você descreve os passos que o usuário precisa para fazer
uma tarefa, mas não precisa especificar cada detalhezinho que você não
precisa definir. Dessa forma, os cenários representam as características
tradicionais de um &lt;em&gt;framework&lt;/em&gt;: deixam fixo e estável o que já se sabe,
flexível e maleável o que ainda precisa ser descoberto.&lt;/p&gt;
&lt;p&gt;Ainda nesse mesmo estágio de arquitetura inicial, os arquitetos técnicos
resolveriam os aspectos técnicos chave do produto que devem ser
definidos de antemão, tendo em vista as necessidades e restrições
existentes. As tarefas geralmente envolvem coisas como descobrir quais
recursos existentes serão aproveitados, quais linguagens/plataformas
devem ser usadas, que elementos de infraestrutura serão necessários, e
por último mas não menos importante, começar a identificar a lógica de
negócio (que usualmente está espalhada em outros softwares, planilhas
Excel e às vezes apenas na cabeça de algumas pessoas).&lt;/p&gt;
&lt;p&gt;Por fim, os últimos dois capítulos tratam sobre o restante do projeto
(onde é gasto a maior parte do tempo), ressaltando a importância de
feedback e de comunicação durante todas as etapas do projeto. O primeiro
deles discorre especificamente sobre a importância do processo de
desenvolvimento ser
&lt;a href="http://pt.wikipedia.org/wiki/Desenvolvimento_iterativo_e_incremental" title="Desenvolvimento iterativo e incremental - Wikipedia"&gt;iterativo&lt;/a&gt;,
para agilizar a obtenção de &lt;em&gt;feedback&lt;/em&gt; e a reavaliação das decisões,
restrições e objetivos levando em conta o &lt;em&gt;feedback&lt;/em&gt;obtido. Esse
capítulo dá algumas idéias interessantes sobre minimizar as desvantagens
de um processo de desenvolvimento problemático que você pode estar sendo
forçado a trabalhar (como um
&lt;a href="http://pt.wikipedia.org/wiki/Modelo_em_cascata"&gt;cascata&lt;/a&gt; ou um
&lt;a href="http://en.wikipedia.org/wiki/Big_Design_Up_Front" title="Big Design Up Front"&gt;BDUF&lt;/a&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;permitir mais liberdade nas etapas posteriores de desenvolvimento;
    às vezes isso pode ser feito simplesmente renomeando os documentos
    “requisitos” e “especificações” produzidos para “diretrizes” e
    “recomendações”. :)&lt;/li&gt;
&lt;li&gt;envolver profissionais de outras disciplinas nas diferentes etapas:
    colocar alguns profissionais de UX e desenvolvedores também para
    trabalhar na definição dos requisitos de negócio, envolver também
    pelo menos um especialista de UX e de negócio na etapa de
    desenvolvimento.&lt;/li&gt;
&lt;li&gt;apressar as primeiras etapas para chegar logo na etapa de
    desenvolvimento, que será melhor de responder as perguntas. Qualquer
    especificação feita antes será cheia de erros e omissões e muitas
    vezes são criadas apenas por necessidades burocráticas, então é
    melhor não gastar muito tempo nisso e ir logo para a etapa em que as
    respostas serão realmente obtidas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E o último é sobre as ações relacionadas aos &lt;em&gt;releases&lt;/em&gt;, que devem ter
como objetivo obter feedback (versão &lt;em&gt;alpha&lt;/em&gt; para feedback de usuários
internos, versão &lt;em&gt;beta&lt;/em&gt; para feedback de uma amostra de usuários mais
perto do real), e também das tarefas necessárias após o &lt;em&gt;release&lt;/em&gt;:
marquetar o produto (muito necessário, mesmo que seja para uso interno
da organização), montar a documentação para os usuários (de preferência
embutida no próprio produto, disponível no contexto), e recapitular as
lições aprendidas. É importante verificar se os objetivos do negócio
originais estão sendo alcançados, e os objetivos do usuário também: o
resultado pode virar material para o próximo projeto. Pode ser útil
embutir no produto mecanismos para rastrear as ações dos usuários, para
verificar quais áreas requeiram atenção.&lt;/p&gt;
&lt;p&gt;Enfim, talvez esse texto tenha ficado comprido demais, mas pode também
ser um bom sinal: o livro é bom e até que aprendi bastante coisa.
Recomendo!&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Valeu, Filipi
(&lt;a href="http://www.nextt.com.br/" title="www.nextt.com.br"&gt;NEXTT&lt;/a&gt;), pela
recomendação do livro. :)&lt;/small&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 25 Nov 2012 18:48:00 -0200</pubDate><guid isPermaLink="false">tag:,2012-11-25:2012/11/25/sobre-construir-excelente-experiencia-de-usuario---livro-effectiveui.html</guid></item><item><title>Algoritmos deviam ser ensinados breadth-first, e não depth-first</title><link>/2012/11/07/algoritmos-deviam-ser-ensinados-breadth-first-e-nao-depth-first.html</link><description>&lt;p&gt;Algoritmos deviam ser ensinados 
&lt;a href="http://pt.wikipedia.org/wiki/Busca_em_largura" title="Busca em largura (Breadth-first search), na Wikipedia"&gt;&lt;em&gt;breadth-first&lt;/em&gt;&lt;/a&gt;,
e não
&lt;a href="http://pt.wikipedia.org/wiki/Busca_em_profundidade" title="Busca em profundidade (Depth-first search) na Wikipedia"&gt;&lt;em&gt;depth-first&lt;/em&gt;&lt;/a&gt;!  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note que não me refiro ao aprendizado de programação, mas ao estudo sistemático de algoritmos (envolvendo projeto e análise).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://pt.wikipedia.org/wiki/Busca_em_profundidade" title="Busca em
profundidade (Depth-first search) na Wikipedia"&gt;Depth-first&lt;/a&gt; é demasiado frustrante,
especialmente para quem já trabalha na indústria e sabe que existem muitas
outras coisas tão ou mais importantes quanto performance (legibilidade,
usabilidade, simplicidade, extensibilidade, e lá vai...). Embora eu consiga
visualizar a utilidade de poder provar a complexidade assintótica e a
otimização de uma determinada solução na teoria, não percebo as vantagens de
aprender a fazê-lo para cada tipo de algoritmo &lt;strong&gt;na prática&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Seria muito melhor uma abordagem
&lt;a href="http://pt.wikipedia.org/wiki/Busca_em_largura" title="Busca em
largura (Breadth-first search), na Wikipedia"&gt;breadth-first,&lt;/a&gt; em que você ficasse sabendo das
técnicas existentes de projeto de algoritmos, um apanhado das soluções
existentes para os problemas clássicos envolvendo as estruturas de dados
clássicas e as construções mais elaboradas em cima delas, e ir tentando
resolver problemas parecidos com os que já foram vistos. Dessa forma, o
estudante desenvolveria a habilidade de identificar e classificar os problemas
que aparecessem, e poderia estudá-lo a fundo (aí sim, &lt;em&gt;in depth&lt;/em&gt;) quando fosse
necessário.&lt;/p&gt;
&lt;p&gt;Mais importante do que compreender todos os detalhes duma instância específica
de um problema e saber articular essa compreensão, é conhecer as técnicas
utilizadas para obter a solução dessa classe de problemas e saber como
identificá-los.&lt;/p&gt;
&lt;p&gt;Alguém conserte isso, por favor!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Wed, 07 Nov 2012 16:58:00 -0200</pubDate><guid isPermaLink="false">tag:,2012-11-07:2012/11/07/algoritmos-deviam-ser-ensinados-breadth-first-e-nao-depth-first.html</guid></item><item><title>Primeiras escolhas importam</title><link>/2012/10/18/primeiras-escolhas-importam.html</link><description>&lt;p&gt;Nossas primeiras experiências influenciam as seguintes muito mais do que
a gente percebe.&lt;/p&gt;
&lt;p&gt;Algumas coisas você não escolhe: sua língua materna, sua primeira
escola, sua primeira professora de matemática. Mas tudo isso vai
deixando umas estampas na sua vida inteira, influenciando o jeito que
você pensa, sua habilidade de perceber as próprias emoções, sua
capacidade de entender o mundo e as outras pessoas. Com essas coisas a
gente eventualmente aprende a aceitar o que não foi bom, tenta ver o
lado positivo da coisa toda. Não tivemos escolha mesmo, não adianta
querer mudar o que não tem como.&lt;/p&gt;
&lt;p&gt;Agora, sobre as coisas que a gente tem, sim, escolha (o que comer, o que
vestir, o que escutar, o que rejeitar), aí acontecem umas coisas
estranhas. Muitas vezes, a gente acha que tá escolhendo, mas na verdade
não está. O fato é que tem um &lt;em&gt;bug&lt;/em&gt; chato no seu cérebro, que faz ele
querer que tudo seja meio parecido com o que ele já viu.&lt;/p&gt;
&lt;p&gt;O primeiro sabor de sorvete que você escolher, você provavelmente irá
repeti-lo muitas vezes, talvez sem nem experimentar muito outros, e irá
comparar sempre os outros que experimentar com aquele. Por ter sido a
primeira escolha, virou a referência. E às vezes você provou 2 ou 3
diferentes, e já escolhe um favorito... Quero dizer, quantos sabores de
sorvete existem?&lt;/p&gt;
&lt;p&gt;O primeiro programa de edição de texto que você usou na vida, vem
influenciando toda a sua vida de usuário de computador. O tipo de coisas
a aparecer na tela, a ação esperada para cada tecla, as respostas aos
cliques do mouse, tudo já criou uma primeira impressão que afetarão
todas as próximas aplicações que você usa.&lt;/p&gt;
&lt;p&gt;Nossas primeiras escolhas, muitas vezes tomadas no automático sem pensar
muito, tendem a se repetir e influenciar todas as próximas. Elas definem
o espaço em que todas as outras seguintes serão escolhidas e avaliadas.&lt;/p&gt;
&lt;p&gt;Pense na primeira vez que você resolveu comer um doce depois do almoço,
e quantas próximas vezes você decidiu fazer a mesma coisa sem
pestanejar. Ou quando você resolveu que assistir um vídeozinho do
YouTube rapidinho no horário de trabalho não dá nada, que até tem a ver
um pouco com assuntos do trabalho, e quantos próximos vídeozinhos
houveram, alguns nada a ver com o trabalho...&lt;/p&gt;
&lt;p&gt;Se você é um programador, a primeira linguagem que você aprendeu
influenciará todas as próximas que você aprender. Alguns programadores
chegam ao extremo de achar que a sua primeira linguagem é realmente a
melhor, tudo que ele precisa, e não vai mudar mais nunca.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=iKQ3DIP8mzU"&gt;Primeiras escolhas
importam!&lt;/a&gt;&lt;br /&gt;
Elas afetam você e as decisões que vai tomar depois, mais do que você
consegue se dar conta.&lt;/p&gt;
&lt;p&gt;Num mundo em que somos continuamente rodeados de avalanches de
informações, fazer boas escolhas iniciais faz muita diferença.&lt;/p&gt;
&lt;p&gt;Vamos prestar atenção nas próximas, então. :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Thu, 18 Oct 2012 16:23:00 -0300</pubDate><guid isPermaLink="false">tag:,2012-10-18:2012/10/18/primeiras-escolhas-importam.html</guid></item><item><title>O que fazer quando o Ubuntu trava</title><link>/2012/06/30/o-que-fazer-quando-o-ubuntu-trava.html</link><description>&lt;p&gt;Um amigo meu costumava dizer que tudo no Linux é com malabarismos no
teclado, porque certa vez ele conseguiu rebootar um sistema que estava
travado, apertando várias teclas aleatórias ao mesmo tempo
("Alt+Shift+Ctrl+Del+K+Enter", narrava). Tempos depois, ele acabou
adotando o &lt;a href="http://www.ubuntu.com"&gt;Linux Ubuntu&lt;/a&gt; no desktop, e embora
ainda tenha problemas de vez em quando, tenho a impressão que ele já se
adaptou bem... Este post é uma homenagem a ele, uma versão em Português
duma &lt;a href="http://askubuntu.com/questions/4408/what-should-i-do-when-ubuntu-freezes" title="AskUbuntu - What should I do when Ubuntu freezes"&gt;resposta no AskUbuntu à pergunta do que fazer quando o Ubuntu
trava&lt;/a&gt;!
:)&lt;/p&gt;
&lt;h2&gt;Quando um programa pára de funcionar:&lt;/h2&gt;
&lt;p&gt;Quando a janela dum programa pára de responder, você geralmente consegue
parar o programa no botão Fechar (aquele com o X), no canto superior
direito (ou esquerdo, nas versões mais novas do Unity). Geralmente isso
vai resultar numa mensagem avisando que o programa não está respondendo,
e lhe mostrar a opção para matar o programa ou continuar esperando até
ele voltar a responder.&lt;/p&gt;
&lt;p&gt;Às vezes isso não funciona como esperado. Se você não consegue fechar
uma janela do jeito normal, você pode abrir um terminal (ou apertar
&lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;F2&lt;/kbd&gt;) e executar o comando &lt;code&gt;xkill&lt;/code&gt;. Feito
isso, o cursor do mouse se transformará em um X, e você pode clicar na
janela com problema para matar o processo, ou clicar com o direito em
qualquer lugar para voltar o mouse ao normal.&lt;/p&gt;
&lt;p&gt;Quando comandos rodando num terminal param de responder, geralmente eles
podem ser parados com as combinações &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;C&lt;/kbd&gt; ou
&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;/&lt;/kbd&gt;. Se nenhum funcionar, você pode abrir
outro terminal (ou tentar recuperar o controle do mesmo com
&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Z&lt;/kbd&gt;), e tentar descobrir o número do processo
para matar "na mão", usando &lt;code&gt;ps ax | grep COMANDO&lt;/code&gt; onde COMANDO é o nome
do programa que não está respondendo. Isso deve resultar numa saída
parecida com essa:  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ps ax &lt;span class="p"&gt;|&lt;/span&gt; grep firefox
&lt;span class="m"&gt;2110&lt;/span&gt; ?        Sl    &lt;span class="m"&gt;30&lt;/span&gt;:32 /usr/lib/firefox/firefox
&lt;span class="m"&gt;2192&lt;/span&gt; ?        Sl    &lt;span class="m"&gt;21&lt;/span&gt;:19 /usr/lib/firefox/plugin-container /usr/lib/flashplugin-installer/libflashplayer.so -greomni /usr/lib/firefox/omni.ja
&lt;span class="m"&gt;2110&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt; plugin &lt;span class="m"&gt;4584&lt;/span&gt; pts/0    S+     &lt;span class="m"&gt;0&lt;/span&gt;:00 grep --color&lt;span class="o"&gt;=&lt;/span&gt;auto firefox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;O primeiro campo de cada linha é o número do processo (PID, de &lt;em&gt;Process
ID&lt;/em&gt;) dos programas que o &lt;code&gt;grep&lt;/code&gt; encontrou na busca (você pode ignorar o
último, que representa o próprio &lt;code&gt;grep&lt;/code&gt;). Para matar o processo, use o
comando: &lt;code&gt;kill -9 PID_DO_PROCESSO&lt;/code&gt;, usando o número correspondente ao
programa problemático no lugar de &lt;em&gt;PID_DO_PROCESSO&lt;/em&gt;. Você pode ter que
fuçar um pouco mais pra descobrir qual o processo certo da lista,
refinando a busca do &lt;code&gt;grep&lt;/code&gt; ou então usar o programa &lt;code&gt;top&lt;/code&gt; no lugar.&lt;/p&gt;
&lt;p&gt;Se você estiver usando o &lt;a href="http://www.gnome.org"&gt;GNOME&lt;/a&gt;, você não precisa
ter que lidar com essas elocubrações na linha de comando pra fazer isso,
simplesmente abra o &lt;em&gt;Monitor do Sistema&lt;/em&gt; (vá em &lt;code&gt;Sistema&lt;/code&gt; →
&lt;code&gt;Administração&lt;/code&gt; → &lt;code&gt;Monitor do Sistema&lt;/code&gt;), vá para a aba &lt;em&gt;Processos&lt;/em&gt;,
escolha o processo que você precisa matar (talvez o que está usando 90%
da CPU?), clique com o direito nele e escolha a opção
&lt;code&gt;Finalizar Processo&lt;/code&gt; ou &lt;code&gt;Matar Processo&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://eljunior.files.wordpress.com/2012/06/matar_processo.png"&gt;&lt;img alt="Terminando um processo usando o Monitor do Sistema do
GNOME" src="http://eljunior.files.wordpress.com/2012/06/matar_processo.png" title="GNOME - Monitor do Sistema" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Quando o mouse pára de funcionar:&lt;/h2&gt;
&lt;p&gt;Se o teclado ainda funciona, você pode tentar reiniciar o ambiente
gráfico com a combinação &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;SysReq (Print
Screen)&lt;/kbd&gt; + &lt;kbd&gt;K&lt;/kbd&gt;. Isso vai fechar todos os programas rodando
no ambiente gráfico e voltar você à tela de login. Opcionalmente, você
pode tentar abrir o &lt;code&gt;gnome-terminal&lt;/code&gt; com &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;F2&lt;/kbd&gt;
e tentar descobrir o que está acontecendo (quem sabe matar o programa
que avacalhou o mouse?).&lt;/p&gt;
&lt;h2&gt;Quando tudo, teclas e mouse, param de funcionar:&lt;/h2&gt;
&lt;p&gt;Tente fazer um reboot seguro usando as &lt;a href="http://jvflima.wordpress.com/2007/01/09/magicas-do-sysreq/" title="Mágicas do SysReq"&gt;Mágicas do
SysReq&lt;/a&gt;.
Isso vai envolver um certo malabarismo tecladístico que faz jus aos
comentários do meu amigo: enquanto mantém pressionadas as teclas
&lt;kbd&gt;Alt&lt;/kbd&gt; e &lt;kbd&gt;SysReq (Print Screen)&lt;/kbd&gt;, digite a sequência
&lt;kbd&gt;R&lt;/kbd&gt; &lt;kbd&gt;E&lt;/kbd&gt; &lt;kbd&gt;I&lt;/kbd&gt; &lt;kbd&gt;S&lt;/kbd&gt; &lt;kbd&gt;U&lt;/kbd&gt;
&lt;kbd&gt;B&lt;/kbd&gt;. Esses comandos são reconhecidos pelo kernel Linux, que
executam as operações:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;un&lt;strong&gt;R&lt;/strong&gt;aw:      recupera o controle do teclado,&lt;/li&gt;
&lt;li&gt;t&lt;strong&gt;E&lt;/strong&gt;rminate:  envia o sinal SIGTERM a todos os processos, permitindo que terminem graciosamente,&lt;/li&gt;
&lt;li&gt;k&lt;strong&gt;I&lt;/strong&gt;ll:      envia o sinal SIGKILL para todos os processos, forçando-os a terminar imediatamente,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;ync:     sincroniza dados do sistema de arquivos com o disco,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;U&lt;/strong&gt;nmount:  remonta todos os arquivos em modo somente leitura,&lt;/li&gt;
&lt;li&gt;re&lt;strong&gt;B&lt;/strong&gt;oot:    reinicia o sistema&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; Na época que aprendi essa sequência de comandos, lembro que me ajudou a decorar como &lt;em&gt;BUSIER&lt;/em&gt; ao contrário...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Se isso não funcionar, então está na hora de reiniciar o computador no dedão!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sat, 30 Jun 2012 21:11:00 -0300</pubDate><guid isPermaLink="false">tag:,2012-06-30:2012/06/30/o-que-fazer-quando-o-ubuntu-trava.html</guid></item><item><title>Entre profissionais</title><link>/2012/06/21/entre-profissionais.html</link><description>&lt;p&gt;Alguns dias atrás, tive a chance de fazer duas coisas muito importantes pra
mim: apresentar uma performance solo no meu estilo de violão instrumental
(acústico fingerstyle &lt;em&gt;in your face&lt;/em&gt; :D) e subir no palco com músicos
profissionais: o estupendo guitarrista
&lt;a href="https://pt.wikipedia.org/wiki/Manezinho" title="Manézinho - nativo de
Floripa, SC"&gt;manézinho&lt;/a&gt; &lt;a href="http://www.lucianobilu.com.br/" title="Site do
guitarrista Luciano Bilu"&gt;Luciano Bilu&lt;/a&gt; e seu trio!&lt;/p&gt;
&lt;p&gt;Há já um bom tempo que tenho sido o &lt;em&gt;bedroom player&lt;/em&gt;, curtindo o violão sem
muita preocupação, levando como hobby mesmo, pra se divertir. Poder acompanhar
profissionais nos ensaios e no palco foi uma experiência reveladora pra mim, em
diversos aspectos que de fato ainda estou refletindo...&lt;/p&gt;
&lt;p&gt;É a situação ideal pra se aprender: estar no meio de gente que manja muito mais
do que a gente, prestando bastante atenção pra aprender o máximo! Tentei
prestar atenção e tomar nota de algumas coisas que me chamaram atenção,
relacionando com as características que também percebo nos profissionais de
excelência que já conheci na minha área.&lt;/p&gt;
&lt;p&gt;Profissional não deixa detalhes pra trás. Quando alguma coisinha não está
funcionando, ela é identificada, isolada e trabalhada, até a música ficar
completa. Cada música tem o jeito certo para terminar, o lugar certo para o
improviso, etc. Se o leitor é músico profissional, imagino que esteja se
perguntando por que estou falando de coisas óbvias. Pois é... &lt;a href="http://sivers.org/obvious" title="Obvious to you. Amazing to
others."&gt;Óbvio pra você.
Fantástico para outros!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Isso é coisa de quem se importa de verdade, e por isso está simplesmente fora
de cogitação sacrificar qualidade por preguiça ou inércia mesmo.  (Coisas que o
hobbyista aqui faz o tempo todo... :-/) Tarefas que o iniciante deixa de fazer
por achar enfadonhas, o profissional passa por elas sem reclamar, sem ficar
buscando atalhos.&lt;/p&gt;
&lt;p&gt;E finalmente, eles são muito gente boa! Sabem que você está começando, que um
dia estiveram onde você está, e estão prontos a perdoar os erros e as notas
podres. As críticas vêm em formato de encorajamento, pra você melhorar, jogar
pra cima mesmo. E isso às vezes é o que estava faltando você querer melhorar de
verdade...&lt;/p&gt;
&lt;p&gt;Minha apresentação foi lotada de erros de principiante e, apesar de eu estar
nervoso à beça nela, a perninha tremeu de verdade quando eu toquei as músicas
com a banda! A função podia até ser um pouco menos elaborada, mas senti a
responsabilidade bem maior de dar o melhor de mim, pra fazer jus ao padrão
deles.&lt;/p&gt;
&lt;p&gt;Enfim, foi muito massa, me dei conta de muuuuita coisa que eu tenho que
aprender, meu respeito pelos músicos profissionais triplicou e estou muito
feliz de ter tido essa oportunidade. Valeu, Bilu! Espero que um dia me convidem
de novo. :)&lt;/p&gt;
&lt;p&gt;Você pode conferir as músicas do &lt;a href="http://www.lucianobilu.com.br/" title="Site do guitarrista Luciano Bilu"&gt;Luciano Bilu&lt;/a&gt; no &lt;a href="http://lucianobilu.bandcamp.com/" title="Bandcamp do Luciano Bilu"&gt;Bandcamp
dele&lt;/a&gt;, curtir a
&lt;a href="http://www.facebook.com/luciano.bilu.9" title="Luciano Bilu no
Facebook"&gt;página no Facebook&lt;/a&gt; e acompanhar os vídeos da gravação do terceiro álbum no &lt;a href="http://www.youtube.com/LucianoBilu" title="Luciano Bilu no
Youtube"&gt;canal
LucianoBilu no Youtube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pra acabar, um vídeozinho da minha apresentação:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=SUJvAepO-rc"&gt;http://www.youtube.com/watch?v=SUJvAepO-rc&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Thu, 21 Jun 2012 20:41:00 -0300</pubDate><guid isPermaLink="false">tag:,2012-06-21:2012/06/21/entre-profissionais.html</guid></item><item><title>Idéias e execução</title><link>/2012/03/09/ideias-e-execucao.html</link><description>&lt;p&gt;Uma vez ou outra a gente topa com um cara que acha que ter uma idéia é
uma coisa tremendamente importante. Execução, isto é para noviços
(subentenda-se, &lt;em&gt;gente que só faz o que mandam&lt;/em&gt;)! O jeito de ter sucesso é ter uma idéia
brilhante, e a sorte de ter tido essa idéia antes de todo mundo...&lt;br /&gt;
De vez em quando, esse cara tem uma idéia empolgante o suficiente pra
iludir a si próprio que teria uma chance de criar uma coisa. E em vez de
botar a mão na massa e tentar implementar, aporrinha os outros sobre
como a sua idéia é super, e não se esforça pra pô-la em execução.&lt;/p&gt;
&lt;p&gt;Se você não reconhece esse tipo de cara, tome cuidado: talvez você seja
ele! E esse tipo de pensamento é ruim pra você.&lt;/p&gt;
&lt;p&gt;É ruim devido a vários fatores importantes, sendo o principal deles o
fato de que sua idéia é uma bosta. Bem, pode ser que não, mas é muito
provável! A probabilidade é de 87,81%, graças a estatística que elaborei
depois de escrever dois (ou três) números e escolher o mais bonito.&lt;/p&gt;
&lt;p&gt;Se você não domina o ofício envolvido, você tem muito mais dificuldade
de enxergar os problemas das suas idéias.&lt;br /&gt;
Se você não tem idéias muito frequentemente, e trata cada idéia sua como
algo especial que sequer compartilha com qualquer pessoa (ou ainda, está
aguardando o "momento certo"), as chances de sua idéia estar cheia de
furos são gigantes.&lt;br /&gt;
Por fim, se você não experimenta nenhuma das idéias que tem, você tem
muito menos chances de sucesso do que alguém que está sempre testando um
monte de idéias ruins e aprendendo com os erros.&lt;/p&gt;
&lt;p&gt;O dia que você tiver uma idéia empolgante o suficiente, você não vai ter
o necessário para executá-la. Você irá racionalizar que não pôde colocar
em prática sua grande idéia porque não tinha dinheiro para pagar alguém
pra fazer o trabalho braçal pra você, não teve apoio dos amigos, não
teve incentivo do governo, e o que mais inventar o poderoso gerador de
desculpas conhecido como cérebro humano.  &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
  &lt;a href="http://pt.wikipedia.org/wiki/Linus_Pauling"&gt;&lt;img alt="Linus Pauling, cientista superprodutivo" src="http://upload.wikimedia.org/wikipedia/commons/5/58/L_Pauling.jpg" title="Linus Pauling" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Se você quer ter boas idéias, você precisa ter muitas idéias. A
maioria delas estarão erradas. O que você precisa aprender é quais
jogar fora. - Linus Pauling, cientista superprodutivo&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ward Cunningham, famoso pela &lt;a href="http://en.wikipedia.org/wiki/Ward_Cunningham#Ideas_and_inventions"&gt;invenção do Wiki e de outras noções
importantes&lt;/a&gt;
que acabaram dando forma à indústria de software, é conhecido por viver
&lt;a href="http://www.nagarro.com/blog/ward-cunningham/"&gt;trocando idéias com os colegas&lt;/a&gt;,
e implementando uma ou outra &lt;a href="http://c2.com/ward/glory/"&gt;idéia bizarra&lt;/a&gt; das
suas. Ele sabe que o jeito de ter boas idéias é ter muitas idéias, inclusive
ruins, e que o jeito de aprender quais jogar fora é discutindo-as e pondo-as em
teste.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://sivers.org/multiply"&gt;Idéias são apenas um multiplicador da execução&lt;/a&gt;. A
execução não é uma “tarefa de pedreiro”, mas sim o fator que carrega maior peso
no impacto de um produto. Se idéia tá na escala 1, execução está na escala
1000000. Uma idéia brilhante precisa também de uma execução brilhante pra virar
         sucesso.&lt;/p&gt;
&lt;p&gt;É inútil ficar esperando ter uma grande idéia no momento certo, e é ridículo
achar que a idéia sozinha já é grande coisa.&lt;/p&gt;
&lt;p&gt;Idéias são bonitas quando transmitidas, poderosas quando compreendidas, e
impactantes quando vividas. Execute a sua. (Ou as suas. :)&lt;/p&gt;
&lt;p&gt;Suje as mãos! Escreva seu livro, filme seu vídeo, implemente seu app, monte sua
barraca de cachorro-quente. Você vai escrever muito lixo, filmar muita
tosquice, fazer muitos protótipos horrendos, e seus primeiros cachorros
provavelmente não serão aquela maravilha.  E talvez você não ganhe dinheiro.
Mas ahh... você vai aprender muita coisa com cada um desses cachorros-quentes,
pode ter certeza!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Fri, 09 Mar 2012 07:38:00 -0300</pubDate><guid isPermaLink="false">tag:,2012-03-09:2012/03/09/ideias-e-execucao.html</guid></item><item><title>Aprendendo Thumbpicking</title><link>/2011/12/11/aprendendo-thumbpicking.html</link><description>&lt;p&gt;&lt;center&gt;
  &lt;a href="http://eljunior.files.wordpress.com/2011/12/ahogado.png"&gt;&lt;img alt="" src="http://eljunior.files.wordpress.com/2011/12/ahogado.png?w=300" title="Eu, fominha, tocando violão em Punta del Este" /&gt;&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; atualizei os links pra download dos MP3, porque estouraram
os limites do SoundCloud.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Já faz uns 3 anos que comecei a tocar no violão o estilo conhecido como
&lt;em&gt;thumbpicking&lt;/em&gt; (alguns também chamam de &lt;em&gt;fingerpicking&lt;/em&gt;, embora &lt;a href="http://en.wikipedia.org/wiki/Fingerstyle_guitar" title="Página da Wikipedia em inglês sobre violão fingerstyle"&gt;esse termo
parece ser mais genérico&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Desde piá eu já tocava um pouco de violão e teclado, e sempre tive vontade de
tentar emular no violão o que conseguia no teclado: tocar a melodia ao mesmo
tempo que a base. A primeira vez que vi isso ser feito de verdade, sem deixar
nada sobrando, foi há mais ou menos uns 3 anos atrás, quando vi &lt;a href="http://www.youtube.com/watch?v=AhR04kmcSXU" title="Tommy Emmanuel tocando
Angelina"&gt;um
vídeo&lt;/a&gt; do &lt;a href="http://www.tommyemmanuel.com/" title="Tommy Emmanuel -
Site Oficial"&gt;Tommy Emmanuel&lt;/a&gt; no Youtube.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
  &lt;a href="http://www.flickr.com/photos/zanastardust/4224141072/"&gt;&lt;img alt="Tommy Emmanuel" src="http://farm5.staticflickr.com/4012/4224141072_f706c5452f.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/zanastardust/4224141072/"&gt;Tommy Emmanuel em algum show fenomenal por aí..!&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Se você gosta de violão/guitarra, e ainda não conhece o nome Tommy
Emmanuel, pare de ler esse texto agora mesmo e vá catar alguns vídeos do
Tommy no Youtube! Aliás, vá mesmo que você nem curta muito o tal do
violão! O Tommy é muito mais do que um baita músico, a chance é que você
vai se abobar de qualquer forma. Pode começar com &lt;a href="http://www.youtube.com/watch?v=JNZL7GkqeRI" title="Tommy Emmanuel tocando Guitar Boogie em St Louis"&gt;esse vídeo de Guitar
Boogie&lt;/a&gt;,
ou com a &lt;a href="http://www.youtube.com/watch?v=apXSU8F8zWs" title="Tommy Emmanuel tocando Purple Haze no quintal da casa dele"&gt;versão dele de Purple
Haze&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pois bem, o estilo que Tommy desenvolveu é em boa parte o &lt;em&gt;thumbpicking&lt;/em&gt;
de &lt;a href="http://en.wikipedia.org/wiki/Chet_Atkins" title="Chet Atkins na Wikipedia"&gt;Chet
Atkins&lt;/a&gt;,
que desenvolveu o próprio estilo de tocar melodia em cima de baixos
alternados tentando reproduzir o que ouvia de &lt;a href="http://en.wikipedia.org/wiki/Merle_Travis" title="Merle Travis na Wikipedia"&gt;Merle
Travis&lt;/a&gt;.
Travis, por sua vez, desenvolveu o seu estilo a partir do &lt;em&gt;country
blues&lt;/em&gt; que era tocado pelos negros americanos da sua região.&lt;/p&gt;
&lt;p&gt;Enfim, a origem da coisa toda é muito interessante, mas eu obviamente só
fui descobrir essas coisas pesquisando bastante depois. Eu comecei nessa
parada mesmo, basicamente, a partir dessa &lt;a href="http://www.youtube.com/watch?v=YoqG7PO-MHs" title="Tommy Emmanuel dando lição de violão"&gt;pequena lição do próprio
Tommy&lt;/a&gt;:
&lt;a href="http://www.youtube.com/watch?v=YoqG7PO-MHs"&gt;http://www.youtube.com/watch?v=YoqG7PO-MHs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
  &lt;a href="http://eljunior.files.wordpress.com/2011/12/dsc05668.jpg"&gt;&lt;img alt="Tommy Emmanuel fazendo palhaçada pra gente" src="http://eljunior.files.wordpress.com/2011/12/dsc05668.jpg?w=300" title="Tommy Emmanuel fazendo palhaçada pra gente" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Tommy fazendo graça, e eu felizão assistindo...
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;Nesse vídeo ele conta, entre outras coisas, de quando ele ouviu no rádio
pela primeira vez Chet Atkins tocando a melodia, o baixo e o ritmo, tudo
ao mesmo tempo. Ele prossegue explicando (entre uma piada e outra :D)
como treinou a independência do polegar dos outros dedos da mão direita,
ainda quando criança, para conseguir fazer a mesma coisa. E assim fui
iniciado, treinando os exercícios que ele ensinou nesse vídeo (deixando
os amigos doidos), tentando incorporar nas músicas que eu já tocava,
tentando em outras que aprendi depois, e tirando algumas músicas do
Tommy e Chet.&lt;/p&gt;
&lt;p&gt;Meu objetivo é tentar passar essas mesmas idéias aqui, no nosso bom
português, pra quem também quer aprender esse jeito de tocar. Então,
vamos lá!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt; No fim do post, está uma lista com os links para todos os
exercícios propostos (áudios &amp;amp; tablaturas), assim você pode baixar e
estudar com calma. As tablaturas são meramente uma ajuda pra quem achar
mais fácil assim. Se você já toca "por ouvido" e não manja tablaturas,
nem esquente a cabeça e vá pelo áudio mesmo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Baixo alternado&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A primeira coisa que você precisa começar a fazer pra desenvolver a
independência na mão direita, treinar o baixo alternado com o polegar
sozinho, o famoso dedão (em inglês, &lt;em&gt;thumb&lt;/em&gt; - daí o nome
&lt;em&gt;thumbpicking&lt;/em&gt;). Esse é o famoso &lt;em&gt;"boom-chick"&lt;/em&gt;, o som característico do
estilo! Alguns exemplos de músicas: &lt;a href="http://www.youtube.com/watch?v=DrDbaUKE4mM" title="Tommy Emmanuel tocando Locomotivation"&gt;Locomotivation - Tommy
Emmanuel&lt;/a&gt;,
&lt;a href="http://www.youtube.com/watch?v=5wTVLIZaxMk" title="I'll see you in my dreams - Chet Atkins &amp;amp; Mark Knopfler"&gt;I'll see you in My Dreams - Chet Atkins &amp;amp; Mark
Knopfler&lt;/a&gt;,
&lt;a href="http://www.youtube.com/watch?v=BORQTtjscTg" title="(Robbie's Bit) Thanks Chet - Robbie McIntosh"&gt;Thanks Chet - Robbie
McIntosh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;O princípio é simples: você precisa abafar de leve as cordas mais graves
que você vai usar para o baixo alternado, para que ele não se sobressaia
e a melodia se destaque. Então, o primeiro exercício é exatamente isso:
tocar o baixo alternado com abafamento, usando apenas o dedão.&lt;/p&gt;
&lt;p&gt;Faça com a mão esquerda a &lt;a href="http://guitar.about.com/library/blchord_aminor.htm" title="posição de lá menor aberta simples"&gt;posição aberta simples de Lá
menor&lt;/a&gt;,
e toque com o dedão nas 3 cordas graves alternando o baixo, tentando
imitar o som que você ouve no áudio a seguir. Use o lado da palma da mão
levemente encostado as 3 cordas de cima, para abafar um pouco o som.&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/01-baixo_alternado.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/01-baixo_alternado.mp3" title="Baixar MP3 - Baixo Alternado"&gt;Baixar
MP3&lt;/a&gt; 
|  &lt;a href="http://eljunior.files.wordpress.com/2011/12/01-baixo_alternado.pdf"&gt;Baixar tablatura: Baixo
Alternado&lt;/a&gt;&lt;/p&gt;
&lt;div style="padding-left: 30px;"&gt;

Se você nunca fez esse tipo de coisa antes, você vai descobrir que o seu
dedão é um bicho muito teimoso! O danado do polegar não quer fazer o que
você manda ele fazer! Não se preocupe se o começo for difícil. Insista
um pouco, tenha paciência, e em algumas semanas ele vai estar que é um
leque! :)

&lt;/div&gt;

&lt;div style="padding-left: 30px;"&gt;

Uma coisa que você pode tentar, é deixar os outros quatro dedos
encostados no tampo do violão, assim você se força a usar somente o
polegar e deixar os outros dedos parados. Isso foi uma coisa que eu
precisei fazer no começo por um bom tempo.

&lt;/div&gt;

&lt;p&gt;O detalhe desse exercício é tentar abafar apenas as 3 cordas graves que
você vai utilizar para o baixo, deixando as 3 cordas de baixo livres e
"desabafadas" pra você usar depois. Essa técnica de abafamento com o
lado da palma é também conhecida como &lt;a href="http://en.wikipedia.org/wiki/Palm_mute" title="Palm mute"&gt;palm
mute&lt;/a&gt;, e é muito
usada por guitarristas que usam palheta.&lt;/p&gt;
&lt;p&gt;Aliás, se você tiver uma dedeira dando sopa, pode tentar usá-la, se
preferir. Eu comecei usando os dedos mesmo, e comecei a usar a dedeira
depois. Isso não deve importar muito nessa hora, agora o importante é
treinar a independência do dedão. Faça como for mais confortável pra
você. Treine o suficiente para conseguir manter o dedão tocando esse
exercício por um bom bocado de tempo, sempre com o lado da palma da mão
abafando as 3 cordas graves.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Trazendo os outros dedos para a dança&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Quando você achar que tá na hora, experimente tentar colocar os outros
dedos na dança. Ainda mantendo a mão esquerda fazendo a posição aberta
de Lá menor, toque no tempo forte com os outros três dedos seguinte nas
outras três cordas, enquanto faz o baixo alternado com abafamento nas
três cordas de cima. Tente imitar o som do áudio:&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/02-acordes_no_tempo_forte_com_baixo_alternado.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/02-acordes_no_tempo_forte_com_baixo_alternado.mp3" title="Baixar MP3 - Acordes no Tempo Forte + Baixo Alternado"&gt;Baixar
MP3&lt;/a&gt; 
|  &lt;a href="http://eljunior.files.wordpress.com/2011/12/02-acordes_no_tempo_forte_com_baixo_alternado.pdf"&gt;Baixar tablatura: Acordes no Tempo Torte +
Baixo_alternado&lt;/a&gt;&lt;/p&gt;
&lt;div style="padding-left: 30px;"&gt;

Novamente, se é a primeira vez que você faz algo parecido, você vai
perceber o dedão teimoso! Quando você coloca os outros dedos pra tocar o
acorde, o danado se rebela... Tente trabalhar nisso até achar que está
bom.

&lt;/div&gt;

&lt;div style="padding-left: 30px;"&gt;

Não esquente a cabeça em ficar perfeito logo de cara. Você está
treinando sua mão pra fazer um troço que ela não tá acostumada, vai
levar um bom tempo até o som sair estável. O negócio agora é o dedão
ficar independente dos outros dedos. O som você trabalha pelo resto da
vida depois... ;)

&lt;/div&gt;

&lt;p&gt;A seguir, quando você achar que está pronto, adicione uma outra puxada
no acorde com os outros dedos, no contratempo, como no áudio a seguir:&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/03-acordes_no_contratempo_com_baixo_alternado.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/03-acordes_no_contratempo_com_baixo_alternado.mp3" title="Baixar MP3 - Acordes no contratempo com baixo alternado"&gt;Baixar
MP3&lt;/a&gt; 
|  &lt;a href="http://eljunior.files.wordpress.com/2011/12/03-acordes_no_contratempo_com_baixo_alternado.pdf"&gt;Baixar tablatura: Acordes no contratempo +
Baixo_alternado&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dependendo de como você estiver, esses 3 exercícios podem levar dias,
semanas ou até meses. Pra mim, levou alguns meses até o som começar a
soar mais natural. Eu nunca fui realmente muito disciplinado com essas
práticas todas, mas o ideal é você manter a consistência. 15 minutos por
dia é mais importante que 6 horas só no final de semana.&lt;/p&gt;
&lt;p&gt;Minha sugestão é que você faça no seu ritmo, sem estresse. Mas sempre
sabendo que se não está treinando, também não vai simplesmente conseguir
tocar de repente.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mudando os acordes e rascunhando melodia&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Até agora, nos exercícios você estava com a mão esquerda parada e
repetindo um padrão na mão direita várias vezes seguidas. Experimente
agora mudar de acorde, mantendo o baixo alternado com o dedão: comece em
Lá menor e vá para Mi maior, e depois volte, imitando o áudio.&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/04-base-thumbpicking.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/04-base-thumbpicking.mp3" title="Baixar MP3 - Base Thumbpicking"&gt;Baixar
MP3&lt;/a&gt;
 |  &lt;a href="http://eljunior.files.wordpress.com/2011/12/04-base-thumbpicking.pdf"&gt;Baixar tablatura: Base thumbpicking - Trocando
acordes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Repare que quando muda o acorde, temos que recomeçar o padrão de
alternar baixos em outra corda para tocar a tônica (raiz) do acorde no
tempo forte. Quando em Lá menor, o baixo alternado deve começar em Lá
(5a corda), quando em Mi maior, o baixo alternado deve começar em Mi (6a
corda).&lt;/p&gt;
&lt;div style="padding-left: 30px;"&gt;

Esse é outro exercício que vai empoderar bastante seu dedão. Quando você
consegue tocar com as duas mãos acompanhando as mudanças, você pode
tocar qualquer música que encaixe nesse ritmo! Você pode criar seus
próprios exercícios usando outros acordes, cifras de músicas que você
conheça, cantigas de roda, enfim!

&lt;/div&gt;

&lt;p&gt;A seguir, o próximo exercício é dar mais serviço para os outros dedos,
sempre mantendo o dedão no baixo alternado. Você vai colocar alguns
padrões de dedilhado, e o dedão não pode parar. Volte para os exercícios
anteriores se necessário, comece só com o dedão, e aos poucos comece a
usar os outros. O áudio:&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/05-base_com_dedilhado-thumbpicking.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/05-base_com_dedilhado-thumbpicking.mp3" title="Baixar MP3 - Base thumbpicking com dedilhado"&gt;Baixar
MP3&lt;/a&gt;
 |  &lt;a href="http://eljunior.files.wordpress.com/2011/12/05-base_com_dedilhado-thumbpicking.pdf"&gt;Baixar tablatura: Base thumbpicking com dedilhado em
cima&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Por fim, o último exercício é uma variação do anterior, em outro tom e
com um padrão um pouquinho mais complicado. Todavia, o princípio é o
mesmo: mudar de acorde, dedilhando com os dedos nas cordas de baixo, e o
dedão sempre fazendo o baixo alternado.&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/06-outra_base_com_dedilhado-thumbpicking.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/06-outra_base_com_dedilhado-thumbpicking.mp3" title="Baixar MP3 - Base thumbpicking em dó, com dedilhado"&gt;Baixar
MP3&lt;/a&gt;
 |  &lt;a href="http://eljunior.files.wordpress.com/2011/12/06-outra_base_com_dedilhado-thumbpicking.pdf"&gt;Baixar tablatura: Base thumbpicking em Dó
maior&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Músicas simples de exemplo para estudar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;O resto agora é com você, meu nego! :)&lt;/p&gt;
&lt;p&gt;Fazer o que a maioria dos outros violeiros/guitarristas têm preguiça:
aprender músicas novas!&lt;/p&gt;
&lt;p&gt;Para o pontapé inicial, gravei essas versões de Aloha Oe e Windy and
Warm pra esta pequena lição de &lt;em&gt;thumbpicking&lt;/em&gt;. Você pode começar
trabalhando nelas, ou achar outras no YouTube (&lt;a href="http://www.youtube.com/watch?v=Z3RArufrbgw" title="Freight Train lesson no Youtube"&gt;Freight
Train&lt;/a&gt;
é uma boa).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemplo de Thumbpicking - Aloha Oe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/07-exemplo-aloha_oe.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/07-exemplo-aloha_oe.mp3" title="Baixar MP3 de Aloha Oe"&gt;Baixar MP3 - Aloha
Oe&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Exemplo de Thumbpicking - Windy &amp;amp; Warm&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;
&lt;audio controls="controls"&gt;  
&lt;source src="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/08-exemplo-windy_and_warm.mp3" type="audio/mpeg"&gt;  
&lt;/source&gt;

&lt;embed height="80px" width="100px"&gt;


&lt;/embed&gt;

Your browser does not support this audio  
&lt;/audio&gt;

&lt;/p&gt;

&lt;p&gt;&lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/08-exemplo-windy_and_warm.mp3" title="Baixar MP3 - Windy and Warm"&gt;Baixar MP3 - Windy and
Warm&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Não deixe de conferir as versões de Windy &amp;amp; Warm de Tommy e Chet no
Youtube. Só do Tommy tem várias versões, uma melhor que a outra...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;E aprenda mais músicas. Dizem que músicas são os melhores professores.
Copie as versões dos outros, faça as suas versões.&lt;/p&gt;
&lt;p&gt;Pra você não se frustrar, comece com músicas simples. Se as que você já
tentou estão fáceis, tente aprender algumas do Tommy Emmanuel ou do Chet
Atkins, olhando os vídeos no Youtube, ou
&lt;a href="http://tommyemmanuel.wordpress.com/gitar-tabok/" title="blog compartilhando tablaturas do Tommy"&gt;catando&lt;/a&gt;
&lt;a href="http://tommyemmanuel.wordpress.com/chet-atkins/" title="blog compartilhando tablaturas do Chet"&gt;algumas&lt;/a&gt;
tablaturas por aí. (Se todas estiverem fáceis, me avise, que vou querer
fazer aula com você. :)&lt;/p&gt;
&lt;p&gt;Uma coisa que ajuda na hora de aprender uma música, é &lt;a href="http://eljunior.wordpress.com/2011/07/28/tocar-video-ou-musica-em-outra-velocidade-mantendo-o-tom/" title="como tocar vídeo ou música em outra velocidade, mantendo o tom"&gt;reproduzir o
arquivo de áudio e/ou vídeo mais lento, mantendo o mesmo
tom&lt;/a&gt;.
Existem programas que ajudam nisso, no Linux eu uso o &lt;a href="http://29a.ch/playitslowly/" title="Play It Slowly"&gt;Play It
Slowly&lt;/a&gt; e o
&lt;a href="http://www.mplayerhq.hu/" title="site do mplayer"&gt;mplayer&lt;/a&gt; (na linha de
comando). Para Windows, muita gente usa o
&lt;a href="http://bestpractice.sourceforge.net/" title="página do BestPractice"&gt;BestPractice&lt;/a&gt;
para áudio, mas não sei indicar um que faça o mesmo com vídeo.&lt;/p&gt;
&lt;p&gt;No más, acho que era isso! Quaisquer dúvidas, sugestões ou correções,
deixe um comentário ou mande um email, que responderei assim que puder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lista dos exercícios dessa lição:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Os arquivos de áudio estão publicados &lt;a href="http://soundcloud.com/eliasdorneles/sets/aprendendo-thumbpicking-1" title="Aprendendo Thumbpicking - Soundcloud - eliasdorneles"&gt;num
&lt;em&gt;set&lt;/em&gt;&lt;/a&gt;
do &lt;a href="http://soundcloud.com/" title="SoundCloud - Share Your Sounds"&gt;SoundCloud&lt;/a&gt;.  O
SoundCloud desativou os downloads para os MP3 porque estouraram os limites,
então movi os arquivos para &lt;a href="https://googledrive.com/host/0B5Aeqmaq5y1MSTVNOXUtb0t0WnM/" title="Folder no
Google Drive com todos os MP3"&gt;um folder no Google
Drive&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E as tablaturas estão aqui:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://eljunior.files.wordpress.com/2011/12/01-baixo_alternado.pdf"&gt;Baixo
    Alternado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eljunior.files.wordpress.com/2011/12/02-acordes_no_tempo_forte_com_baixo_alternado.pdf"&gt;Acordes no Tempo Torte +
    Baixo_alternado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eljunior.files.wordpress.com/2011/12/03-acordes_no_contratempo_com_baixo_alternado.pdf"&gt;Acordes no contratempo +
    Baixo_alternado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eljunior.files.wordpress.com/2011/12/04-base-thumbpicking.pdf"&gt;Base thumbpicking - Trocando
    acordes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eljunior.files.wordpress.com/2011/12/05-base_com_dedilhado-thumbpicking.pdf"&gt;Base thumbpicking +
    dedilhado&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://eljunior.files.wordpress.com/2011/12/06-outra_base_com_dedilhado-thumbpicking.pdf"&gt;Base thumbpicking em
    Dó&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Sun, 11 Dec 2011 23:12:00 -0200</pubDate><guid isPermaLink="false">tag:,2011-12-11:2011/12/11/aprendendo-thumbpicking.html</guid></item><item><title>A maleta do milhão</title><link>/2011/10/17/a-maleta-do-milhao.html</link><description>&lt;p&gt;&lt;a href="http://www.flickr.com/photos/julianrod/432888092/"&gt;&lt;img alt="maleta do
milhão" src="http://eljunior.files.wordpress.com/2011/10/432888092_8887774475_m.jpg" title="maleta cheia de dinheiro" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Anos atrás, eu estava numa sessão de conversação da escola de inglês
(que por sinal, paguei caro e não valeu o retorno), e a professora pediu
pra cada pessoa dizer o que faria se encontrasse uma maleta com um
milhão de reais. Desperta a imaginação do pessoal, surgiram rapidamente
novos adjetivos, verbos e substantivos do idioma da rainha na fala da
galera, cumprindo a intenção da brincadeira (Ilustração roubada de:
&lt;a href="http://www.flickr.com/photos/julianrod/432888092/" title="http://www.flickr.com/photos/julianrod/432888092/"&gt;julianrod&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;As respostas variaram entre os malandros que devolveriam a maleta
pedindo uma recompensa, a galera bon-vivant que beijaria a maleta e
torraria a grana viajando o mundo conhecendo gente nova e fazendo festa,
e o pessoal consciência social que doaria tudo pra os pobres (hmm,
talvez antes comprar um apartamento modesto. ahn, e mandar uma grana pra
os pais também..!). A minha resposta: "Eu faria de conta que não tinha
visto nada, deixava a maleta lá e ia-me embora! Dinheiro assim só traz
azar..." Ok, pode não ser a resposta mais imaginativa do mundo, e
certamente vem com uma carguinha de superstição (o que vem fácil, vai
fácil) de brinde.&lt;br /&gt;
Todavia, acredito que seja uma superstição que é na verdade útil
(principalmente se a maleta pertence a um gângster com o dobro do meu
tamanho, ou a um golpista que me ludibriaria mais tarde), pois pensando
desse jeito eu tendo a não ser ambicioso demais.&lt;/p&gt;
&lt;p&gt;Dinheiro fácil é um atrativo pra muita gente - a Internet está cheia de
tramóias que prometem ensinar como ganhar na Mega Sena (vender apostilas
de tramóias vem a ser possivelmente o jeito mais fácil de lucrar com a
Mega Sena), e tem muita gente que gasta considerável dinheiro e esforço
montando esquemas pra ajudar a aumentar as chances. As famosas fraudes
nigerianas fizeram a miséria de muita gente que caiu no conto de vigário
contado em emails pessimamente escritos (a propósito, quem lê inglês se
divertirá com &lt;a href="http://web.archive.org/web/20070209072152/spl.haxial.net/nigerian-fraud/" title="O comedor saiu comido"&gt;a história do cara que sacaneou o spammer
nigeriano&lt;/a&gt;).
E tudo isso, por acreditar na falsa premissa de que mais dinheiro é
igual a mais felicidade.&lt;/p&gt;
&lt;p&gt;Bem, eu provavelmente não vivi o suficiente pra poder opinar com muita
propriedade sobre assuntos financeiros (ainda tenho muitas más decisões
a tomar pela frente :), mas o pouco que já vivi me é suficiente pra
corroborar o seguinte princípio: "Você DIFICILMENTE vai ser mais feliz
do que você é agora, com mais dinheiro do que você tem agora."&lt;/p&gt;
&lt;p&gt;Aparentemente, todo mundo sabe disso, mais ou menos. Ao mesmo tempo,
todo mundo ainda quer ganhar um pouco mais, e acaba eventualmente
pensando que só fala esse tipo de coisa quem já tem uma vida
confortável, emprego razoável, etc e tal. Bem... talvez isso tenha sua
parcela de verdade. Ainda assim, é certo que quem não consegue se
satisfazer com um salário mirrado, dificilmente vai aprender a ser feliz
com um salário maior. Porque um salário maior pode até trazer um
pouquinho mais de conforto, mas não vai mudar muito o jeito que você
funciona.&lt;/p&gt;
&lt;p&gt;O pensamento de que a gente seria mais feliz se tivesse mais dinheiro
está diretamente relacionado com um viés cognitivo conhecido como
ancoragem (a Wikipedia em inglês tem um &lt;a href="http://en.wikipedia.org/wiki/Anchoring"&gt;ótimo artigo a
respeito&lt;/a&gt;). Ancoragem se trata
da tendência humana de confiar demais em um determinado dado ou
informação (a "âncora"), na hora de tomar uma decisão. O exemplo da
Wikipedia é, na busca de um carro usado para comprar, focar
excessivamente no ano ou no registro do odômetro (ancorando o valor do
veículo à essa informação), em vez de nas condições de manutenção do
motor e da transmissão, e do veículo em geral.&lt;/p&gt;
&lt;p&gt;Com o salário mensal é a mesma coisa: ancoramos trouxamente os números
no contracheque ao nosso bem estar em geral! Quando vem um aumento, o
efeito na felicidade vem e vai, e passa pouco antes ou depois de logo. O
satisfeito seguirá satisfeito e o descontente, descontente (às vezes um
pouco menos, às vezes um pouco mais).&lt;/p&gt;
&lt;p&gt;E dinheiro fácil ganhado na loteria pode muito possivelmente ser a pior
coisa que acontece na vida de alguém. Existem inúmeros casos em que os
"sortudos" só se fodem com as consequências, ou porque não sabem
administrar a grana, ou porque perdem a paz porque a família discordou
do melhor jeito de gastar e se volta contra ele, ou porque tem um monte
de malandro querendo se aproveitar. Quantos quiçá prefeririam nunca ter
apostado...&lt;/p&gt;
&lt;p&gt;Se o tempo e o dinheiro que as pessoas despendem nesses esquemas de
dinheiro fácil (bolão, tramóia pra Mega Sena, jogatinas online, etc)
fossem usados pra aprender alguma habilidade nova, ou estudar algum
assunto de interesse, provavelmente seria uma fonte maior de felicidade,
bem-estar e, por que não, talvez até de riqueza mesmo. Alguém pode
descobrir que gosta de pintar, bordar, contar histórias, tocar um
instrumento, fazer desenhos/vídeos engraçados, sei lá!, e acabar
arranjando um novo ofício enquanto se diverte!&lt;/p&gt;
&lt;p&gt;É bem possível que eu esteja sendo tendencioso escrevendo sobre isso
tudo, porque neste momento estou em transição entre dois empregos, sendo
que o salário no meu emprego atual compreende mais ou menos a metade do
meu salário anterior (obtive um aumento de -50%, yay!). Por causa disso,
muita gente veio me dizer que estou fazendo besteira, arruinando minha
carreira, que não valia a pena, etc e tal. Aparentemente, são bem poucas
as pessoas que sabem que, na verdade, eu não estou sacrificando nada!&lt;br /&gt;
Estou só tentando ser feliz.&lt;/p&gt;
&lt;p&gt;E quer saber? Só de me dar conta que eu consegui sair de onde eu estava,
e estou indo pra onde estou indo, já me dá um contentamento do caráleo!
:D&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Mon, 17 Oct 2011 23:40:00 -0200</pubDate><guid isPermaLink="false">tag:,2011-10-17:2011/10/17/a-maleta-do-milhao.html</guid></item><item><title>Vivendo alienado</title><link>/2011/09/21/vivendo-alienado.html</link><description>&lt;p&gt;Não tem problema!&lt;/p&gt;
&lt;p&gt;Se eu não reconheço as referências a livros ou filmes supostamente
clássicos ou nunca ouvi a banda que todo mundo conhece, não tem
problema. Se não conheço o último meme do Twitter, nunca assisti o
seriado da moda, nem uso a última versão do software/gadget que todo
mundo tá usando... tá tudo tranquilo!&lt;/p&gt;
&lt;p&gt;Com o passar do tempo, vou percebendo que perdi algumas coisas, mas não
muito.&lt;/p&gt;
&lt;p&gt;Eu costumava me importar com ficar boiando nas conversas, não entender
as piadas, e às vezes, não ter a mínima idéia do que os outros tavam
falando...&lt;/p&gt;
&lt;p&gt;Todavia, a gente já convive com ruído demais. Temos música e literatura
de vários séculos, filmes de várias décadas, mais o que existe na
Internet, é devastador! Não temos muita opção senão confiar no nosso
filtro nativo.&lt;/p&gt;
&lt;p&gt;Tentar se manter atualizado ou "desalienado" custa muito caro, e é um
custo que passa praticamente despercebido.&lt;/p&gt;
&lt;p&gt;Os grandes artistas frequentemente usam as mesmas ferramentas a vida
inteira, mudando pouco ou nada, só quando realmente não têm outra opção.
Isso é porque conhecem o custo de um upgrade.&lt;/p&gt;
&lt;p&gt;Se eu conseguir me concentrar no que é bom pra mim, tanto melhor.&lt;/p&gt;
&lt;p&gt;Meu negócio é viver alienado e desatualizado, mesmo!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.flickr.com/photos/neofob/2462886262/" title="Will this lo-fi studio work? by neofob, on Flickr"&gt;&lt;img alt="Will this lo-fi studio
work?" src="https://farm3.static.flickr.com/2104/2462886262_2b438e50c1.jpg" /&gt;&lt;/a&gt;&lt;br /&gt;
Imagem de: &lt;a href="http://www.flickr.com/photos/neofob/2462886262/"&gt;neofob&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Wed, 21 Sep 2011 11:48:00 -0300</pubDate><guid isPermaLink="false">tag:,2011-09-21:2011/09/21/vivendo-alienado.html</guid></item><item><title>Tocar vídeo ou música em outra velocidade mantendo o tom</title><link>/2011/07/28/tocar-video-ou-musica-em-outra-velocidade-mantendo-o-tom.html</link><description>&lt;p&gt;Alguns meses atrás descobri o &lt;a href="http://29a.ch/playitslowly/" title="http://29a.ch/playitslowly/"&gt;Play it slowly&lt;/a&gt;, um programa para tocar arquivos de áudio em
velocidades ou alturas diferentes, no Linux. Você pode usá-lo para, por
exemplo, ouvir uma música no mesmo tom da original mas com um ritmo bem mais
lento (útil para aprender as notas de um solo complicado), ou ainda ouvir um
&lt;em&gt;podcast&lt;/em&gt; numa velocidade um pouco mais rápida sem transformar a voz do
palestrante na de um ratinho. (Tem um equivalente para Windows, &lt;a href="http://bestpractice.sourceforge.net" title="http://bestpractice.sourceforge.net"&gt;Best
Practice&lt;/a&gt;, grátis e livre assim como o Play it
slowly).&lt;/p&gt;
&lt;p&gt;Frequentemente eu preciso fazer algo parecido, mas com um vídeo. A melhor
alternativa que encontrei, até agora, é utilizar o plugin
&lt;a href="http://scaletempo.sourceforge.net" title="http://scaletempo.sourceforge.net"&gt;scaletempo&lt;/a&gt; do &lt;a href="http://www.mplayerhq.hu" title="http://www.mplayerhq.hu"&gt;mplayer&lt;/a&gt; (nunca testei, mas acredito que também funcione no
Windows):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mplayer -af scaletempo video.avi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Tendo iniciado o &lt;em&gt;mplayer&lt;/em&gt; assim, basta usar os atalhos [ ou ] (abre e
fecha colchetes) para reduzir ou aumentar a velocidade, respectivamente!
Para o &lt;em&gt;mplayer&lt;/em&gt; sempre carregar o plugin &lt;em&gt;scaletempo&lt;/em&gt; para qualquer
arquivo, coloquei no meu &lt;em&gt;\~/.mplayer/config&lt;/em&gt; a diretiva:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;af=scaletempo
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Era isso! :)&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Thu, 28 Jul 2011 10:53:00 -0300</pubDate><guid isPermaLink="false">tag:,2011-07-28:2011/07/28/tocar-video-ou-musica-em-outra-velocidade-mantendo-o-tom.html</guid></item><item><title>Steve Yegge é meu herói!</title><link>/2011/07/28/steve-yegge-e-meu-heroi.html</link><description>&lt;p&gt;&lt;a href="http://steve-yegge.blogspot.com" title="http://steve-yegge.blogspot.com"&gt;Steve
Yegge&lt;/a&gt;
é meu herói!&lt;/p&gt;
&lt;p&gt;Já que ele voltou a escrever no blog (dois posts na mesma semana, yay!),
obrigo-me a escrever aqui também. A gente acaba criando uma relação
afetiva com certos feeds, que quando aparece um post novo o seu dia
melhora, nem que seja um pouquinho.&lt;/p&gt;
&lt;p&gt;De quando em vez, eu faço uma limpa nos meus feeds, e removo os que
estão com muito ruído, ou que eu não esteja mais interessado, ou ainda,
que dá pra arriscar ficar desinformado. Mas o feed do Mr. Yegge veio pra
ficar. Mesmo que ele poste somente uma vez por ano. &lt;em&gt;Take all the time
you want, Steve! No need to hurry, we'll be listening. We are glad
you're back, but you don't need to care. Just... thanks, man! :)&lt;br /&gt;
&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Por causa desse senhor Yegge, eu acabei aprendendo algumas coisas
imporantes. Eu certamente não sou importante, e talvez essas coisas
acabem não sendo tão importantes assim, mas é que, nos contextos que eu
estive, essas coisas foram importantes pra mim. O problema é que, o
tempo vai passando, e eu vou achando que já aprendi essas coisas
importantes, e aí vou esquecendo, devagaritcho. Quando percebo, oh boy,
tô fazendo tudo errado, de novo!&lt;/p&gt;
&lt;p&gt;Talvez a mentalidade correta seria, eu ainda estou aprendendo. É isso!
Então, por causa do senhor Yegge, eu acabei não aprendendo coisas
importantes, mas acabei aprendendo que elas são importantes, e que eu
preciso seguir tentando aprender.&lt;/p&gt;
&lt;p&gt;Por isso, que eu tô indo reler novamente os rants antigos do Steve, pra
aprender que &lt;a href="http://steve-yegge.blogspot.com/2008/06/done-and-gets-things-smart.html" title="http://steve-yegge.blogspot.com/2008/06/done-and-gets-things-smart.html"&gt;sou um péssimo programador e preciso aprender com os
melhores que
eu&lt;/a&gt;, &lt;a href="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html" title="http://steve-yegge.blogspot.com/2008/02/portrait-of-n00b.html"&gt;não
devo ter medo de
código&lt;/a&gt;,
&lt;a href="http://steve-yegge.blogspot.com/2008/08/business-requirements-are-bullshit.html" title="http://steve-yegge.blogspot.com/2008/08/business-requirements-are-bullshit.html"&gt;o melhor jeito de escolher projetos é fazer pra mim
mesmo&lt;/a&gt;,
&lt;a href="http://steve-yegge.blogspot.com/2007/06/rich-programmer-food.html" title="http://steve-yegge.blogspot.com/2007/06/rich-programmer-food.html"&gt;compiladores importam e eu tenho que escrever
um&lt;/a&gt;,
&lt;a href="http://steve-yegge.blogspot.com/2009/04/have-you-ever-legalized-marijuana.html" title="http://steve-yegge.blogspot.com/2009/04/have-you-ever-legalized-marijuana.html"&gt;o tempo que leva é o tempo que
leva&lt;/a&gt;,
e o resto que eu uh... esqueci já! Tá vendo? Eu preciso mesmo reler!&lt;/p&gt;
&lt;p&gt;Espero que o Steve Yegge não se importe que eu descreva o blog dele
quase como um livro de auto-ajuda. Mas... pra mim funciona. Então,
licençinha, que os rants são compriditos!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Thu, 28 Jul 2011 08:23:00 -0300</pubDate><guid isPermaLink="false">tag:,2011-07-28:2011/07/28/steve-yegge-e-meu-heroi.html</guid></item><item><title>Economia vs. Consumo</title><link>/2011/02/03/economia-vs.-consumo.html</link><description>&lt;p&gt;Dias atrás estava debatendo com alguns amigos, tentando demonstrar como não era
muito intuitivo o jeito que acostumamos a pensar sobre consumo de combustível,
para efeito de comparação. Perguntei a eles o que fariam se tivessem dois
carros, um sedã que fizesse 10km/L e uma camionete que fizesse 5km/L, e
tivessem que escolher entre o upgrade da camionete para uma que fizesse 10km/L
ou o upgrade do sedã para um que fizesse 35km/L.  Todos me disseram que iriam
obviamente com a segunda opção.&lt;/p&gt;
&lt;p&gt;Levou-me algum tempo para conseguir explicar que provavelmente seria uma má
decisão, pois se ambos os carros fossem usados para as mesmas viagens, a
primeira opção (upgrade da camionete) é a mais econômica.  Veja nessa tabela os
valores do consumo de combustível para andar 100km com cada carro, calculado
para os dois upgrades:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;            Consumo da camionete   Consumo do sedã           Consumo total
----------- ---------------------- ------------------------- ---------------
Upgrade 1   100km / 10km/L = 10L   100km / 10km/L = 10L      20L
Upgrade 2   100km / 5L = 20L       100km / 35km/L =\~ 2,8L   22,8L
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Como se pode ver, o upgrade da camionete é a solução ótima, pois utiliza menos
combustível para os dois carros percorrendo as mesmas distâncias.
Evidentemente, a coisa seria diferente se você pudesse usar mais o sedã e menos
a camionete para fazer o upgrade valer a pena. Contudo, esse não é o foco do
exercício (afinal, se você não precisasse da camionete, você sempre poderia
aposentá-la, usar apenas o sedã para tudo e obteria um resultado equivalente ao
Upgrade 1). O problema em foco aqui é que estamos mais acostumados a pensar na
medida de economia (tantos quilômetros com um litro), e por isso pensamos
automaticamente em “quantos quilômetros conseguiremos fazer com X litros?”.
Porém, se estivéssemos pensando em uma medida de consumo (litros necessários
para tantos quilômetros), a pergunta seria “se eu andar 10km por dia com os
dois carros, quantos litros de combustível vou gastar?”, que representa melhor
o problema apresentado.&lt;/p&gt;
&lt;p&gt;A ideia é que para comparar automóveis em relação a consumo de combustível, é
melhor utilizar uma unidade de consumo que represente a quantidade de
combustível necessária para preencher determinada distância (L/100km ou GPM) em
vez da unidade de economia (km/L ou MPG), como já é feito em alguns países. O
centro da questão é que uma melhora modesta na economia de um veículo
ineficiente resulta em uma economia bem maior do que uma melhora na mesma
proporção em um veículo relativamente eficiente, e a unidade de medida de
consumo deixa isso bem mais aparente.&lt;/p&gt;
&lt;p&gt;Alguém pode pensar que a diferença entre um carro que anda 5km/L e outro que
anda 6km/L seria equivalente à diferença entre um carro que anda 10km/L e outro
que anda 12km/L já que a diferença entre estes é na mesma proporção (aumento de
20% na economia). Contudo, observe a tabela a seguir, que relaciona essas
medidas de economia e suas equivalentes em consumo (litros necessários para
cada 100km):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;km/L        5      6        10     12      20     24
L/100km     20     16,6     10     8,3     5      4,16
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Repare que apesar da proporção existente entre as diferenças de duas medidas
(aumento de economia de 20%), o valor do consumo varia de forma diferente: a
primeira diferença representa uma economia de 3,4 litros a cada 100km; a
segunda, economia de 1,17 litros a cada 100km; e a terceira, economia de menos
de 1 litro a cada 100km.&lt;/p&gt;
&lt;p&gt;Concluindo, comparar o consumo de combustíveis para veículos diferentes merece
uma boa dose de atenção devido a esses detalhes, e embora decidir qual opção é
mais econômica seja discussão específica para cada caso, uma coisa fica clara:
a melhora da economia de um carro ineficiente é em geral, bem melhor que a
melhora para um carro mais eficiente. Ou ainda, um carro que faz 12km/L é
melhor que um carro que faz 10km/L, mas não tão melhor quanto um carro que faz
10km/L é melhor que um carro que faz 8km/L. :)&lt;/p&gt;
&lt;p&gt;A Wikipedia em inglês tem uma seção sobre o assunto:
&lt;a href="http://en.wikipedia.org/wiki/Fuel_economy_in_automobiles#Units_of_measure"&gt;http://en.wikipedia.org/wiki/Fuel_economy_in_automobiles#Units_of_measure&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Editado:&lt;/strong&gt; correção dos números (grazie, Zé).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Elias Dorneles</dc:creator><pubDate>Thu, 03 Feb 2011 12:53:00 -0200</pubDate><guid isPermaLink="false">tag:,2011-02-03:2011/02/03/economia-vs.-consumo.html</guid></item></channel></rss>